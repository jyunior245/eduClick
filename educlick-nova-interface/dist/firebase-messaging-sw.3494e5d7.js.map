{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECCA,KAAK,gBAAgB,CAAC,OAAQ,SAAU,CAAK,EAC3C,GAAI,CACF,IAAM,EAAO,EAAM,IAAI,CAAG,EAAM,IAAI,CAAC,IAAI,GAAK,CAAC,EACzC,EAAS,EAAK,YAAY,EAAI,EAAK,YAAY,CAAC,KAAK,EAAK,WAE1D,EAAU,CACd,KAFY,EAAK,YAAY,EAAI,EAAK,YAAY,CAAC,IAAI,EAAK,GAG5D,KAAM,EAAK,IAAI,EAAI,CAAC,EACpB,KAAM,qBACR,EACA,EAAM,SAAS,CAAC,KAAK,YAAY,CAAC,gBAAgB,CAAC,EAAO,GAC5D,CAAE,MAAO,EAAG,CAEV,EAAM,SAAS,CAAC,KAAK,YAAY,CAAC,gBAAgB,CAAC,WAAY,CAAE,KAAM,kBAAmB,GAC5F,CACF,GAEA,KAAK,gBAAgB,CAAC,oBAAqB,SAAU,CAAK,EACxD,EAAM,YAAY,CAAC,KAAK,GAExB,EAAM,SAAS,CACb,QAAQ,QAAQ,CAAC,CAAE,KAAM,SAAU,oBAAqB,CAAA,CAAK,GAAG,IAAI,CAAC,AAAA,IACnE,IAAK,IAAI,KAAU,EACjB,GAAI,EAAO,GAAG,CAAC,QAAQ,CAJjB,MAI0B,UAAW,EAAQ,OAAO,EAAO,KAAK,GAExE,GAAI,QAAQ,UAAU,CAAE,OAAO,QAAQ,UAAU,CANzC,IAOV,GAEJ,E,G,E","sources":["<anon>","src/client/firebase-messaging-sw.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired50e\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired50e\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4SGyO\", function(module, exports) {\n// Basic Service Worker to show notifications for FCM push\nself.addEventListener('push', function(event) {\n    try {\n        const data = event.data ? event.data.json() : {};\n        const title = data.notification && data.notification.title || 'EduClick';\n        const body = data.notification && data.notification.body || '';\n        const options = {\n            body: body,\n            data: data.data || {},\n            icon: '/icons/icon-192.png'\n        };\n        event.waitUntil(self.registration.showNotification(title, options));\n    } catch (e) {\n        // fallback\n        event.waitUntil(self.registration.showNotification('EduClick', {\n            body: \"Nova notifica\\xe7\\xe3o\"\n        }));\n    }\n});\nself.addEventListener('notificationclick', function(event) {\n    event.notification.close();\n    const url = '/';\n    event.waitUntil(clients.matchAll({\n        type: 'window',\n        includeUncontrolled: true\n    }).then((windowClients)=>{\n        for (let client of windowClients){\n            if (client.url.includes(url) && 'focus' in client) return client.focus();\n        }\n        if (clients.openWindow) return clients.openWindow(url);\n    }));\n});\n\n});\n\n\nparcelRequire(\"4SGyO\");\n\n//# sourceMappingURL=firebase-messaging-sw.3494e5d7.js.map\n","// Basic Service Worker to show notifications for FCM push\r\nself.addEventListener('push', function (event) {\r\n  try {\r\n    const data = event.data ? event.data.json() : {};\r\n    const title = (data.notification && data.notification.title) || 'EduClick';\r\n    const body = (data.notification && data.notification.body) || '';\r\n    const options = {\r\n      body,\r\n      data: data.data || {},\r\n      icon: '/icons/icon-192.png'\r\n    };\r\n    event.waitUntil(self.registration.showNotification(title, options));\r\n  } catch (e) {\r\n    // fallback\r\n    event.waitUntil(self.registration.showNotification('EduClick', { body: 'Nova notificação' }));\r\n  }\r\n});\r\n\r\nself.addEventListener('notificationclick', function (event) {\r\n  event.notification.close();\r\n  const url = '/';\r\n  event.waitUntil(\r\n    clients.matchAll({ type: 'window', includeUncontrolled: true }).then(windowClients => {\r\n      for (let client of windowClients) {\r\n        if (client.url.includes(url) && 'focus' in client) return client.focus();\r\n      }\r\n      if (clients.openWindow) return clients.openWindow(url);\r\n    })\r\n  );\r\n});\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","self","addEventListener","event","data","json","title","notification","options","body","icon","waitUntil","registration","showNotification","e","close","clients","matchAll","type","includeUncontrolled","then","windowClients","client","url","includes","focus","openWindow"],"version":3,"file":"firebase-messaging-sw.3494e5d7.js.map"}