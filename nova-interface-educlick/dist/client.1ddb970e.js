// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  // INSERT_LOAD_HERE

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"cDij9":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = "localhost";
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "439701173a9199ea";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "027f0c831ddb970e";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"hA1Na":[function(require,module,exports,__globalThis) {
var _cadastroCss = require("../presentation/views/styles/cadastro.css");
var _loginPage = require("./pages/LoginPage");
var _cadastroPage = require("./pages/CadastroPage");
var _dashboardProfessorPage = require("./pages/DashboardProfessorPage");
var _professorPublicoPage = require("./pages/ProfessorPublicoPage");
var _agendamentoPage = require("./pages/AgendamentoPage");
var _editarPerfilProfessorPage = require("./pages/EditarPerfilProfessorPage");
var _api = require("./services/api");
var _homePage = require("./pages/HomePage");
var _logger = require("./utils/logger");
var _cadastroService = require("./services/CadastroService");
var _localAuthProvider = require("infrastructure/auth/LocalAuthProvider");
var _loginService = require("./services/LoginService");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(0, _logger.logger).info('EduClick - Cliente iniciado');
function logout() {
    (0, _api.logoutProfessor)().finally(()=>window.location.href = '/');
}
function rotear() {
    return __awaiter(this, void 0, void 0, function*() {
        const root = document.getElementById('root');
        if (!root) return;
        const path = window.location.pathname;
        // Rotas públicas
        if (path === '/login') return (0, _loginPage.renderLoginPage)(root);
        if (path === '/cadastro') return (0, _cadastroPage.renderCadastroPage)(root);
        if (path.startsWith('/professor/')) {
            const linkUnico = decodeURIComponent(path.split('/')[2]);
            return (0, _professorPublicoPage.renderProfessorPublicoPage)(root, linkUnico);
        }
        if (path.startsWith('/agendar/')) {
            const professorId = path.split('/')[2];
            return (0, _agendamentoPage.renderAgendamentoPage)(root, professorId);
        }
        // Rotas protegidas (dashboard, editar perfil)
        if (path === '/dashboard' || path === '/editar-perfil') {
            const perfilRes = yield (0, _api.getPerfilProfessor)();
            if (!perfilRes.ok) {
                window.history.pushState({}, '', '/login');
                return (0, _loginPage.renderLoginPage)(root);
            }
            if (path === '/dashboard') return (0, _dashboardProfessorPage.renderDashboardProfessorPage)(root);
            if (path === '/editar-perfil') return (0, _editarPerfilProfessorPage.renderEditarPerfilProfessorPage)(root);
        }
        // Página inicial
        return (0, _homePage.renderHomePage)(root);
    });
}
const authProvider = new (0, _localAuthProvider.FirebaseAuthProvider)();
(0, _cadastroService.CadastroService).setAuthProvider(authProvider);
(0, _loginService.LoginService).setAuthProvider(authProvider);
window.addEventListener('popstate', rotear);
window.addEventListener('DOMContentLoaded', rotear);
window.logout = logout;

},{"../presentation/views/styles/cadastro.css":"792VZ","./pages/LoginPage":"bYZC3","./pages/CadastroPage":"ehlZb","./pages/DashboardProfessorPage":"j9ewb","./pages/AgendamentoPage":"hxvF1","./pages/EditarPerfilProfessorPage":"5FGHL","./services/api":"kfpAV","./pages/HomePage":"5g5Lr","./utils/logger":"9hvW2","./services/CadastroService":"4eAyM","infrastructure/auth/LocalAuthProvider":"e7nW9","./services/LoginService":"4sEqg","./pages/ProfessorPublicoPage":"eEbb5"}],"792VZ":[function() {},{}],"bYZC3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderLoginPage", ()=>renderLoginPage);
var _loginTemplate = require("../templates/LoginTemplate");
var _loginService = require("../services/LoginService");
var _toast = require("../components/Toast");
var _validators = require("../utils/validators");
var _firebase = require("../firebase");
var _auth = require("firebase/auth");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function renderLoginPage(root) {
    return __awaiter(this, void 0, void 0, function*() {
        root.innerHTML = (0, _loginTemplate.LoginTemplate).render();
        const form = document.getElementById('form-login');
        if (form) form.onsubmit = handleLoginSubmit;
        const btnGoogle = document.getElementById('btnGoogleLogin');
        if (btnGoogle) btnGoogle.addEventListener('click', (e)=>{
            e.preventDefault();
            handleGoogleLogin();
        });
        const linkForgot = document.getElementById('linkForgotPassword');
        if (linkForgot) linkForgot.addEventListener('click', (e)=>{
            e.preventDefault();
            handleForgotPassword();
        });
    });
}
function handleLoginSubmit(event) {
    return __awaiter(this, void 0, void 0, function*() {
        event.preventDefault();
        const form = event.target;
        const formData = {
            email: form.email.value,
            senha: form.senha.value
        };
        const validation = (0, _validators.Validators).validateLogin(formData);
        if (!validation.isValid) {
            validation.errors.forEach((e)=>(0, _toast.mostrarToast)(e, 'danger'));
            return;
        }
        const result = yield (0, _loginService.LoginService).login(formData);
        if (result.success) setTimeout(()=>{
            window.location.href = '/dashboard';
        }, 1200);
        else (0, _toast.mostrarToast)(result.error || 'Erro no login', 'danger');
    });
}
function handleGoogleLogin() {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const cred = yield (0, _auth.signInWithPopup)((0, _firebase.auth), (0, _firebase.provider));
            const user = cred.user;
            if (!user) throw new Error('Falha ao autenticar com Google.');
            const uid = user.uid;
            const email = user.email || '';
            const nome = user.displayName || '';
            // Sincroniza usuário no backend (não bloqueante)
            try {
                yield fetch('http://localhost:3000/api/auth/sincronizar-usuario', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        uid,
                        email,
                        nome
                    })
                });
            } catch (e) {
                console.warn('Sync backend falhou (continuando):', e);
            }
            // Cria sessão no backend
            const sess = yield fetch('http://localhost:3000/api/auth/firebase-login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    uid
                })
            });
            if (!sess.ok) {
                let msg = "Falha ao criar sess\xe3o no backend.";
                try {
                    const j = yield sess.json();
                    msg = j.error || msg;
                } catch (_a) {}
                throw new Error(msg);
            }
            (0, _toast.mostrarToast)('Login com Google realizado!', 'success');
            setTimeout(()=>{
                window.location.href = '/dashboard';
            }, 900);
        } catch (err) {
            console.error('[GoogleLogin] erro:', err);
            (0, _toast.mostrarToast)((err === null || err === void 0 ? void 0 : err.message) || 'Erro no login com Google', 'danger');
        }
    });
}
function handleForgotPassword() {
    return __awaiter(this, void 0, void 0, function*() {
        var _a;
        try {
            const emailInput = document.getElementById('email');
            const email = (_a = emailInput === null || emailInput === void 0 ? void 0 : emailInput.value) === null || _a === void 0 ? void 0 : _a.trim();
            if (!email) {
                (0, _toast.mostrarToast)('Informe seu e-mail para recuperar a senha.', 'warning');
                return;
            }
            yield (0, _auth.sendPasswordResetEmail)((0, _firebase.auth), email);
            (0, _toast.mostrarToast)("E-mail de redefini\xe7\xe3o enviado! Verifique sua caixa de entrada.", 'success');
        } catch (err) {
            console.error('[ForgotPassword] erro:', err);
            const msg = (err === null || err === void 0 ? void 0 : err.message) || "Erro ao enviar e-mail de redefini\xe7\xe3o.";
            (0, _toast.mostrarToast)(msg, 'danger');
        }
    });
}

},{"../utils/validators":"k7iGK","../services/LoginService":"4sEqg","../components/Toast":"4e6Xy","../templates/LoginTemplate":"4pYsi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT","../firebase":"eXCoT","firebase/auth":"4ZBbi"}],"k7iGK":[function(require,module,exports,__globalThis) {
// Sistema centralizado de validação
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Validators", ()=>Validators);
class Validators {
    // Validações básicas
    static required(value) {
        return {
            test: (val)=>val !== null && val !== undefined && val.toString().trim() !== '',
            message: "Este campo \xe9 obrigat\xf3rio"
        };
    }
    static email(value) {
        return {
            test: (val)=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val),
            message: "E-mail deve ser v\xe1lido"
        };
    }
    static minLength(min) {
        return {
            test: (val)=>val && val.toString().length >= min,
            message: `Deve ter pelo menos ${min} caracteres`
        };
    }
    static maxLength(max) {
        return {
            test: (val)=>!val || val.toString().length <= max,
            message: `Deve ter no m\xe1ximo ${max} caracteres`
        };
    }
    static pattern(regex, message) {
        return {
            test: (val)=>regex.test(val),
            message
        };
    }
    static numeric(value) {
        return {
            test: (val)=>!isNaN(Number(val)) && Number(val) >= 0,
            message: "Deve ser um n\xfamero v\xe1lido"
        };
    }
    static positive(value) {
        return {
            test: (val)=>Number(val) > 0,
            message: 'Deve ser um valor positivo'
        };
    }
    static date(value) {
        return {
            test: (val)=>!isNaN(Date.parse(val)),
            message: "Data deve ser v\xe1lida"
        };
    }
    static futureDate(value) {
        return {
            test: (val)=>new Date(val) > new Date(),
            message: 'Data deve ser futura'
        };
    }
    // Validações específicas do domínio
    static telefone(value) {
        return {
            test: (val)=>/^\(\d{2}\) \d{4,5}-\d{4}$/.test(val),
            message: 'Telefone deve estar no formato (11) 99999-9999'
        };
    }
    static linkUnico(value) {
        return {
            test: (val)=>/^[a-zA-Z0-9-_]+$/.test(val),
            message: "Link \xfanico deve conter apenas letras, n\xfameros, h\xedfens e underscores"
        };
    }
    // Função para aplicar múltiplas validações
    static validate(value, rules) {
        const errors = [];
        for (const rule of rules)if (!rule.test(value)) errors.push(rule.message);
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    // Validações compostas para formulários específicos
    static validateLogin(data) {
        const errors = [];
        const emailResult = this.validate(data.email, [
            this.required(data.email),
            this.email(data.email)
        ]);
        const senhaResult = this.validate(data.senha, [
            this.required(data.senha),
            this.minLength(6)
        ]);
        errors.push(...emailResult.errors, ...senhaResult.errors);
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static validateCadastro(data) {
        const errors = [];
        const nomeResult = this.validate(data.nome, [
            this.required(data.nome),
            this.minLength(3)
        ]);
        const emailResult = this.validate(data.email, [
            this.required(data.email),
            this.email(data.email)
        ]);
        const senhaResult = this.validate(data.senha, [
            this.required(data.senha),
            this.minLength(6)
        ]);
        errors.push(...nomeResult.errors, ...emailResult.errors, ...senhaResult.errors);
        if (data.senha !== data.confirmarSenha) errors.push("As senhas n\xe3o coincidem");
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static validateAula(data) {
        const errors = [];
        const tituloResult = this.validate(data.titulo, [
            this.required(data.titulo),
            this.minLength(3)
        ]);
        const conteudoResult = this.validate(data.conteudo, [
            this.required(data.conteudo),
            this.minLength(10)
        ]);
        const valorResult = this.validate(data.valor, [
            this.required(data.valor),
            this.numeric(data.valor),
            this.positive(data.valor)
        ]);
        const duracaoResult = this.validate(data.duracao, [
            this.required(data.duracao),
            this.numeric(data.duracao),
            this.positive(data.duracao)
        ]);
        const maxAlunosResult = this.validate(data.maxAlunos, [
            this.required(data.maxAlunos),
            this.numeric(data.maxAlunos),
            this.positive(data.maxAlunos)
        ]);
        const dataHoraResult = this.validate(data.dataHora, [
            this.required(data.dataHora),
            this.date(data.dataHora),
            this.futureDate(data.dataHora)
        ]);
        errors.push(...tituloResult.errors, ...conteudoResult.errors, ...valorResult.errors, ...duracaoResult.errors, ...maxAlunosResult.errors, ...dataHoraResult.errors);
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jnFvT":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4sEqg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LoginService", ()=>LoginService);
// src/client/services/LoginService.ts
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let _authProvider;
class LoginService {
    static setAuthProvider(provider) {
        _authProvider = provider;
    }
    static login(data) {
        return __awaiter(this, void 0, void 0, function*() {
            var _a, _b, _c, _d, _e, _f;
            try {
                const { email, senha } = data;
                if (!_authProvider) throw new Error("Auth provider n\xe3o foi configurado.");
                // Fazer login no Firebase (vai lançar erro se credenciais inválidas)
                const usuario = yield _authProvider.login(email, senha);
                if (!usuario) {
                    (0, _toast.mostrarToast)("Email ou senha inv\xe1lidos", 'danger');
                    return {
                        success: false,
                        error: "Email ou senha inv\xe1lidos"
                    };
                }
                // pegar token (opcional — útil para validação no servidor)
                let token = '';
                try {
                    token = yield usuario.getIdToken();
                    localStorage.setItem('token', token);
                } catch (err) {
                    console.warn("N\xe3o foi poss\xedvel obter idToken do Firebase:", err);
                }
                const uid = (_a = usuario.uid) !== null && _a !== void 0 ? _a : usuario.id; // prefer uid
                const nome = (_c = (_b = usuario.displayName) !== null && _b !== void 0 ? _b : usuario.nome) !== null && _c !== void 0 ? _c : '';
                const userEmail = (_d = usuario.email) !== null && _d !== void 0 ? _d : email;
                // 1) Sincronizar usuário no backend (mantemos essa chamada)
                try {
                    const syncResponse = yield fetch('http://localhost:3000/api/auth/sincronizar-usuario', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            uid,
                            email: userEmail,
                            nome
                        })
                    });
                    if (!syncResponse.ok) console.warn("Erro ao sincronizar usu\xe1rio com o backend (n\xe3o fatal).");
                    else console.log("Usu\xe1rio sincronizado com o backend");
                } catch (syncError) {
                    console.warn('Erro ao sincronizar com o backend:', syncError);
                }
                // 2) Criar sessão no backend via novo endpoint específico para Firebase
                try {
                    const backendLogin = yield fetch('http://localhost:3000/api/auth/firebase-login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            uid
                        })
                    });
                    if (!backendLogin.ok) {
                        // tenta ler mensagem de erro do backend
                        let msg = "Falha ao criar sess\xe3o no backend.";
                        try {
                            const errJson = yield backendLogin.json();
                            msg = errJson.error || msg;
                        } catch (e) {}
                        (0, _toast.mostrarToast)(msg, 'danger');
                        return {
                            success: false,
                            error: msg
                        };
                    }
                    const json = yield backendLogin.json();
                    // Esperamos que o backend retorne o professor (ou objeto de usuário)
                    const professorFromBackend = (_f = (_e = json.professor) !== null && _e !== void 0 ? _e : json.data) !== null && _f !== void 0 ? _f : json;
                    (0, _toast.mostrarToast)('Login realizado com sucesso!', 'success');
                    return {
                        success: true,
                        data: professorFromBackend
                    };
                } catch (backendError) {
                    console.warn("Erro ao criar sess\xe3o no backend:", backendError);
                    (0, _toast.mostrarToast)("Erro ao criar sess\xe3o no backend.", 'danger');
                    return {
                        success: false,
                        error: "Erro ao criar sess\xe3o no backend."
                    };
                }
            } catch (error) {
                console.error('Erro no login:', error);
                // Mensagens amigáveis
                const message = error && error.message ? error.message : 'Erro ao fazer login. Tente novamente.';
                (0, _toast.mostrarToast)(message, 'danger');
                return {
                    success: false,
                    error: message
                };
            }
        });
    }
}

},{"../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4e6Xy":[function(require,module,exports,__globalThis) {
// Toast utilitário reutilizável
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mostrarToast", ()=>mostrarToast);
function mostrarToast(mensagem, tipo = 'success') {
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.style.position = 'fixed';
        toastContainer.style.top = '20px';
        toastContainer.style.right = '20px';
        toastContainer.style.zIndex = '9999';
        document.body.appendChild(toastContainer);
    }
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-bg-${tipo} border-0 show`;
    toast.role = 'alert';
    toast.ariaLive = 'assertive';
    toast.ariaAtomic = 'true';
    toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">${mensagem}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Fechar"></button>
    </div>
  `;
    toastContainer.appendChild(toast);
    setTimeout(()=>toast.remove(), 4000);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4pYsi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LoginTemplate", ()=>LoginTemplate);
class LoginTemplate {
    static render(params = {}) {
        return `
      <div class="container py-5">
        <div class="row justify-content-center">
          <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
              <div class="card-body p-4">
                <h2 class="mb-4 fw-bold text-center">Entrar</h2>
                ${params.errorMessage ? `<div class='alert alert-danger'>${params.errorMessage}</div>` : ''}
                <form id="form-login" onsubmit="${params.onSubmit || 'handleLoginSubmit'}(event)">
                  <div class="mb-3">
                    <label for="email" class="form-label">E-mail</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                  </div>
                  <div class="mb-3">
                    <label for="senha" class="form-label">Senha</label>
                    <input type="password" class="form-control" id="senha" name="senha" required>
                  </div>
                  <button type="submit" class="btn btn-primary w-100">Entrar</button>
                </form>
                <div class="mt-3">
                  <button id="btnGoogleLogin" class="btn btn-outline-danger w-100">
                    <i class="bi bi-google me-1"></i> Continuar com Google
                  </button>
                </div>
                <div class="mt-3 text-center">
                  <a href="/cadastro">N\xe3o tem conta? Cadastre-se</a>
                </div>
                <div class="mt-2 text-center">
                  <a href="#" id="linkForgotPassword">Esqueci minha senha</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eXCoT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "app", ()=>app);
parcelHelpers.export(exports, "auth", ()=>auth);
parcelHelpers.export(exports, "provider", ()=>provider);
var _app = require("firebase/app");
var _auth = require("firebase/auth");
// Parcel substitui process.env.* em build e lê .env automaticamente no root do projeto.
const firebaseConfig = {
    apiKey: "AIzaSyDyfcBWFbR-nx3hxcZNjAILDJ8mHWCY5Ic",
    authDomain: "educlick-681b9.firebaseapp.com",
    projectId: "educlick-681b9",
    storageBucket: "educlick-681b9.firebasestorage.app",
    messagingSenderId: "1018429512087",
    appId: "1:1018429512087:web:f9f42265310d3bc1168cd2"
};
const app = (0, _app.initializeApp)(firebaseConfig);
const auth = (0, _auth.getAuth)(app);
const provider = new (0, _auth.GoogleAuthProvider)();

},{"firebase/app":"cYOm2","firebase/auth":"4ZBbi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cYOm2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _app = require("@firebase/app");
parcelHelpers.exportAll(_app, exports);
var name = "firebase";
var version = "12.0.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (0, _app.registerVersion)(name, version, 'app');

},{"@firebase/app":"clWgn","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"clWgn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FirebaseError", ()=>(0, _util.FirebaseError));
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION);
parcelHelpers.export(exports, "_DEFAULT_ENTRY_NAME", ()=>DEFAULT_ENTRY_NAME);
parcelHelpers.export(exports, "_addComponent", ()=>_addComponent);
parcelHelpers.export(exports, "_addOrOverwriteComponent", ()=>_addOrOverwriteComponent);
parcelHelpers.export(exports, "_apps", ()=>_apps);
parcelHelpers.export(exports, "_clearComponents", ()=>_clearComponents);
parcelHelpers.export(exports, "_components", ()=>_components);
parcelHelpers.export(exports, "_getProvider", ()=>_getProvider);
parcelHelpers.export(exports, "_isFirebaseApp", ()=>_isFirebaseApp);
parcelHelpers.export(exports, "_isFirebaseServerApp", ()=>_isFirebaseServerApp);
parcelHelpers.export(exports, "_isFirebaseServerAppSettings", ()=>_isFirebaseServerAppSettings);
parcelHelpers.export(exports, "_registerComponent", ()=>_registerComponent);
parcelHelpers.export(exports, "_removeServiceInstance", ()=>_removeServiceInstance);
parcelHelpers.export(exports, "_serverApps", ()=>_serverApps);
parcelHelpers.export(exports, "deleteApp", ()=>deleteApp);
parcelHelpers.export(exports, "getApp", ()=>getApp);
parcelHelpers.export(exports, "getApps", ()=>getApps);
parcelHelpers.export(exports, "initializeApp", ()=>initializeApp);
parcelHelpers.export(exports, "initializeServerApp", ()=>initializeServerApp);
parcelHelpers.export(exports, "onLog", ()=>onLog);
parcelHelpers.export(exports, "registerVersion", ()=>registerVersion);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel);
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
var _idb = require("idb");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class PlatformLoggerServiceImpl {
    constructor(container){
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map((provider)=>{
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            } else return null;
        }).filter((logString)=>logString).join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return component?.type === "VERSION" /* ComponentType.VERSION */ ;
}
const name$q = "@firebase/app";
const version$1 = "0.14.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logger = new (0, _logger.Logger)('@firebase/app');
const name$p = "@firebase/app-compat";
const name$o = "@firebase/analytics-compat";
const name$n = "@firebase/analytics";
const name$m = "@firebase/app-check-compat";
const name$l = "@firebase/app-check";
const name$k = "@firebase/auth";
const name$j = "@firebase/auth-compat";
const name$i = "@firebase/database";
const name$h = "@firebase/data-connect";
const name$g = "@firebase/database-compat";
const name$f = "@firebase/functions";
const name$e = "@firebase/functions-compat";
const name$d = "@firebase/installations";
const name$c = "@firebase/installations-compat";
const name$b = "@firebase/messaging";
const name$a = "@firebase/messaging-compat";
const name$9 = "@firebase/performance";
const name$8 = "@firebase/performance-compat";
const name$7 = "@firebase/remote-config";
const name$6 = "@firebase/remote-config-compat";
const name$5 = "@firebase/storage";
const name$4 = "@firebase/storage-compat";
const name$3 = "@firebase/firestore";
const name$2 = "@firebase/ai";
const name$1 = "@firebase/firestore-compat";
const name = "firebase";
const version = "12.0.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The default app name
 *
 * @internal
 */ const DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
    [name$q]: 'fire-core',
    [name$p]: 'fire-core-compat',
    [name$n]: 'fire-analytics',
    [name$o]: 'fire-analytics-compat',
    [name$l]: 'fire-app-check',
    [name$m]: 'fire-app-check-compat',
    [name$k]: 'fire-auth',
    [name$j]: 'fire-auth-compat',
    [name$i]: 'fire-rtdb',
    [name$h]: 'fire-data-connect',
    [name$g]: 'fire-rtdb-compat',
    [name$f]: 'fire-fn',
    [name$e]: 'fire-fn-compat',
    [name$d]: 'fire-iid',
    [name$c]: 'fire-iid-compat',
    [name$b]: 'fire-fcm',
    [name$a]: 'fire-fcm-compat',
    [name$9]: 'fire-perf',
    [name$8]: 'fire-perf-compat',
    [name$7]: 'fire-rc',
    [name$6]: 'fire-rc-compat',
    [name$5]: 'fire-gcs',
    [name$4]: 'fire-gcs-compat',
    [name$3]: 'fire-fst',
    [name$1]: 'fire-fst-compat',
    [name$2]: 'fire-vertex',
    'fire-js': 'fire-js',
    [name]: 'fire-js-all'
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ const _apps = new Map();
/**
 * @internal
 */ const _serverApps = new Map();
/**
 * Registered components.
 *
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */ function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    } catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */ function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */ function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values())_addComponent(app, component);
    for (const serverApp of _serverApps.values())_addComponent(serverApp, component);
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */ function _getProvider(app, name) {
    const heartbeatController = app.container.getProvider('heartbeat').getImmediate({
        optional: true
    });
    if (heartbeatController) heartbeatController.triggerHeartbeat();
    return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */ function _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
    _getProvider(app, name).clearInstance(instanceIdentifier);
}
/**
 *
 * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.
 *
 * @returns true if the provide object is of type FirebaseApp.
 *
 * @internal
 */ function _isFirebaseApp(obj) {
    return obj.options !== undefined;
}
/**
 *
 * @param obj - an object of type FirebaseApp, FirebaseOptions or FirebaseAppSettings.
 *
 * @returns true if the provided object is of type FirebaseServerAppImpl.
 *
 * @internal
 */ function _isFirebaseServerAppSettings(obj) {
    if (_isFirebaseApp(obj)) return false;
    return 'authIdToken' in obj || 'appCheckToken' in obj || 'releaseOnDeref' in obj || 'automaticDataCollectionEnabled' in obj;
}
/**
 *
 * @param obj - an object of type FirebaseApp.
 *
 * @returns true if the provided object is of type FirebaseServerAppImpl.
 *
 * @internal
 */ function _isFirebaseServerApp(obj) {
    if (obj === null || obj === undefined) return false;
    return obj.settings !== undefined;
}
/**
 * Test only
 *
 * @internal
 */ function _clearComponents() {
    _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ERRORS = {
    ["no-app" /* AppError.NO_APP */ ]: "No Firebase App '{$appName}' has been created - call initializeApp() first",
    ["bad-app-name" /* AppError.BAD_APP_NAME */ ]: "Illegal App name: '{$appName}'",
    ["duplicate-app" /* AppError.DUPLICATE_APP */ ]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* AppError.APP_DELETED */ ]: "Firebase App named '{$appName}' already deleted",
    ["server-app-deleted" /* AppError.SERVER_APP_DELETED */ ]: 'Firebase Server App has been deleted',
    ["no-options" /* AppError.NO_OPTIONS */ ]: 'Need to provide options, when not being deployed to hosting via source.',
    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */ ]: 'First argument to `onLog` must be null or a function.',
    ["idb-open" /* AppError.IDB_OPEN */ ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-get" /* AppError.IDB_GET */ ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-set" /* AppError.IDB_WRITE */ ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-delete" /* AppError.IDB_DELETE */ ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
    ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */ ]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
    ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */ ]: 'FirebaseServerApp is not for use in browser environments.'
};
const ERROR_FACTORY = new (0, _util.ErrorFactory)('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FirebaseAppImpl {
    constructor(options, config, container){
        this._isDeleted = false;
        this._options = {
            ...options
        };
        this._config = {
            ...config
        };
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new (0, _component.Component)('app', ()=>this, "PUBLIC" /* ComponentType.PUBLIC */ ));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */ , {
            appName: this._name
        });
    }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Parse the token and check to see if the `exp` claim is in the future.
// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in
// the past.
function validateTokenTTL(base64Token, tokenName) {
    const secondPart = (0, _util.base64Decode)(base64Token.split('.')[1]);
    if (secondPart === null) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`);
        return;
    }
    const expClaim = JSON.parse(secondPart).exp;
    if (expClaim === undefined) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`);
        return;
    }
    const exp = JSON.parse(secondPart).exp * 1000;
    const now = new Date().getTime();
    const diff = exp - now;
    if (diff <= 0) console.error(`FirebaseServerApp ${tokenName} is invalid: the token has expired.`);
}
class FirebaseServerAppImpl extends FirebaseAppImpl {
    constructor(options, serverConfig, name, container){
        // Build configuration parameters for the FirebaseAppImpl base class.
        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : true;
        // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.
        const config = {
            name,
            automaticDataCollectionEnabled
        };
        if (options.apiKey !== undefined) // Construct the parent FirebaseAppImp object.
        super(options, config, container);
        else {
            const appImpl = options;
            super(appImpl.options, config, container);
        }
        // Now construct the data for the FirebaseServerAppImpl.
        this._serverConfig = {
            automaticDataCollectionEnabled,
            ...serverConfig
        };
        // Ensure that the current time is within the `authIdtoken` window of validity.
        if (this._serverConfig.authIdToken) validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');
        // Ensure that the current time is within the `appCheckToken` window of validity.
        if (this._serverConfig.appCheckToken) validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');
        this._finalizationRegistry = null;
        if (typeof FinalizationRegistry !== 'undefined') this._finalizationRegistry = new FinalizationRegistry(()=>{
            this.automaticCleanup();
        });
        this._refCount = 0;
        this.incRefCount(this._serverConfig.releaseOnDeref);
        // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry
        // will never trigger.
        this._serverConfig.releaseOnDeref = undefined;
        serverConfig.releaseOnDeref = undefined;
        registerVersion(name$q, version$1, 'serverapp');
    }
    toJSON() {
        return undefined;
    }
    get refCount() {
        return this._refCount;
    }
    // Increment the reference count of this server app. If an object is provided, register it
    // with the finalization registry.
    incRefCount(obj) {
        if (this.isDeleted) return;
        this._refCount++;
        if (obj !== undefined && this._finalizationRegistry !== null) this._finalizationRegistry.register(obj, this);
    }
    // Decrement the reference count.
    decRefCount() {
        if (this.isDeleted) return 0;
        return --this._refCount;
    }
    // Invoked by the FinalizationRegistry callback to note that this app should go through its
    // reference counts and delete itself if no reference count remain. The coordinating logic that
    // handles this is in deleteApp(...).
    automaticCleanup() {
        deleteApp(this);
    }
    get settings() {
        this.checkDestroyed();
        return this._serverConfig;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw ERROR_FACTORY.create("server-app-deleted" /* AppError.SERVER_APP_DELETED */ );
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The current SDK version.
 *
 * @public
 */ const SDK_VERSION = version;
function initializeApp(_options, rawConfig = {}) {
    let options = _options;
    if (typeof rawConfig !== 'object') {
        const name = rawConfig;
        rawConfig = {
            name
        };
    }
    const config = {
        name: DEFAULT_ENTRY_NAME,
        automaticDataCollectionEnabled: true,
        ...rawConfig
    };
    const name = config.name;
    if (typeof name !== 'string' || !name) throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */ , {
        appName: String(name)
    });
    options || (options = (0, _util.getDefaultAppConfig)());
    if (!options) throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */ );
    const existingApp = _apps.get(name);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if ((0, _util.deepEqual)(options, existingApp.options) && (0, _util.deepEqual)(config, existingApp.config)) return existingApp;
        else throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */ , {
            appName: name
        });
    }
    const container = new (0, _component.ComponentContainer)(name);
    for (const component of _components.values())container.addComponent(component);
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name, newApp);
    return newApp;
}
function initializeServerApp(_options, _serverAppConfig = {}) {
    if ((0, _util.isBrowser)() && !(0, _util.isWebWorker)()) // FirebaseServerApp isn't designed to be run in browsers.
    throw ERROR_FACTORY.create("invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */ );
    let firebaseOptions;
    let serverAppSettings = _serverAppConfig || {};
    if (_options) {
        if (_isFirebaseApp(_options)) firebaseOptions = _options.options;
        else if (_isFirebaseServerAppSettings(_options)) serverAppSettings = _options;
        else firebaseOptions = _options;
    }
    if (serverAppSettings.automaticDataCollectionEnabled === undefined) serverAppSettings.automaticDataCollectionEnabled = true;
    firebaseOptions || (firebaseOptions = (0, _util.getDefaultAppConfig)());
    if (!firebaseOptions) throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */ );
    // Build an app name based on a hash of the configuration options.
    const nameObj = {
        ...serverAppSettings,
        ...firebaseOptions
    };
    // However, Do not mangle the name based on releaseOnDeref, since it will vary between the
    // construction of FirebaseServerApp instances. For example, if the object is the request headers.
    if (nameObj.releaseOnDeref !== undefined) delete nameObj.releaseOnDeref;
    const hashCode = (s)=>{
        return [
            ...s
        ].reduce((hash, c)=>Math.imul(31, hash) + c.charCodeAt(0) | 0, 0);
    };
    if (serverAppSettings.releaseOnDeref !== undefined) {
        if (typeof FinalizationRegistry === 'undefined') throw ERROR_FACTORY.create("finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */ , {});
    }
    const nameString = '' + hashCode(JSON.stringify(nameObj));
    const existingApp = _serverApps.get(nameString);
    if (existingApp) {
        existingApp.incRefCount(serverAppSettings.releaseOnDeref);
        return existingApp;
    }
    const container = new (0, _component.ComponentContainer)(nameString);
    for (const component of _components.values())container.addComponent(component);
    const newApp = new FirebaseServerAppImpl(firebaseOptions, serverAppSettings, nameString, container);
    _serverApps.set(nameString, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */ function getApp(name = DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name);
    if (!app && name === DEFAULT_ENTRY_NAME && (0, _util.getDefaultAppConfig)()) return initializeApp();
    if (!app) throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */ , {
        appName: name
    });
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */ function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */ async function deleteApp(app) {
    let cleanupProviders = false;
    const name = app.name;
    if (_apps.has(name)) {
        cleanupProviders = true;
        _apps.delete(name);
    } else if (_serverApps.has(name)) {
        const firebaseServerApp = app;
        if (firebaseServerApp.decRefCount() <= 0) {
            _serverApps.delete(name);
            cleanupProviders = true;
        }
    }
    if (cleanupProviders) {
        await Promise.all(app.container.getProviders().map((provider)=>provider.delete()));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */ function registerVersion(libraryKeyOrName, version, variant) {
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;
    if (variant) library += `-${variant}`;
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version}":`
        ];
        if (libraryMismatch) warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        if (libraryMismatch && versionMismatch) warning.push('and');
        if (versionMismatch) warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
        logger.warn(warning.join(' '));
        return;
    }
    _registerComponent(new (0, _component.Component)(`${library}-version`, ()=>({
            library,
            version
        }), "VERSION" /* ComponentType.VERSION */ ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */ function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') throw ERROR_FACTORY.create("invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */ );
    (0, _logger.setUserLogHandler)(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */ function setLogLevel(logLevel) {
    (0, _logger.setLogLevel)(logLevel);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = 'firebase-heartbeat-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-heartbeat-store';
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) dbPromise = (0, _idb.openDB)(DB_NAME, DB_VERSION, {
        upgrade: (db, oldVersion)=>{
            // We don't use 'break' in this switch statement, the fall-through
            // behavior is what we want, because if there are multiple versions between
            // the old version and the current version, we want ALL the migrations
            // that correspond to those versions to run, not only the last one.
            // eslint-disable-next-line default-case
            switch(oldVersion){
                case 0:
                    try {
                        db.createObjectStore(STORE_NAME);
                    } catch (e) {
                        // Safari/iOS browsers throw occasional exceptions on
                        // db.createObjectStore() that may be a bug. Avoid blocking
                        // the rest of the app functionality.
                        console.warn(e);
                    }
            }
        }
    }).catch((e)=>{
        throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */ , {
            originalErrorMessage: e.message
        });
    });
    return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app) {
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME);
        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
        // We already have the value but tx.done can throw,
        // so we need to await it here to catch errors
        await tx.done;
        return result;
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError)) logger.warn(e.message);
        else {
            const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */ , {
                originalErrorMessage: e?.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, 'readwrite');
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        await tx.done;
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError)) logger.warn(e.message);
        else {
            const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */ , {
                originalErrorMessage: e?.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
function computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const MAX_HEADER_BYTES = 1024;
const MAX_NUM_STORED_HEARTBEATS = 30;
class HeartbeatServiceImpl {
    constructor(container){
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */ this._heartbeatsCache = null;
        const app = this.container.getProvider('app').getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then((result)=>{
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */ async triggerHeartbeat() {
        try {
            const platformLogger = this.container.getProvider('platform-logger').getImmediate();
            // This is the "Firebase user agent" string from the platform logger
            // service, not the browser user agent.
            const agent = platformLogger.getPlatformInfoString();
            const date = getUTCDateString();
            if (this._heartbeatsCache?.heartbeats == null) {
                this._heartbeatsCache = await this._heartbeatsCachePromise;
                // If we failed to construct a heartbeats cache, then return immediately.
                if (this._heartbeatsCache?.heartbeats == null) return;
            }
            // Do not store a heartbeat if one is already stored for this day
            // or if a header has already been sent today.
            if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat)=>singleDateHeartbeat.date === date)) return;
            else {
                // There is no entry for this date. Create one.
                this._heartbeatsCache.heartbeats.push({
                    date,
                    agent
                });
                // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.
                // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.
                if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {
                    const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
                    this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
                }
            }
            return this._storage.overwrite(this._heartbeatsCache);
        } catch (e) {
            logger.warn(e);
        }
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */ async getHeartbeatsHeader() {
        try {
            if (this._heartbeatsCache === null) await this._heartbeatsCachePromise;
            // If it's still null or the array is empty, there is no data to send.
            if (this._heartbeatsCache?.heartbeats == null || this._heartbeatsCache.heartbeats.length === 0) return '';
            const date = getUTCDateString();
            // Extract as many heartbeats from the cache as will fit under the size limit.
            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
            const headerString = (0, _util.base64urlEncodeWithoutPadding)(JSON.stringify({
                version: 2,
                heartbeats: heartbeatsToSend
            }));
            // Store last sent date to prevent another being logged/sent for the same day.
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (unsentEntries.length > 0) {
                // Store any unsent entries if they exist.
                this._heartbeatsCache.heartbeats = unsentEntries;
                // This seems more likely than emptying the array (below) to lead to some odd state
                // since the cache isn't empty and this will be called again on the next request,
                // and is probably safest if we await it.
                await this._storage.overwrite(this._heartbeatsCache);
            } else {
                this._heartbeatsCache.heartbeats = [];
                // Do not wait for this, to reduce latency.
                this._storage.overwrite(this._heartbeatsCache);
            }
            return headerString;
        } catch (e) {
            logger.warn(e);
            return '';
        }
    }
}
function getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache){
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find((hb)=>hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [
                    singleDateHeartbeat.date
                ]
            });
            if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        } else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend,
        unsentEntries
    };
}
class HeartbeatStorageImpl {
    constructor(app){
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!(0, _util.isIndexedDBAvailable)()) return false;
        else return (0, _util.validateIndexedDBOpenable)().then(()=>true).catch(()=>false);
    }
    /**
     * Read all heartbeats.
     */ async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return {
            heartbeats: []
        };
        else {
            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
            if (idbHeartbeatObject?.heartbeats) return idbHeartbeatObject;
            else return {
                heartbeats: []
            };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: heartbeatsObject.lastSentHeartbeatDate ?? existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: heartbeatsObject.lastSentHeartbeatDate ?? existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */ function countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return (0, _util.base64urlEncodeWithoutPadding)(// heartbeatsCache wrapper properties
    JSON.stringify({
        version: 2,
        heartbeats: heartbeatsCache
    })).length;
}
/**
 * Returns the index of the heartbeat with the earliest date.
 * If the heartbeats array is empty, -1 is returned.
 */ function getEarliestHeartbeatIdx(heartbeats) {
    if (heartbeats.length === 0) return -1;
    let earliestHeartbeatIdx = 0;
    let earliestHeartbeatDate = heartbeats[0].date;
    for(let i = 1; i < heartbeats.length; i++)if (heartbeats[i].date < earliestHeartbeatDate) {
        earliestHeartbeatDate = heartbeats[i].date;
        earliestHeartbeatIdx = i;
    }
    return earliestHeartbeatIdx;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(variant) {
    _registerComponent(new (0, _component.Component)('platform-logger', (container)=>new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */ ));
    _registerComponent(new (0, _component.Component)('heartbeat', (container)=>new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */ ));
    // Register `app` package.
    registerVersion(name$q, version$1, variant);
    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation
    registerVersion(name$q, version$1, 'esm2020');
    // Register platform SDK identifier (no version).
    registerVersion('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */ registerCoreComponents('');

},{"@firebase/component":"d6O5O","@firebase/logger":"9cikG","@firebase/util":"jy04l","idb":"258QC","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"d6O5O":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>Component);
parcelHelpers.export(exports, "ComponentContainer", ()=>ComponentContainer);
parcelHelpers.export(exports, "Provider", ()=>Provider);
var _util = require("@firebase/util");
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ class Component {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ constructor(name, instanceFactory, type){
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {};
        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */ ;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ class Provider {
    constructor(name, container){
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide multiple instances of a service
     * if this.component.multipleInstances is true.
     */ get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new (0, _util.Deferred)();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options?.identifier);
        const optional = options?.optional ?? false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error(`Service ${this.name} is not available`);
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        if (this.component) throw Error(`Component for ${this.name} has already been provided`);
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception, it should not cause
            // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services.filter((service)=>'INTERNAL' in service) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service.INTERNAL.delete()),
            ...services.filter((service)=>'_delete' in service) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service._delete())
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ onInit(callback, identifier) {
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = this.onInitCallbacks.get(normalizedIdentifier) ?? new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return ()=>{
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        for (const callback of callbacks)try {
            callback(instance, identifier);
        } catch  {
        // ignore errors in the onInit callback
        }
    }
    getOrInitializeService({ instanceIdentifier, options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch  {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    }
    shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */ ;
    }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ class ComponentContainer {
    constructor(name){
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ getProvider(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}

},{"@firebase/util":"jy04l","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jy04l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONSTANTS", ()=>CONSTANTS);
parcelHelpers.export(exports, "DecodeBase64StringError", ()=>DecodeBase64StringError);
parcelHelpers.export(exports, "Deferred", ()=>Deferred);
parcelHelpers.export(exports, "ErrorFactory", ()=>ErrorFactory);
parcelHelpers.export(exports, "FirebaseError", ()=>FirebaseError);
parcelHelpers.export(exports, "MAX_VALUE_MILLIS", ()=>MAX_VALUE_MILLIS);
parcelHelpers.export(exports, "RANDOM_FACTOR", ()=>RANDOM_FACTOR);
parcelHelpers.export(exports, "Sha1", ()=>Sha1);
parcelHelpers.export(exports, "areCookiesEnabled", ()=>areCookiesEnabled);
parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "assertionError", ()=>assertionError);
parcelHelpers.export(exports, "async", ()=>async);
parcelHelpers.export(exports, "base64", ()=>base64);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode);
parcelHelpers.export(exports, "base64urlEncodeWithoutPadding", ()=>base64urlEncodeWithoutPadding);
parcelHelpers.export(exports, "calculateBackoffMillis", ()=>calculateBackoffMillis);
parcelHelpers.export(exports, "contains", ()=>contains);
parcelHelpers.export(exports, "createMockUserToken", ()=>createMockUserToken);
parcelHelpers.export(exports, "createSubscribe", ()=>createSubscribe);
parcelHelpers.export(exports, "decode", ()=>decode);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual);
parcelHelpers.export(exports, "deepExtend", ()=>deepExtend);
parcelHelpers.export(exports, "errorPrefix", ()=>errorPrefix);
parcelHelpers.export(exports, "extractQuerystring", ()=>extractQuerystring);
parcelHelpers.export(exports, "getDefaultAppConfig", ()=>getDefaultAppConfig);
parcelHelpers.export(exports, "getDefaultEmulatorHost", ()=>getDefaultEmulatorHost);
parcelHelpers.export(exports, "getDefaultEmulatorHostnameAndPort", ()=>getDefaultEmulatorHostnameAndPort);
parcelHelpers.export(exports, "getDefaults", ()=>getDefaults);
parcelHelpers.export(exports, "getExperimentalSetting", ()=>getExperimentalSetting);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal);
parcelHelpers.export(exports, "getModularInstance", ()=>getModularInstance);
parcelHelpers.export(exports, "getUA", ()=>getUA);
parcelHelpers.export(exports, "isAdmin", ()=>isAdmin);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "isBrowserExtension", ()=>isBrowserExtension);
parcelHelpers.export(exports, "isCloudWorkstation", ()=>isCloudWorkstation);
parcelHelpers.export(exports, "isCloudflareWorker", ()=>isCloudflareWorker);
parcelHelpers.export(exports, "isElectron", ()=>isElectron);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
parcelHelpers.export(exports, "isIE", ()=>isIE);
parcelHelpers.export(exports, "isIndexedDBAvailable", ()=>isIndexedDBAvailable);
parcelHelpers.export(exports, "isMobileCordova", ()=>isMobileCordova);
parcelHelpers.export(exports, "isNode", ()=>isNode);
parcelHelpers.export(exports, "isNodeSdk", ()=>isNodeSdk);
parcelHelpers.export(exports, "isReactNative", ()=>isReactNative);
parcelHelpers.export(exports, "isSafari", ()=>isSafari);
parcelHelpers.export(exports, "isSafariOrWebkit", ()=>isSafariOrWebkit);
parcelHelpers.export(exports, "isUWP", ()=>isUWP);
parcelHelpers.export(exports, "isValidFormat", ()=>isValidFormat);
parcelHelpers.export(exports, "isValidTimestamp", ()=>isValidTimestamp);
parcelHelpers.export(exports, "isWebWorker", ()=>isWebWorker);
parcelHelpers.export(exports, "issuedAtTime", ()=>issuedAtTime);
parcelHelpers.export(exports, "jsonEval", ()=>jsonEval);
parcelHelpers.export(exports, "map", ()=>map);
parcelHelpers.export(exports, "ordinal", ()=>ordinal);
parcelHelpers.export(exports, "pingServer", ()=>pingServer);
parcelHelpers.export(exports, "promiseWithTimeout", ()=>promiseWithTimeout);
parcelHelpers.export(exports, "querystring", ()=>querystring);
parcelHelpers.export(exports, "querystringDecode", ()=>querystringDecode);
parcelHelpers.export(exports, "safeGet", ()=>safeGet);
parcelHelpers.export(exports, "stringLength", ()=>stringLength);
parcelHelpers.export(exports, "stringToByteArray", ()=>stringToByteArray);
parcelHelpers.export(exports, "stringify", ()=>stringify);
parcelHelpers.export(exports, "updateEmulatorBanner", ()=>updateEmulatorBanner);
parcelHelpers.export(exports, "validateArgCount", ()=>validateArgCount);
parcelHelpers.export(exports, "validateCallback", ()=>validateCallback);
parcelHelpers.export(exports, "validateContextObject", ()=>validateContextObject);
parcelHelpers.export(exports, "validateIndexedDBOpenable", ()=>validateIndexedDBOpenable);
parcelHelpers.export(exports, "validateNamespace", ()=>validateNamespace);
var _postinstallMjs = require("./postinstall.mjs");
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ const CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ const assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ const assertionError = function(message) {
    return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ const byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while(pos < bytes.length){
        const c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        } else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
// TODO(dlarocque): Define this as a class, since we no longer target ES5.
const base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray (input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for(let i = 0; i < input.length; i += 3){
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
            let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray (input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for(let i = 0; i < input.length;){
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw new DecodeBase64StringError();
            const outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = byte3 << 6 & 0xc0 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_ () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for(let i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * An error encountered while decoding base64 string.
 */ class DecodeBase64StringError extends Error {
    constructor(){
        super(...arguments);
        this.name = 'DecodeBase64StringError';
    }
}
/**
 * URL-safe base64 encoding
 */ const base64Encode = function(str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ const base64urlEncodeWithoutPadding = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ const base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {};
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(const prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 * @public
 */ function getGlobal() {
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof global !== 'undefined') return global;
    throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const getDefaultsFromGlobal = ()=>getGlobal().__FIREBASE_DEFAULTS__;
/**
 * Attempt to read defaults from a JSON string provided to
 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
 * The dots are in parens because certain compilers (Vite?) cannot
 * handle seeing that variable in comments.
 * See https://github.com/firebase/firebase-js-sdk/issues/6838
 */ const getDefaultsFromEnvVariable = ()=>{
    return;
};
const getDefaultsFromCookie = ()=>{
    if (typeof document === 'undefined') return;
    let match;
    try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
    } catch (e) {
        // Some environments such as Angular Universal SSR have a
        // `document` object but error on accessing `document.cookie`.
        return;
    }
    const decoded = match && base64Decode(match[1]);
    return decoded && JSON.parse(decoded);
};
/**
 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
 * (1) if such an object exists as a property of `globalThis`
 * (2) if such an object was provided on a shell environment variable
 * (3) if such an object exists in a cookie
 * @public
 */ const getDefaults = ()=>{
    try {
        return (0, _postinstallMjs.getDefaultsFromPostinstall)() || getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();
    } catch (e) {
        /**
         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
         * to any environment case we have not accounted for. Log to
         * info instead of swallowing so we can find these unknown cases
         * and add paths for them if needed.
         */ console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
    }
};
/**
 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
 * @public
 */ const getDefaultEmulatorHost = (productName)=>getDefaults()?.emulatorHosts?.[productName];
/**
 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a pair of hostname and port like `["::1", 4000]` if available
 * @public
 */ const getDefaultEmulatorHostnameAndPort = (productName)=>{
    const host = getDefaultEmulatorHost(productName);
    if (!host) return undefined;
    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) throw new Error(`Invalid host ${host} with no separate hostname and port!`);
    // eslint-disable-next-line no-restricted-globals
    const port = parseInt(host.substring(separatorIndex + 1), 10);
    if (host[0] === '[') // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
    return [
        host.substring(1, separatorIndex - 1),
        port
    ];
    else return [
        host.substring(0, separatorIndex),
        port
    ];
};
/**
 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
 * @public
 */ const getDefaultAppConfig = ()=>getDefaults()?.config;
/**
 * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
 * prefixed by "_")
 * @public
 */ const getExperimentalSetting = (name)=>getDefaults()?.[`_${name}`];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Deferred {
    constructor(){
        this.reject = ()=>{};
        this.resolve = ()=>{};
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ wrapCallback(callback) {
        return (error, value)=>{
            if (error) this.reject(error);
            else this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(()=>{});
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    }
}
/**
 * @license
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Checks whether host is a cloud workstation or not.
 * @public
 */ function isCloudWorkstation(url) {
    // `isCloudWorkstation` is called without protocol in certain connect*Emulator functions
    // In HTTP request builders, it's called with the protocol.
    // If called with protocol prefix, it's a valid URL, so we extract the hostname
    // If called without, we assume the string is the hostname.
    try {
        const host = url.startsWith('http://') || url.startsWith('https://') ? new URL(url).hostname : url;
        return host.endsWith('.cloudworkstations.dev');
    } catch  {
        return false;
    }
}
/**
 * Makes a fetch request to the given server.
 * Mostly used for forwarding cookies in Firebase Studio.
 * @public
 */ async function pingServer(endpoint) {
    const result = await fetch(endpoint, {
        credentials: 'include'
    });
    return result.ok;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createMockUserToken(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: 'none',
        type: 'JWT'
    };
    const project = projectId || 'demo-project';
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    const payload = {
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
            sign_in_provider: 'custom',
            identities: {}
        },
        // Override with user options
        ...token
    };
    // Unsecured JWTs use the empty string as a signature.
    const signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}
const emulatorStatus = {};
// Checks whether any products are running on an emulator
function getEmulatorSummary() {
    const summary = {
        prod: [],
        emulator: []
    };
    for (const key of Object.keys(emulatorStatus))if (emulatorStatus[key]) summary.emulator.push(key);
    else summary.prod.push(key);
    return summary;
}
function getOrCreateEl(id) {
    let parentDiv = document.getElementById(id);
    let created = false;
    if (!parentDiv) {
        parentDiv = document.createElement('div');
        parentDiv.setAttribute('id', id);
        created = true;
    }
    return {
        created,
        element: parentDiv
    };
}
let previouslyDismissed = false;
/**
 * Updates Emulator Banner. Primarily used for Firebase Studio
 * @param name
 * @param isRunningEmulator
 * @public
 */ function updateEmulatorBanner(name, isRunningEmulator) {
    if (typeof window === 'undefined' || typeof document === 'undefined' || !isCloudWorkstation(window.location.host) || emulatorStatus[name] === isRunningEmulator || emulatorStatus[name] || // If already set to use emulator, can't go back to prod.
    previouslyDismissed) return;
    emulatorStatus[name] = isRunningEmulator;
    function prefixedId(id) {
        return `__firebase__banner__${id}`;
    }
    const bannerId = '__firebase__banner';
    const summary = getEmulatorSummary();
    const showError = summary.prod.length > 0;
    function tearDown() {
        const element = document.getElementById(bannerId);
        if (element) element.remove();
    }
    function setupBannerStyles(bannerEl) {
        bannerEl.style.display = 'flex';
        bannerEl.style.background = '#7faaf0';
        bannerEl.style.position = 'fixed';
        bannerEl.style.bottom = '5px';
        bannerEl.style.left = '5px';
        bannerEl.style.padding = '.5em';
        bannerEl.style.borderRadius = '5px';
        bannerEl.style.alignItems = 'center';
    }
    function setupIconStyles(prependIcon, iconId) {
        prependIcon.setAttribute('width', '24');
        prependIcon.setAttribute('id', iconId);
        prependIcon.setAttribute('height', '24');
        prependIcon.setAttribute('viewBox', '0 0 24 24');
        prependIcon.setAttribute('fill', 'none');
        prependIcon.style.marginLeft = '-6px';
    }
    function setupCloseBtn() {
        const closeBtn = document.createElement('span');
        closeBtn.style.cursor = 'pointer';
        closeBtn.style.marginLeft = '16px';
        closeBtn.style.fontSize = '24px';
        closeBtn.innerHTML = ' &times;';
        closeBtn.onclick = ()=>{
            previouslyDismissed = true;
            tearDown();
        };
        return closeBtn;
    }
    function setupLinkStyles(learnMoreLink, learnMoreId) {
        learnMoreLink.setAttribute('id', learnMoreId);
        learnMoreLink.innerText = 'Learn more';
        learnMoreLink.href = 'https://firebase.google.com/docs/studio/preview-apps#preview-backend';
        learnMoreLink.setAttribute('target', '__blank');
        learnMoreLink.style.paddingLeft = '5px';
        learnMoreLink.style.textDecoration = 'underline';
    }
    function setupDom() {
        const banner = getOrCreateEl(bannerId);
        const firebaseTextId = prefixedId('text');
        const firebaseText = document.getElementById(firebaseTextId) || document.createElement('span');
        const learnMoreId = prefixedId('learnmore');
        const learnMoreLink = document.getElementById(learnMoreId) || document.createElement('a');
        const prependIconId = prefixedId('preprendIcon');
        const prependIcon = document.getElementById(prependIconId) || document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        if (banner.created) {
            // update styles
            const bannerEl = banner.element;
            setupBannerStyles(bannerEl);
            setupLinkStyles(learnMoreLink, learnMoreId);
            const closeBtn = setupCloseBtn();
            setupIconStyles(prependIcon, prependIconId);
            bannerEl.append(prependIcon, firebaseText, learnMoreLink, closeBtn);
            document.body.appendChild(bannerEl);
        }
        if (showError) {
            firebaseText.innerText = `Preview backend disconnected.`;
            prependIcon.innerHTML = `<g clip-path="url(#clip0_6013_33858)">
<path d="M4.8 17.6L12 5.6L19.2 17.6H4.8ZM6.91667 16.4H17.0833L12 7.93333L6.91667 16.4ZM12 15.6C12.1667 15.6 12.3056 15.5444 12.4167 15.4333C12.5389 15.3111 12.6 15.1667 12.6 15C12.6 14.8333 12.5389 14.6944 12.4167 14.5833C12.3056 14.4611 12.1667 14.4 12 14.4C11.8333 14.4 11.6889 14.4611 11.5667 14.5833C11.4556 14.6944 11.4 14.8333 11.4 15C11.4 15.1667 11.4556 15.3111 11.5667 15.4333C11.6889 15.5444 11.8333 15.6 12 15.6ZM11.4 13.6H12.6V10.4H11.4V13.6Z" fill="#212121"/>
</g>
<defs>
<clipPath id="clip0_6013_33858">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>`;
        } else {
            prependIcon.innerHTML = `<g clip-path="url(#clip0_6083_34804)">
<path d="M11.4 15.2H12.6V11.2H11.4V15.2ZM12 10C12.1667 10 12.3056 9.94444 12.4167 9.83333C12.5389 9.71111 12.6 9.56667 12.6 9.4C12.6 9.23333 12.5389 9.09444 12.4167 8.98333C12.3056 8.86111 12.1667 8.8 12 8.8C11.8333 8.8 11.6889 8.86111 11.5667 8.98333C11.4556 9.09444 11.4 9.23333 11.4 9.4C11.4 9.56667 11.4556 9.71111 11.5667 9.83333C11.6889 9.94444 11.8333 10 12 10ZM12 18.4C11.1222 18.4 10.2944 18.2333 9.51667 17.9C8.73889 17.5667 8.05556 17.1111 7.46667 16.5333C6.88889 15.9444 6.43333 15.2611 6.1 14.4833C5.76667 13.7056 5.6 12.8778 5.6 12C5.6 11.1111 5.76667 10.2833 6.1 9.51667C6.43333 8.73889 6.88889 8.06111 7.46667 7.48333C8.05556 6.89444 8.73889 6.43333 9.51667 6.1C10.2944 5.76667 11.1222 5.6 12 5.6C12.8889 5.6 13.7167 5.76667 14.4833 6.1C15.2611 6.43333 15.9389 6.89444 16.5167 7.48333C17.1056 8.06111 17.5667 8.73889 17.9 9.51667C18.2333 10.2833 18.4 11.1111 18.4 12C18.4 12.8778 18.2333 13.7056 17.9 14.4833C17.5667 15.2611 17.1056 15.9444 16.5167 16.5333C15.9389 17.1111 15.2611 17.5667 14.4833 17.9C13.7167 18.2333 12.8889 18.4 12 18.4ZM12 17.2C13.4444 17.2 14.6722 16.6944 15.6833 15.6833C16.6944 14.6722 17.2 13.4444 17.2 12C17.2 10.5556 16.6944 9.32778 15.6833 8.31667C14.6722 7.30555 13.4444 6.8 12 6.8C10.5556 6.8 9.32778 7.30555 8.31667 8.31667C7.30556 9.32778 6.8 10.5556 6.8 12C6.8 13.4444 7.30556 14.6722 8.31667 15.6833C9.32778 16.6944 10.5556 17.2 12 17.2Z" fill="#212121"/>
</g>
<defs>
<clipPath id="clip0_6083_34804">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>`;
            firebaseText.innerText = 'Preview backend running in this workspace.';
        }
        firebaseText.setAttribute('id', firebaseTextId);
    }
    if (document.readyState === 'loading') window.addEventListener('DOMContentLoaded', setupDom);
    else setupDom();
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected or specified.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    const forceEnvironment = getDefaults()?.forceEnvironment;
    if (forceEnvironment === 'node') return true;
    else if (forceEnvironment === 'browser') return false;
    try {
        return Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment.
 * Note: This will return true for certain test frameworks that are incompletely
 * mimicking a browser, and should not lead to assuming all browser APIs are
 * available.
 */ function isBrowser() {
    return typeof window !== 'undefined' || isWebWorker();
}
/**
 * Detect Web Worker context.
 */ function isWebWorker() {
    return typeof WorkerGlobalScope !== 'undefined' && typeof self !== 'undefined' && self instanceof WorkerGlobalScope;
}
/**
 * Detect Cloudflare Worker context.
 */ function isCloudflareWorker() {
    return typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers';
}
function isBrowserExtension() {
    const runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    const ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function isSafari() {
    return !isNode() && !!navigator.userAgent && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/** Returns true if we are running in Safari or WebKit */ function isSafariOrWebkit() {
    return !isNode() && !!navigator.userAgent && (navigator.userAgent.includes('Safari') || navigator.userAgent.includes('WebKit')) && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function isIndexedDBAvailable() {
    try {
        return typeof indexedDB === 'object';
    } catch (e) {
        return false;
    }
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function validateIndexedDBOpenable() {
    return new Promise((resolve, reject)=>{
        try {
            let preExist = true;
            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = ()=>{
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                resolve(true);
            };
            request.onupgradeneeded = ()=>{
                preExist = false;
            };
            request.onerror = ()=>{
                reject(request.error?.message || '');
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function areCookiesEnabled() {
    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // TypeScript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */ const ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
    constructor(/** The error code for this error. */ code, message, /** Custom data for this error. */ customData){
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */ this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
        //                   which we can now use since we no longer target ES5.
        Object.setPrototypeOf(this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(this, ErrorFactory.prototype.create);
    }
}
class ErrorFactory {
    constructor(service, serviceName, errors){
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    }
}
function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key)=>{
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data JavaScript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const decode = function(token) {
    let header = {}, claims = {}, data = {}, signature = '';
    try {
        const parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    } catch (e) {}
    return {
        header,
        claims,
        data,
        signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidTimestamp = function(token) {
    const claims = decode(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const issuedAtTime = function(token) {
    const claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidFormat = function(token) {
    const decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isAdmin = function(token) {
    const claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(const key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    const res = {};
    for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function deepEqual(a, b) {
    if (a === b) return true;
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys){
        if (!bKeys.includes(k)) return false;
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for (const k of bKeys){
        if (!aKeys.includes(k)) return false;
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Rejects if the given promise doesn't resolve in timeInMS milliseconds.
 * @internal
 */ function promiseWithTimeout(promise, timeInMS = 2000) {
    const deferredPromise = new Deferred();
    setTimeout(()=>deferredPromise.reject('timeout!'), timeInMS);
    promise.then(deferredPromise.resolve, deferredPromise.reject);
    return deferredPromise.promise;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams))if (Array.isArray(value)) value.forEach((arrayVal)=>{
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
    });
    else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring) {
    const obj = {};
    const tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach((token)=>{
        if (token) {
            const [key, value] = token.split('=');
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function extractQuerystring(url) {
    const queryStart = url.indexOf('?');
    if (!queryStart) return '';
    const fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ class Sha1 {
    constructor(){
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(let i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ compress_(buf, offset) {
        if (!offset) offset = 0;
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(let i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(let i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(let i = 16; i < 80; i++){
            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(let i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 0x5a827999;
                } else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 0x8f1bbcdc;
            } else {
                f = b ^ c ^ d;
                k = 0xca62c1d6;
            }
            const t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 0xffffffff;
        this.chain_[1] = this.chain_[1] + b & 0xffffffff;
        this.chain_[2] = this.chain_[2] + c & 0xffffffff;
        this.chain_[3] = this.chain_[3] + d & 0xffffffff;
        this.chain_[4] = this.chain_[4] + e & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */ digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(let i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for(let i = 0; i < 5; i++)for(let j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    }
}
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ class ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ constructor(executor, onNoObservers){
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(()=>{
            executor(this);
        }).catch((e)=>{
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer)=>{
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer)=>{
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer)=>{
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber synchronously to their
     *   call to subscribe().
     */ subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error,
            complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            try {
                if (this.finalError) observer.error(this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    }
    forEachObserver(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(let i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            if (this.observers !== undefined && this.observers[i] !== undefined) try {
                fn(this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    }
    close(err) {
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return (...args)=>{
        Promise.resolve(true).then(()=>{
            fn(...args);
        }).catch((error)=>{
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for (const method of methods){
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ const validateArgCount = function(fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        const error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
}
function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ const stringToByteArray = function(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ const stringLength = function(str) {
    let p = 0;
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ const MAX_VALUE_MILLIS = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR * currBaseValue * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
    // if we add or subtract.
    (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function ordinal(i) {
    if (!Number.isFinite(i)) return `${i}`;
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) return 'th';
    const dec = i % 10;
    if (dec === 1) return 'st';
    if (dec === 2) return 'nd';
    if (dec === 3) return 'rd';
    return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getModularInstance(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}

},{"./postinstall.mjs":"2zIBV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2zIBV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultsFromPostinstall", ()=>getDefaultsFromPostinstall);
const getDefaultsFromPostinstall = ()=>undefined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9cikG":[function(require,module,exports,__globalThis) {
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "Logger", ()=>Logger);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel);
parcelHelpers.export(exports, "setUserLogHandler", ()=>setUserLogHandler);
const instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */ const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ const ConsoleMethod = {
    [LogLevel.DEBUG]: 'log',
    [LogLevel.VERBOSE]: 'log',
    [LogLevel.INFO]: 'info',
    [LogLevel.WARN]: 'warn',
    [LogLevel.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ const defaultLogHandler = (instance, logType, ...args)=>{
    if (logType < instance.logLevel) return;
    const now = new Date().toISOString();
    const method = ConsoleMethod[logType];
    if (method) console[method](`[${now}]  ${instance.name}:`, ...args);
    else throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
};
class Logger {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ constructor(name){
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in LogLevel)) throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */ debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
    }
}
function setLogLevel(level) {
    instances.forEach((inst)=>{
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    for (const instance of instances){
        let customLogLevel = null;
        if (options && options.level) customLogLevel = levelStringToEnum[options.level];
        if (logCallback === null) instance.userLogHandler = null;
        else instance.userLogHandler = (instance, level, ...args)=>{
            const message = args.map((arg)=>{
                if (arg == null) return null;
                else if (typeof arg === 'string') return arg;
                else if (typeof arg === 'number' || typeof arg === 'boolean') return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter((arg)=>arg).join(' ');
            if (level >= (customLogLevel ?? instance.logLevel)) logCallback({
                level: LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance.name
            });
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"258QC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unwrap", ()=>(0, _wrapIdbValueJs.u));
parcelHelpers.export(exports, "wrap", ()=>(0, _wrapIdbValueJs.w));
parcelHelpers.export(exports, "deleteDB", ()=>deleteDB);
parcelHelpers.export(exports, "openDB", ()=>openDB);
var _wrapIdbValueJs = require("./wrap-idb-value.js");
/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */ function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0, _wrapIdbValueJs.w)(request);
    if (upgrade) request.addEventListener('upgradeneeded', (event)=>{
        upgrade((0, _wrapIdbValueJs.w)(request.result), event.oldVersion, event.newVersion, (0, _wrapIdbValueJs.w)(request.transaction), event);
    });
    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event.newVersion, event));
    openPromise.then((db)=>{
        if (terminated) db.addEventListener('close', ()=>terminated());
        if (blocking) db.addEventListener('versionchange', (event)=>blocking(event.oldVersion, event.newVersion, event));
    }).catch(()=>{});
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */ function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event));
    return (0, _wrapIdbValueJs.w)(request).then(()=>undefined);
}
const readMethods = [
    'get',
    'getKey',
    'getAll',
    'getAllKeys',
    'count'
];
const writeMethods = [
    'put',
    'add',
    'delete',
    'clear'
];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) return;
    if (cachedMethods.get(prop)) return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) return;
    const method = async function(storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex) target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
(0, _wrapIdbValueJs.r)((oldTraps)=>({
        ...oldTraps,
        get: (target, prop, receiver)=>getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop)=>!!getMethod(target, prop) || oldTraps.has(target, prop)
    }));

},{"./wrap-idb-value.js":"98T2L","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"98T2L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "a", ()=>reverseTransformCache);
parcelHelpers.export(exports, "i", ()=>instanceOfAny);
parcelHelpers.export(exports, "r", ()=>replaceTraps);
parcelHelpers.export(exports, "u", ()=>unwrap);
parcelHelpers.export(exports, "w", ()=>wrap);
const instanceOfAny = (object, constructors)=>constructors.some((c)=>object instanceof c);
let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction
    ]);
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey
    ]);
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = ()=>{
            resolve(wrap(request.result));
            unlisten();
        };
        const error = ()=>{
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise.then((value)=>{
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) cursorRequestMap.set(value, request);
    // Catching to avoid "Uncaught Promise exceptions"
    }).catch(()=>{});
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx)) return;
    const done = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = ()=>{
            resolve();
            unlisten();
        };
        const error = ()=>{
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get (target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done') return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') return target.objectStoreNames || transactionStoreNamesMap.get(target);
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set (target, prop, value) {
        target[prop] = value;
        return true;
    },
    has (target, prop) {
        if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) return true;
        return prop in target;
    }
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) return function(storeNames, ...args) {
        const tx = func.call(unwrap(this), storeNames, ...args);
        transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [
            storeNames
        ]);
        return wrap(tx);
    };
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        func.apply(unwrap(this), args);
        return wrap(cursorRequestMap.get(this));
    };
    return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function') return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest) return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value)) return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value)=>reverseTransformCache.get(value);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4ZBbi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _auth = require("@firebase/auth");
parcelHelpers.exportAll(_auth, exports);

},{"@firebase/auth":"enoN1","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"enoN1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ActionCodeOperation", ()=>(0, _index9Ccb475DJs.A));
parcelHelpers.export(exports, "ActionCodeURL", ()=>(0, _index9Ccb475DJs.aj));
parcelHelpers.export(exports, "AuthCredential", ()=>(0, _index9Ccb475DJs.M));
parcelHelpers.export(exports, "AuthErrorCodes", ()=>(0, _index9Ccb475DJs.J));
parcelHelpers.export(exports, "EmailAuthCredential", ()=>(0, _index9Ccb475DJs.N));
parcelHelpers.export(exports, "EmailAuthProvider", ()=>(0, _index9Ccb475DJs.W));
parcelHelpers.export(exports, "FacebookAuthProvider", ()=>(0, _index9Ccb475DJs.X));
parcelHelpers.export(exports, "FactorId", ()=>(0, _index9Ccb475DJs.F));
parcelHelpers.export(exports, "GithubAuthProvider", ()=>(0, _index9Ccb475DJs.Z));
parcelHelpers.export(exports, "GoogleAuthProvider", ()=>(0, _index9Ccb475DJs.Y));
parcelHelpers.export(exports, "OAuthCredential", ()=>(0, _index9Ccb475DJs.Q));
parcelHelpers.export(exports, "OAuthProvider", ()=>(0, _index9Ccb475DJs._));
parcelHelpers.export(exports, "OperationType", ()=>(0, _index9Ccb475DJs.O));
parcelHelpers.export(exports, "PhoneAuthCredential", ()=>(0, _index9Ccb475DJs.U));
parcelHelpers.export(exports, "PhoneAuthProvider", ()=>(0, _index9Ccb475DJs.P));
parcelHelpers.export(exports, "PhoneMultiFactorGenerator", ()=>(0, _index9Ccb475DJs.n));
parcelHelpers.export(exports, "ProviderId", ()=>(0, _index9Ccb475DJs.q));
parcelHelpers.export(exports, "RecaptchaVerifier", ()=>(0, _index9Ccb475DJs.R));
parcelHelpers.export(exports, "SAMLAuthProvider", ()=>(0, _index9Ccb475DJs.$));
parcelHelpers.export(exports, "SignInMethod", ()=>(0, _index9Ccb475DJs.S));
parcelHelpers.export(exports, "TotpMultiFactorGenerator", ()=>(0, _index9Ccb475DJs.T));
parcelHelpers.export(exports, "TotpSecret", ()=>(0, _index9Ccb475DJs.o));
parcelHelpers.export(exports, "TwitterAuthProvider", ()=>(0, _index9Ccb475DJs.a0));
parcelHelpers.export(exports, "applyActionCode", ()=>(0, _index9Ccb475DJs.a8));
parcelHelpers.export(exports, "beforeAuthStateChanged", ()=>(0, _index9Ccb475DJs.y));
parcelHelpers.export(exports, "browserCookiePersistence", ()=>(0, _index9Ccb475DJs.a));
parcelHelpers.export(exports, "browserLocalPersistence", ()=>(0, _index9Ccb475DJs.b));
parcelHelpers.export(exports, "browserPopupRedirectResolver", ()=>(0, _index9Ccb475DJs.m));
parcelHelpers.export(exports, "browserSessionPersistence", ()=>(0, _index9Ccb475DJs.c));
parcelHelpers.export(exports, "checkActionCode", ()=>(0, _index9Ccb475DJs.a9));
parcelHelpers.export(exports, "confirmPasswordReset", ()=>(0, _index9Ccb475DJs.a7));
parcelHelpers.export(exports, "connectAuthEmulator", ()=>(0, _index9Ccb475DJs.L));
parcelHelpers.export(exports, "createUserWithEmailAndPassword", ()=>(0, _index9Ccb475DJs.ab));
parcelHelpers.export(exports, "debugErrorMap", ()=>(0, _index9Ccb475DJs.H));
parcelHelpers.export(exports, "deleteUser", ()=>(0, _index9Ccb475DJs.G));
parcelHelpers.export(exports, "fetchSignInMethodsForEmail", ()=>(0, _index9Ccb475DJs.ag));
parcelHelpers.export(exports, "getAdditionalUserInfo", ()=>(0, _index9Ccb475DJs.ar));
parcelHelpers.export(exports, "getAuth", ()=>(0, _index9Ccb475DJs.p));
parcelHelpers.export(exports, "getIdToken", ()=>(0, _index9Ccb475DJs.ao));
parcelHelpers.export(exports, "getIdTokenResult", ()=>(0, _index9Ccb475DJs.ap));
parcelHelpers.export(exports, "getMultiFactorResolver", ()=>(0, _index9Ccb475DJs.at));
parcelHelpers.export(exports, "getRedirectResult", ()=>(0, _index9Ccb475DJs.k));
parcelHelpers.export(exports, "inMemoryPersistence", ()=>(0, _index9Ccb475DJs.V));
parcelHelpers.export(exports, "indexedDBLocalPersistence", ()=>(0, _index9Ccb475DJs.i));
parcelHelpers.export(exports, "initializeAuth", ()=>(0, _index9Ccb475DJs.K));
parcelHelpers.export(exports, "initializeRecaptchaConfig", ()=>(0, _index9Ccb475DJs.v));
parcelHelpers.export(exports, "isSignInWithEmailLink", ()=>(0, _index9Ccb475DJs.ae));
parcelHelpers.export(exports, "linkWithCredential", ()=>(0, _index9Ccb475DJs.a3));
parcelHelpers.export(exports, "linkWithPhoneNumber", ()=>(0, _index9Ccb475DJs.l));
parcelHelpers.export(exports, "linkWithPopup", ()=>(0, _index9Ccb475DJs.e));
parcelHelpers.export(exports, "linkWithRedirect", ()=>(0, _index9Ccb475DJs.h));
parcelHelpers.export(exports, "multiFactor", ()=>(0, _index9Ccb475DJs.au));
parcelHelpers.export(exports, "onAuthStateChanged", ()=>(0, _index9Ccb475DJs.z));
parcelHelpers.export(exports, "onIdTokenChanged", ()=>(0, _index9Ccb475DJs.x));
parcelHelpers.export(exports, "parseActionCodeURL", ()=>(0, _index9Ccb475DJs.ak));
parcelHelpers.export(exports, "prodErrorMap", ()=>(0, _index9Ccb475DJs.I));
parcelHelpers.export(exports, "reauthenticateWithCredential", ()=>(0, _index9Ccb475DJs.a4));
parcelHelpers.export(exports, "reauthenticateWithPhoneNumber", ()=>(0, _index9Ccb475DJs.r));
parcelHelpers.export(exports, "reauthenticateWithPopup", ()=>(0, _index9Ccb475DJs.f));
parcelHelpers.export(exports, "reauthenticateWithRedirect", ()=>(0, _index9Ccb475DJs.j));
parcelHelpers.export(exports, "reload", ()=>(0, _index9Ccb475DJs.as));
parcelHelpers.export(exports, "revokeAccessToken", ()=>(0, _index9Ccb475DJs.E));
parcelHelpers.export(exports, "sendEmailVerification", ()=>(0, _index9Ccb475DJs.ah));
parcelHelpers.export(exports, "sendPasswordResetEmail", ()=>(0, _index9Ccb475DJs.a6));
parcelHelpers.export(exports, "sendSignInLinkToEmail", ()=>(0, _index9Ccb475DJs.ad));
parcelHelpers.export(exports, "setPersistence", ()=>(0, _index9Ccb475DJs.t));
parcelHelpers.export(exports, "signInAnonymously", ()=>(0, _index9Ccb475DJs.a1));
parcelHelpers.export(exports, "signInWithCredential", ()=>(0, _index9Ccb475DJs.a2));
parcelHelpers.export(exports, "signInWithCustomToken", ()=>(0, _index9Ccb475DJs.a5));
parcelHelpers.export(exports, "signInWithEmailAndPassword", ()=>(0, _index9Ccb475DJs.ac));
parcelHelpers.export(exports, "signInWithEmailLink", ()=>(0, _index9Ccb475DJs.af));
parcelHelpers.export(exports, "signInWithPhoneNumber", ()=>(0, _index9Ccb475DJs.s));
parcelHelpers.export(exports, "signInWithPopup", ()=>(0, _index9Ccb475DJs.d));
parcelHelpers.export(exports, "signInWithRedirect", ()=>(0, _index9Ccb475DJs.g));
parcelHelpers.export(exports, "signOut", ()=>(0, _index9Ccb475DJs.D));
parcelHelpers.export(exports, "unlink", ()=>(0, _index9Ccb475DJs.aq));
parcelHelpers.export(exports, "updateCurrentUser", ()=>(0, _index9Ccb475DJs.C));
parcelHelpers.export(exports, "updateEmail", ()=>(0, _index9Ccb475DJs.am));
parcelHelpers.export(exports, "updatePassword", ()=>(0, _index9Ccb475DJs.an));
parcelHelpers.export(exports, "updatePhoneNumber", ()=>(0, _index9Ccb475DJs.u));
parcelHelpers.export(exports, "updateProfile", ()=>(0, _index9Ccb475DJs.al));
parcelHelpers.export(exports, "useDeviceLanguage", ()=>(0, _index9Ccb475DJs.B));
parcelHelpers.export(exports, "validatePassword", ()=>(0, _index9Ccb475DJs.w));
parcelHelpers.export(exports, "verifyBeforeUpdateEmail", ()=>(0, _index9Ccb475DJs.ai));
parcelHelpers.export(exports, "verifyPasswordResetCode", ()=>(0, _index9Ccb475DJs.aa));
var _index9Ccb475DJs = require("./index-9ccb475d.js");
var _app = require("@firebase/app");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");

},{"./index-9ccb475d.js":"fFYkl","@firebase/app":"clWgn","@firebase/util":"jy04l","@firebase/logger":"9cikG","@firebase/component":"d6O5O","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fFYkl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>SAMLAuthProvider);
parcelHelpers.export(exports, "A", ()=>ActionCodeOperation);
parcelHelpers.export(exports, "B", ()=>useDeviceLanguage);
parcelHelpers.export(exports, "C", ()=>updateCurrentUser);
parcelHelpers.export(exports, "D", ()=>signOut);
parcelHelpers.export(exports, "E", ()=>revokeAccessToken);
parcelHelpers.export(exports, "F", ()=>FactorId);
parcelHelpers.export(exports, "G", ()=>deleteUser);
parcelHelpers.export(exports, "H", ()=>debugErrorMap);
parcelHelpers.export(exports, "I", ()=>prodErrorMap);
parcelHelpers.export(exports, "J", ()=>AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY);
parcelHelpers.export(exports, "K", ()=>initializeAuth);
parcelHelpers.export(exports, "L", ()=>connectAuthEmulator);
parcelHelpers.export(exports, "M", ()=>AuthCredential);
parcelHelpers.export(exports, "N", ()=>EmailAuthCredential);
parcelHelpers.export(exports, "O", ()=>OperationType);
parcelHelpers.export(exports, "P", ()=>PhoneAuthProvider);
parcelHelpers.export(exports, "Q", ()=>OAuthCredential);
parcelHelpers.export(exports, "R", ()=>RecaptchaVerifier);
parcelHelpers.export(exports, "S", ()=>SignInMethod);
parcelHelpers.export(exports, "T", ()=>TotpMultiFactorGenerator);
parcelHelpers.export(exports, "U", ()=>PhoneAuthCredential);
parcelHelpers.export(exports, "V", ()=>inMemoryPersistence);
parcelHelpers.export(exports, "W", ()=>EmailAuthProvider);
parcelHelpers.export(exports, "X", ()=>FacebookAuthProvider);
parcelHelpers.export(exports, "Y", ()=>GoogleAuthProvider);
parcelHelpers.export(exports, "Z", ()=>GithubAuthProvider);
parcelHelpers.export(exports, "_", ()=>OAuthProvider);
parcelHelpers.export(exports, "a", ()=>browserCookiePersistence);
parcelHelpers.export(exports, "a0", ()=>TwitterAuthProvider);
parcelHelpers.export(exports, "a1", ()=>signInAnonymously);
parcelHelpers.export(exports, "a2", ()=>signInWithCredential);
parcelHelpers.export(exports, "a3", ()=>linkWithCredential);
parcelHelpers.export(exports, "a4", ()=>reauthenticateWithCredential);
parcelHelpers.export(exports, "a5", ()=>signInWithCustomToken);
parcelHelpers.export(exports, "a6", ()=>sendPasswordResetEmail);
parcelHelpers.export(exports, "a7", ()=>confirmPasswordReset);
parcelHelpers.export(exports, "a8", ()=>applyActionCode);
parcelHelpers.export(exports, "a9", ()=>checkActionCode);
parcelHelpers.export(exports, "aA", ()=>_getProjectConfig);
parcelHelpers.export(exports, "aB", ()=>_isIOS7Or8);
parcelHelpers.export(exports, "aC", ()=>_createError);
parcelHelpers.export(exports, "aD", ()=>_assert);
parcelHelpers.export(exports, "aE", ()=>AuthEventManager);
parcelHelpers.export(exports, "aF", ()=>_getInstance);
parcelHelpers.export(exports, "aG", ()=>_persistenceKeyName);
parcelHelpers.export(exports, "aH", ()=>_getRedirectResult);
parcelHelpers.export(exports, "aI", ()=>_overrideRedirectResult);
parcelHelpers.export(exports, "aJ", ()=>_clearRedirectOutcomes);
parcelHelpers.export(exports, "aK", ()=>_castAuth);
parcelHelpers.export(exports, "aL", ()=>UserImpl);
parcelHelpers.export(exports, "aM", ()=>AuthImpl);
parcelHelpers.export(exports, "aN", ()=>_getClientVersion);
parcelHelpers.export(exports, "aO", ()=>_generateEventId);
parcelHelpers.export(exports, "aP", ()=>AuthPopup);
parcelHelpers.export(exports, "aQ", ()=>FetchProvider);
parcelHelpers.export(exports, "aR", ()=>SAMLAuthCredential);
parcelHelpers.export(exports, "aa", ()=>verifyPasswordResetCode);
parcelHelpers.export(exports, "ab", ()=>createUserWithEmailAndPassword);
parcelHelpers.export(exports, "ac", ()=>signInWithEmailAndPassword);
parcelHelpers.export(exports, "ad", ()=>sendSignInLinkToEmail);
parcelHelpers.export(exports, "ae", ()=>isSignInWithEmailLink);
parcelHelpers.export(exports, "af", ()=>signInWithEmailLink);
parcelHelpers.export(exports, "ag", ()=>fetchSignInMethodsForEmail);
parcelHelpers.export(exports, "ah", ()=>sendEmailVerification);
parcelHelpers.export(exports, "ai", ()=>verifyBeforeUpdateEmail);
parcelHelpers.export(exports, "aj", ()=>ActionCodeURL);
parcelHelpers.export(exports, "ak", ()=>parseActionCodeURL);
parcelHelpers.export(exports, "al", ()=>updateProfile);
parcelHelpers.export(exports, "am", ()=>updateEmail);
parcelHelpers.export(exports, "an", ()=>updatePassword);
parcelHelpers.export(exports, "ao", ()=>getIdToken);
parcelHelpers.export(exports, "ap", ()=>getIdTokenResult);
parcelHelpers.export(exports, "aq", ()=>unlink);
parcelHelpers.export(exports, "ar", ()=>getAdditionalUserInfo);
parcelHelpers.export(exports, "as", ()=>reload);
parcelHelpers.export(exports, "at", ()=>getMultiFactorResolver);
parcelHelpers.export(exports, "au", ()=>multiFactor);
parcelHelpers.export(exports, "av", ()=>debugAssert);
parcelHelpers.export(exports, "aw", ()=>_isIOS);
parcelHelpers.export(exports, "ax", ()=>_isAndroid);
parcelHelpers.export(exports, "ay", ()=>_fail);
parcelHelpers.export(exports, "az", ()=>_getRedirectUrl);
parcelHelpers.export(exports, "b", ()=>browserLocalPersistence);
parcelHelpers.export(exports, "c", ()=>browserSessionPersistence);
parcelHelpers.export(exports, "d", ()=>signInWithPopup);
parcelHelpers.export(exports, "e", ()=>linkWithPopup);
parcelHelpers.export(exports, "f", ()=>reauthenticateWithPopup);
parcelHelpers.export(exports, "g", ()=>signInWithRedirect);
parcelHelpers.export(exports, "h", ()=>linkWithRedirect);
parcelHelpers.export(exports, "i", ()=>indexedDBLocalPersistence);
parcelHelpers.export(exports, "j", ()=>reauthenticateWithRedirect);
parcelHelpers.export(exports, "k", ()=>getRedirectResult);
parcelHelpers.export(exports, "l", ()=>linkWithPhoneNumber);
parcelHelpers.export(exports, "m", ()=>browserPopupRedirectResolver);
parcelHelpers.export(exports, "n", ()=>PhoneMultiFactorGenerator);
parcelHelpers.export(exports, "o", ()=>TotpSecret);
parcelHelpers.export(exports, "p", ()=>getAuth);
parcelHelpers.export(exports, "q", ()=>ProviderId);
parcelHelpers.export(exports, "r", ()=>reauthenticateWithPhoneNumber);
parcelHelpers.export(exports, "s", ()=>signInWithPhoneNumber);
parcelHelpers.export(exports, "t", ()=>setPersistence);
parcelHelpers.export(exports, "u", ()=>updatePhoneNumber);
parcelHelpers.export(exports, "v", ()=>initializeRecaptchaConfig);
parcelHelpers.export(exports, "w", ()=>validatePassword);
parcelHelpers.export(exports, "x", ()=>onIdTokenChanged);
parcelHelpers.export(exports, "y", ()=>beforeAuthStateChanged);
parcelHelpers.export(exports, "z", ()=>onAuthStateChanged);
var _app = require("@firebase/app");
var _util = require("@firebase/util");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */ const FactorId = {
    /** Phone as second factor */ PHONE: 'phone',
    TOTP: 'totp'
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */ const ProviderId = {
    /** Facebook provider ID */ FACEBOOK: 'facebook.com',
    /** GitHub provider ID */ GITHUB: 'github.com',
    /** Google provider ID */ GOOGLE: 'google.com',
    /** Password provider */ PASSWORD: 'password',
    /** Phone provider */ PHONE: 'phone',
    /** Twitter provider ID */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */ const SignInMethod = {
    /** Email link sign in method */ EMAIL_LINK: 'emailLink',
    /** Email/password sign in method */ EMAIL_PASSWORD: 'password',
    /** Facebook sign in method */ FACEBOOK: 'facebook.com',
    /** GitHub sign in method */ GITHUB: 'github.com',
    /** Google sign in method */ GOOGLE: 'google.com',
    /** Phone sign in method */ PHONE: 'phone',
    /** Twitter sign in method */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */ const OperationType = {
    /** Operation involving linking an additional provider to an already signed-in user. */ LINK: 'link',
    /** Operation involving using a provider to reauthenticate an already signed-in user. */ REAUTHENTICATE: 'reauthenticate',
    /** Operation involving signing in a user. */ SIGN_IN: 'signIn'
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */ const ActionCodeOperation = {
    /** The email link sign-in action. */ EMAIL_SIGNIN: 'EMAIL_SIGNIN',
    /** The password reset action. */ PASSWORD_RESET: 'PASSWORD_RESET',
    /** The email revocation action. */ RECOVER_EMAIL: 'RECOVER_EMAIL',
    /** The revert second factor addition email action. */ REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
    /** The revert second factor addition email action. */ VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
    /** The email verification action. */ VERIFY_EMAIL: 'VERIFY_EMAIL'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _debugErrorMap() {
    return {
        ["admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ ]: 'This operation is restricted to administrators only.',
        ["argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ ]: '',
        ["app-not-authorized" /* AuthErrorCode.APP_NOT_AUTHORIZED */ ]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        ["app-not-installed" /* AuthErrorCode.APP_NOT_INSTALLED */ ]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        ["captcha-check-failed" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */ ]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        ["code-expired" /* AuthErrorCode.CODE_EXPIRED */ ]: "The SMS code has expired. Please re-send the verification code to try again.",
        ["cordova-not-ready" /* AuthErrorCode.CORDOVA_NOT_READY */ ]: 'Cordova framework is not ready.',
        ["cors-unsupported" /* AuthErrorCode.CORS_UNSUPPORTED */ ]: 'This browser is not supported.',
        ["credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ ]: 'This credential is already associated with a different user account.',
        ["custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */ ]: 'The custom token corresponds to a different audience.',
        ["requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
        ["dynamic-link-not-activated" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */ ]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        ["email-change-needs-verification" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */ ]: 'Multi-factor users must always have a verified email.',
        ["email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ ]: 'The email address is already in use by another account.',
        ["emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
        ["expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */ ]: 'The action code has expired.',
        ["cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ ]: 'This operation has been cancelled due to another conflicting popup being opened.',
        ["internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ]: 'An internal AuthError has occurred.',
        ["invalid-app-credential" /* AuthErrorCode.INVALID_APP_CREDENTIAL */ ]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        ["invalid-app-id" /* AuthErrorCode.INVALID_APP_ID */ ]: 'The mobile app identifier is not registered for the current project.',
        ["invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ ]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        ["invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["invalid-verification-code" /* AuthErrorCode.INVALID_CODE */ ]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        ["invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */ ]: 'The continue URL provided in the request is invalid.',
        ["invalid-cordova-configuration" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */ ]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        ["invalid-custom-token" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */ ]: 'The custom token format is incorrect. Please check the documentation.',
        ["invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ ]: 'The provided dynamic link domain is not configured or authorized for the current project.',
        ["invalid-email" /* AuthErrorCode.INVALID_EMAIL */ ]: 'The email address is badly formatted.',
        ["invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ ]: 'Emulator URL must start with a valid scheme (http:// or https://).',
        ["invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ ]: 'Your API key is invalid, please check you have copied it correctly.',
        ["invalid-cert-hash" /* AuthErrorCode.INVALID_CERT_HASH */ ]: 'The SHA-1 certificate hash provided is invalid.',
        ["invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ]: 'The supplied auth credential is incorrect, malformed or has expired.',
        ["invalid-message-payload" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */ ]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */ ]: 'The request does not contain a valid proof of first factor successful sign-in.',
        ["invalid-oauth-provider" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */ ]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        ["invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ ]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
        ["unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */ ]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        ["invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */ ]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        ["wrong-password" /* AuthErrorCode.INVALID_PASSWORD */ ]: 'The password is invalid or the user does not have a password.',
        ["invalid-persistence-type" /* AuthErrorCode.INVALID_PERSISTENCE */ ]: 'The specified persistence type is invalid. It can only be local, session or none.',
        ["invalid-phone-number" /* AuthErrorCode.INVALID_PHONE_NUMBER */ ]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        ["invalid-provider-id" /* AuthErrorCode.INVALID_PROVIDER_ID */ ]: 'The specified provider ID is invalid.',
        ["invalid-recipient-email" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */ ]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        ["invalid-sender" /* AuthErrorCode.INVALID_SENDER */ ]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */ ]: 'The verification ID used to create the phone auth credential is invalid.',
        ["invalid-tenant-id" /* AuthErrorCode.INVALID_TENANT_ID */ ]: "The Auth instance's tenant ID is invalid.",
        ["login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */ ]: 'Login blocked by user-provided method: {$originalMessage}',
        ["missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ ]: 'An Android Package Name must be provided if the Android App is required to be installed.',
        ["auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ ]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        ["missing-app-credential" /* AuthErrorCode.MISSING_APP_CREDENTIAL */ ]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        ["missing-verification-code" /* AuthErrorCode.MISSING_CODE */ ]: 'The phone auth credential was created with an empty SMS verification code.',
        ["missing-continue-uri" /* AuthErrorCode.MISSING_CONTINUE_URI */ ]: 'A continue URL must be provided in the request.',
        ["missing-iframe-start" /* AuthErrorCode.MISSING_IFRAME_START */ ]: 'An internal AuthError has occurred.',
        ["missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ ]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
        ["missing-or-invalid-nonce" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */ ]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        ["missing-password" /* AuthErrorCode.MISSING_PASSWORD */ ]: 'A non-empty password must be provided',
        ["missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ ]: 'No second factor identifier is provided.',
        ["missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */ ]: 'The request is missing proof of first factor successful sign-in.',
        ["missing-phone-number" /* AuthErrorCode.MISSING_PHONE_NUMBER */ ]: 'To send verification codes, provide a phone number for the recipient.',
        ["missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */ ]: 'The phone auth credential was created with an empty verification ID.',
        ["app-deleted" /* AuthErrorCode.MODULE_DESTROYED */ ]: 'This instance of FirebaseApp has been deleted.',
        ["multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ ]: 'The user does not have a second factor matching the identifier provided.',
        ["multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ ]: 'Proof of ownership of a second factor is required to complete sign-in.',
        ["account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ ]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        ["network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
        ["no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */ ]: 'User was not linked to an account with the given provider.',
        ["null-user" /* AuthErrorCode.NULL_USER */ ]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
        ["operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ ]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        ["operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        ["popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */ ]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
        ["popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ ]: 'The popup has been closed by the user before finalizing the operation.',
        ["provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ ]: 'User can only be linked to one identity for the given provider.',
        ["quota-exceeded" /* AuthErrorCode.QUOTA_EXCEEDED */ ]: "The project's quota for this operation has been exceeded.",
        ["redirect-cancelled-by-user" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */ ]: 'The redirect operation has been cancelled by the user before finalizing.',
        ["redirect-operation-pending" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */ ]: 'A redirect sign-in operation is already pending.',
        ["rejected-credential" /* AuthErrorCode.REJECTED_CREDENTIAL */ ]: 'The request contains malformed or mismatching credentials.',
        ["second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ ]: 'The second factor is already enrolled on this account.',
        ["maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ ]: 'The maximum allowed number of second factors on a user has been exceeded.',
        ["tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ ]: "The provided tenant ID does not match the Auth instance's tenant ID",
        ["timeout" /* AuthErrorCode.TIMEOUT */ ]: 'The operation has timed out.',
        ["user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ]: "The user's credential is no longer valid. The user must sign in again.",
        ["too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "We have blocked all requests from this device due to unusual activity. Try again later.",
        ["unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ ]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        ["unsupported-first-factor" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */ ]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
        ["unsupported-persistence-type" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */ ]: 'The current environment does not support the specified persistence type.',
        ["unsupported-tenant-operation" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */ ]: 'This operation is not supported in a multi-tenant context.',
        ["unverified-email" /* AuthErrorCode.UNVERIFIED_EMAIL */ ]: 'The operation requires a verified email.',
        ["user-cancelled" /* AuthErrorCode.USER_CANCELLED */ ]: 'The user did not grant your application the permissions it requested.',
        ["user-not-found" /* AuthErrorCode.USER_DELETED */ ]: "There is no user record corresponding to this identifier. The user may have been deleted.",
        ["user-disabled" /* AuthErrorCode.USER_DISABLED */ ]: 'The user account has been disabled by an administrator.',
        ["user-mismatch" /* AuthErrorCode.USER_MISMATCH */ ]: 'The supplied credentials do not correspond to the previously signed in user.',
        ["user-signed-out" /* AuthErrorCode.USER_SIGNED_OUT */ ]: '',
        ["weak-password" /* AuthErrorCode.WEAK_PASSWORD */ ]: 'The password must be 6 characters long or more.',
        ["web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ ]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
        ["already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */ ]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.",
        ["missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ ]: 'The reCAPTCHA token is missing when sending request to the backend.',
        ["invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ ]: 'The reCAPTCHA token is invalid when sending request to the backend.',
        ["invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ ]: 'The reCAPTCHA action is invalid when sending request to the backend.',
        ["recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ ]: 'reCAPTCHA Enterprise integration is not enabled for this project.',
        ["missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */ ]: 'The reCAPTCHA client type is missing when sending request to the backend.',
        ["missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ ]: 'The reCAPTCHA version is missing when sending request to the backend.',
        ["invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */ ]: 'Invalid request parameters.',
        ["invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ ]: 'The reCAPTCHA version is invalid when sending request to the backend.',
        ["unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */ ]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',
        ["password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ]: 'The password does not meet the requirements.',
        ["invalid-hosting-link-domain" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */ ]: "The provided Hosting link domain is not configured in Firebase Hosting or is not owned by the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`)."
    };
}
function _prodErrorMap() {
    // We will include this one message in the prod error map since by the very
    // nature of this error, developers will never be able to see the message
    // using the debugErrorMap (which is installed during auth initialization).
    return {
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
    };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const debugErrorMap = _debugErrorMap;
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const prodErrorMap = _prodErrorMap;
const _DEFAULT_AUTH_ERROR_FACTORY = new (0, _util.ErrorFactory)('auth', 'Firebase', _prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */ const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
    ARGUMENT_ERROR: 'auth/argument-error',
    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
    APP_NOT_INSTALLED: 'auth/app-not-installed',
    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
    CODE_EXPIRED: 'auth/code-expired',
    CORDOVA_NOT_READY: 'auth/cordova-not-ready',
    CORS_UNSUPPORTED: 'auth/cors-unsupported',
    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
    EMAIL_EXISTS: 'auth/email-already-in-use',
    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
    EXPIRED_OOB_CODE: 'auth/expired-action-code',
    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
    INTERNAL_ERROR: 'auth/internal-error',
    INVALID_API_KEY: 'auth/invalid-api-key',
    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
    INVALID_APP_ID: 'auth/invalid-app-id',
    INVALID_AUTH: 'auth/invalid-user-token',
    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
    INVALID_CERT_HASH: 'auth/invalid-cert-hash',
    INVALID_CODE: 'auth/invalid-verification-code',
    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
    INVALID_EMAIL: 'auth/invalid-email',
    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
    INVALID_IDP_RESPONSE: 'auth/invalid-credential',
    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',
    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
    INVALID_OOB_CODE: 'auth/invalid-action-code',
    INVALID_ORIGIN: 'auth/unauthorized-domain',
    INVALID_PASSWORD: 'auth/wrong-password',
    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
    INVALID_SENDER: 'auth/invalid-sender',
    INVALID_SESSION_INFO: 'auth/invalid-verification-id',
    INVALID_TENANT_ID: 'auth/invalid-tenant-id',
    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
    MFA_REQUIRED: 'auth/multi-factor-auth-required',
    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
    MISSING_CODE: 'auth/missing-verification-code',
    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
    MISSING_IFRAME_START: 'auth/missing-iframe-start',
    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
    MISSING_SESSION_INFO: 'auth/missing-verification-id',
    MODULE_DESTROYED: 'auth/app-deleted',
    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
    NULL_USER: 'auth/null-user',
    NO_AUTH_EVENT: 'auth/no-auth-event',
    NO_SUCH_PROVIDER: 'auth/no-such-provider',
    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
    POPUP_BLOCKED: 'auth/popup-blocked',
    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
    QUOTA_EXCEEDED: 'auth/quota-exceeded',
    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
    REJECTED_CREDENTIAL: 'auth/rejected-credential',
    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
    TIMEOUT: 'auth/timeout',
    TOKEN_EXPIRED: 'auth/user-token-expired',
    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
    UNVERIFIED_EMAIL: 'auth/unverified-email',
    USER_CANCELLED: 'auth/user-cancelled',
    USER_DELETED: 'auth/user-not-found',
    USER_DISABLED: 'auth/user-disabled',
    USER_MISMATCH: 'auth/user-mismatch',
    USER_SIGNED_OUT: 'auth/user-signed-out',
    WEAK_PASSWORD: 'auth/weak-password',
    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
    ALREADY_INITIALIZED: 'auth/already-initialized',
    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',
    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',
    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',
    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',
    MISSING_CLIENT_TYPE: 'auth/missing-client-type',
    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',
    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',
    INVALID_REQ_TYPE: 'auth/invalid-req-type',
    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logClient = new (0, _logger.Logger)('@firebase/auth');
function _logWarn(msg, ...args) {
    if (logClient.logLevel <= (0, _logger.LogLevel).WARN) logClient.warn(`Auth (${(0, _app.SDK_VERSION)}): ${msg}`, ...args);
}
function _logError(msg, ...args) {
    if (logClient.logLevel <= (0, _logger.LogLevel).ERROR) logClient.error(`Auth (${(0, _app.SDK_VERSION)}): ${msg}`, ...args);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _fail(authOrCode, ...rest) {
    throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
    return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message) {
    const errorMap = {
        ...prodErrorMap(),
        [code]: message
    };
    const factory = new (0, _util.ErrorFactory)('auth', 'Firebase', errorMap);
    return factory.create(code, {
        appName: auth.name
    });
}
function _serverAppCurrentUserOperationNotSupportedError(auth) {
    return _errorWithCustomMessage(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ , 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');
}
function _assertInstanceOf(auth, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) _fail(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        throw _errorWithCustomMessage(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ , `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);
    }
}
function createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== 'string') {
        const code = rest[0];
        const fullParams = [
            ...rest.slice(1)
        ];
        if (fullParams[0]) fullParams[0].appName = authOrCode.name;
        return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
    if (!assertion) throw createErrorInternal(authOrCode, ...rest);
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */ function debugFail(failure) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    _logError(message);
    // NOTE: We don't use FirebaseError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */ function debugAssert(assertion, message) {
    if (!assertion) debugFail(message);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _getCurrentUrl() {
    return typeof self !== 'undefined' && self.location?.href || '';
}
function _isHttpOrHttps() {
    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
}
function _getCurrentScheme() {
    return typeof self !== 'undefined' && self.location?.protocol || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine whether the browser is working online
 */ function _isOnline() {
    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && // Apply only for traditional web apps and Chrome extensions.
    // This is especially true for Cordova apps which have unreliable
    // navigator.onLine behavior unless cordova-plugin-network-information is
    // installed which overwrites the native navigator.onLine value and
    // defines navigator.connection.
    (_isHttpOrHttps() || (0, _util.isBrowserExtension)() || 'connection' in navigator)) return navigator.onLine;
    // If we can't determine the state, assume it is online.
    return true;
}
function _getUserLanguage() {
    if (typeof navigator === 'undefined') return null;
    const navigatorLanguage = navigator;
    return(// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */ class Delay {
    constructor(shortDelay, longDelay){
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        // Internal error when improperly initialized.
        debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
        this.isMobile = (0, _util.isMobileCordova)() || (0, _util.isReactNative)();
    }
    get() {
        if (!_isOnline()) // Pick the shorter timeout.
        return Math.min(5000 /* DelayMin.OFFLINE */ , this.shortDelay);
        // If running in a mobile environment, return the long delay, otherwise
        // return the short delay.
        // This could be improved in the future to dynamically change based on other
        // variables instead of just reading the current environment.
        return this.isMobile ? this.longDelay : this.shortDelay;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _emulatorUrl(config, path) {
    debugAssert(config.emulator, 'Emulator should always be set here');
    const { url } = config.emulator;
    if (!path) return url;
    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FetchProvider {
    static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) this.headersImpl = headersImpl;
        if (responseImpl) this.responseImpl = responseImpl;
    }
    static fetch() {
        if (this.fetchImpl) return this.fetchImpl;
        if (typeof self !== 'undefined' && 'fetch' in self) return self.fetch;
        if (typeof globalThis !== 'undefined' && globalThis.fetch) return globalThis.fetch;
        if (typeof fetch !== 'undefined') return fetch;
        debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static headers() {
        if (this.headersImpl) return this.headersImpl;
        if (typeof self !== 'undefined' && 'Headers' in self) return self.Headers;
        if (typeof globalThis !== 'undefined' && globalThis.Headers) return globalThis.Headers;
        if (typeof Headers !== 'undefined') return Headers;
        debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static response() {
        if (this.responseImpl) return this.responseImpl;
        if (typeof self !== 'undefined' && 'Response' in self) return self.Response;
        if (typeof globalThis !== 'undefined' && globalThis.Response) return globalThis.Response;
        if (typeof Response !== 'undefined') return Response;
        debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Map from errors returned by the server to errors to developer visible errors
 */ const SERVER_ERROR_MAP = {
    // Custom token errors.
    ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */ ]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Create Auth URI errors.
    ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */ ]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Sign in with email and password errors (some apply to sign up too).
    ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */ ]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */ ]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */ ,
    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
    // invalid.
    ["INVALID_LOGIN_CREDENTIALS" /* ServerError.INVALID_LOGIN_CREDENTIALS */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    // Sign up with email and password errors.
    ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */ ]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ ,
    ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */ ]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ ,
    // Verify assertion for sign in with credential errors:
    ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ ]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Send Password reset email errors:
    ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */ ]: "user-not-found" /* AuthErrorCode.USER_DELETED */ ,
    ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */ ]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */ ]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */ ,
    ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */ ]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Operations that require ID token in request:
    ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ,
    ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */ ]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ ,
    ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */ ]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ,
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */ ]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ,
    // Other errors.
    ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["PASSWORD_DOES_NOT_MEET_REQUIREMENTS" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ]: "password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ,
    // Phone Auth related errors.
    ["INVALID_CODE" /* ServerError.INVALID_CODE */ ]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */ ,
    ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */ ]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */ ,
    ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */ ]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */ ,
    ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */ ]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */ ,
    // Other action code errors when additional settings passed.
    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
    // This is OK as this error will be caught by client side validation.
    ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */ ]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ ,
    ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */ ]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ ,
    // getProjectConfig errors when clientId is passed.
    ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */ ]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ ,
    // User actions (sign-up or deletion) disabled errors.
    ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */ ]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ ,
    // Multi factor related errors.
    ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */ ]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */ ,
    ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */ ]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ ,
    ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */ ]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ ,
    ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */ ]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */ ,
    ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */ ]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ ,
    ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */ ]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ ,
    // Blocking functions related errors.
    ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Recaptcha related errors.
    ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */ ]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ ,
    ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */ ]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ ,
    ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */ ]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ ,
    ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */ ]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ ,
    ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */ ]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */ ,
    ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */ ]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ ,
    ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */ ]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ ,
    ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */ ]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */ 
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const CookieAuthProxiedEndpoints = [
    "/v1/accounts:signInWithCustomToken" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */ ,
    "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ ,
    "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */ ,
    "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */ ,
    "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ ,
    "/v1/token" /* Endpoint.TOKEN */ 
];
const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
    if (auth.tenantId && !request.tenantId) return {
        ...request,
        tenantId: auth.tenantId
    };
    return request;
}
async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
    return _performFetchWithErrorHandling(auth, customErrorMap, async ()=>{
        let body = {};
        let params = {};
        if (request) {
            if (method === "GET" /* HttpMethod.GET */ ) params = request;
            else body = {
                body: JSON.stringify(request)
            };
        }
        const query = (0, _util.querystring)({
            key: auth.config.apiKey,
            ...params
        }).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */ ] = 'application/json';
        if (auth.languageCode) headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */ ] = auth.languageCode;
        const fetchArgs = {
            method,
            headers,
            ...body
        };
        /* Security-conscious server-side frameworks tend to have built in mitigations for referrer
           problems". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on
           'RequestInitializerDict' is not implemented."
           https://github.com/cloudflare/next-on-pages/issues/487 */ if (!(0, _util.isCloudflareWorker)()) fetchArgs.referrerPolicy = 'no-referrer';
        if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) fetchArgs.credentials = 'include';
        return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);
    });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
    auth._canInitEmulator = false;
    const errorMap = {
        ...SERVER_ERROR_MAP,
        ...customErrorMap
    };
    try {
        const networkTimeout = new NetworkTimeout(auth);
        const response = await Promise.race([
            fetchFn(),
            networkTimeout.promise
        ]);
        // If we've reached this point, the fetch succeeded and the networkTimeout
        // didn't throw; clear the network timeout delay so that Node won't hang
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ('needConfirmation' in json) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ , json);
        if (response.ok && !('errorMessage' in json)) return json;
        else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ ) throw _makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ , json);
            else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */ ) throw _makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ , json);
            else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */ ) throw _makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */ , json);
            const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');
            if (serverErrorMessage) throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
            else _fail(auth, authError);
        }
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError)) throw e;
        // Changing this to a different error code will log user out when there is a network error
        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
        _fail(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ , {
            'message': String(e)
        });
    }
}
async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
    if ('mfaPendingCredential' in serverResponse) _fail(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ , {
        _serverResponse: serverResponse
    });
    return serverResponse;
}
async function _getFinalTarget(auth, host, path, query) {
    const base = `${host}${path}?${query}`;
    const authInternal = auth;
    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;
    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,
    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken
    // from the response
    if (CookieAuthProxiedEndpoints.includes(path)) {
        // Persistence manager is async, we need to await it. We can't just wait for auth initialized
        // here since auth initialization calls this function.
        await authInternal._persistenceManagerAvailable;
        if (authInternal._getPersistenceType() === "COOKIE" /* PersistenceType.COOKIE */ ) {
            const cookiePersistence = authInternal._getPersistence();
            return cookiePersistence._getFinalTarget(finalTarget).toString();
        }
    }
    return finalTarget;
}
function _parseEnforcementState(enforcementStateStr) {
    switch(enforcementStateStr){
        case 'ENFORCE':
            return "ENFORCE" /* EnforcementState.ENFORCE */ ;
        case 'AUDIT':
            return "AUDIT" /* EnforcementState.AUDIT */ ;
        case 'OFF':
            return "OFF" /* EnforcementState.OFF */ ;
        default:
            return "ENFORCEMENT_STATE_UNSPECIFIED" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */ ;
    }
}
class NetworkTimeout {
    clearNetworkTimeout() {
        clearTimeout(this.timer);
    }
    constructor(auth){
        this.auth = auth;
        // Node timers and browser timers are fundamentally incompatible, but we
        // don't care about the value here
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timer = null;
        this.promise = new Promise((_, reject)=>{
            this.timer = setTimeout(()=>{
                return reject(_createError(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            }, DEFAULT_API_TIMEOUT_MS.get());
        });
    }
}
function _makeTaggedError(auth, code, response) {
    const errorParams = {
        appName: auth.name
    };
    if (response.email) errorParams.email = response.email;
    if (response.phoneNumber) errorParams.phoneNumber = response.phoneNumber;
    const error = _createError(auth, code, errorParams);
    // We know customData is defined on error because errorParams is defined
    error.customData._tokenResponse = response;
    return error;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function isV2(grecaptcha) {
    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;
}
function isEnterprise(grecaptcha) {
    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;
}
class RecaptchaConfig {
    constructor(response){
        /**
         * The reCAPTCHA site key.
         */ this.siteKey = '';
        /**
         * The list of providers and their enablement status for reCAPTCHA Enterprise.
         */ this.recaptchaEnforcementState = [];
        if (response.recaptchaKey === undefined) throw new Error('recaptchaKey undefined');
        // Example response.recaptchaKey: "projects/proj123/keys/sitekey123"
        this.siteKey = response.recaptchaKey.split('/')[3];
        this.recaptchaEnforcementState = response.recaptchaEnforcementState;
    }
    /**
     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
     *
     * @param providerStr - The provider whose enforcement state is to be returned.
     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
     */ getProviderEnforcementState(providerStr) {
        if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) return null;
        for (const recaptchaEnforcementState of this.recaptchaEnforcementState){
            if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) return _parseEnforcementState(recaptchaEnforcementState.enforcementState);
        }
        return null;
    }
    /**
     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
     *
     * @param providerStr - The provider whose enablement state is to be returned.
     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
     */ isProviderEnabled(providerStr) {
        return this.getProviderEnforcementState(providerStr) === "ENFORCE" /* EnforcementState.ENFORCE */  || this.getProviderEnforcementState(providerStr) === "AUDIT" /* EnforcementState.AUDIT */ ;
    }
    /**
     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise
     * returns false.
     *
     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.
     */ isAnyProviderEnabled() {
        return this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ ) || this.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function getRecaptchaParams(auth) {
    return (await _performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v1/recaptchaParams" /* Endpoint.GET_RECAPTCHA_PARAM */ )).recaptchaSiteKey || '';
}
async function getRecaptchaConfig(auth, request) {
    return _performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v2/recaptchaConfig" /* Endpoint.GET_RECAPTCHA_CONFIG */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function deleteAccount(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */ , request);
}
async function deleteLinkedAccounts(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
async function getAccountInfo(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) return undefined;
    try {
        // Convert to date object.
        const date = new Date(Number(utcTimestamp));
        // Test date is valid.
        if (!isNaN(date.getTime())) // Convert to UTC date string.
        return date.toUTCString();
    } catch (e) {
    // Do nothing. undefined will be returned.
    }
    return undefined;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ function getIdToken(user, forceRefresh = false) {
    return (0, _util.getModularInstance)(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ async function getIdTokenResult(user, forceRefresh = false) {
    const userInternal = (0, _util.getModularInstance)(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = _parseToken(token);
    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
    const signInProvider = firebase?.['sign_in_provider'];
    return {
        claims,
        token,
        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: firebase?.['sign_in_second_factor'] || null
    };
}
function secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1000;
}
function _parseToken(token) {
    const [algorithm, payload, signature] = token.split('.');
    if (algorithm === undefined || payload === undefined || signature === undefined) {
        _logError('JWT malformed, contained fewer than 3 sections');
        return null;
    }
    try {
        const decoded = (0, _util.base64Decode)(payload);
        if (!decoded) {
            _logError('Failed to decode base64 JWT payload');
            return null;
        }
        return JSON.parse(decoded);
    } catch (e) {
        _logError('Caught error parsing JWT payload as JSON', e?.toString());
        return null;
    }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */ function _tokenExpiresIn(token) {
    const parsedToken = _parseToken(token);
    _assert(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return Number(parsedToken.exp) - Number(parsedToken.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) return promise;
    try {
        return await promise;
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError) && isUserInvalidated(e)) {
            if (user.auth.currentUser === user) await user.auth.signOut();
        }
        throw e;
    }
}
function isUserInvalidated({ code }) {
    return code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */ }` || code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ }`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ProactiveRefresh {
    constructor(user){
        this.user = user;
        this.isRunning = false;
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timerId = null;
        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;
    }
    _start() {
        if (this.isRunning) return;
        this.isRunning = true;
        this.schedule();
    }
    _stop() {
        if (!this.isRunning) return;
        this.isRunning = false;
        if (this.timerId !== null) clearTimeout(this.timerId);
    }
    getInterval(wasError) {
        if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */ );
            return interval;
        } else {
            // Reset the error backoff
            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;
            const expTime = this.user.stsTokenManager.expirationTime ?? 0;
            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */ ;
            return Math.max(0, interval);
        }
    }
    schedule(wasError = false) {
        if (!this.isRunning) // Just in case...
        return;
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async ()=>{
            await this.iteration();
        }, interval);
    }
    async iteration() {
        try {
            await this.user.getIdToken(true);
        } catch (e) {
            // Only retry on network errors
            if (e?.code === `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ }`) this.schedule(/* wasError */ true);
            return;
        }
        this.schedule();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserMetadata {
    constructor(createdAt, lastLoginAt){
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
    }
    _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
    }
    _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
    }
    toJSON() {
        return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
        };
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reloadWithoutSaving(user) {
    const auth = user.auth;
    const idToken = await user.getIdToken();
    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {
        idToken
    }));
    _assert(response?.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];
    const providerData = mergeProviderData(user.providerData, newProviderData);
    // Preserves the non-nonymous status of the stored user, even if no more
    // credentials (federated or email/password) are linked to the user. If
    // the user was previously anonymous, then use provider data to update.
    // On the other hand, if it was not anonymous before, it should never be
    // considered anonymous now.
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData,
        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous
    };
    Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */ async function reload(user) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _reloadWithoutSaving(userInternal);
    // Even though the current user hasn't changed, update
    // current user will trigger a persistence update w/ the
    // new info.
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
    const deduped = original.filter((o)=>!newData.some((n)=>n.providerId === o.providerId));
    return [
        ...deduped,
        ...newData
    ];
}
function extractProviderData(providers) {
    return providers.map(({ providerId, ...provider })=>{
        return {
            providerId,
            uid: provider.rawId || '',
            displayName: provider.displayName || null,
            email: provider.email || null,
            phoneNumber: provider.phoneNumber || null,
            photoURL: provider.photoUrl || null
        };
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function requestStsToken(auth, refreshToken) {
    const response = await _performFetchWithErrorHandling(auth, {}, async ()=>{
        const body = (0, _util.querystring)({
            'grant_type': 'refresh_token',
            'refresh_token': refreshToken
        }).slice(1);
        const { tokenApiHost, apiKey } = auth.config;
        const url = await _getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */ , `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */ ] = 'application/x-www-form-urlencoded';
        const options = {
            method: "POST" /* HttpMethod.POST */ ,
            headers,
            body
        };
        if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) options.credentials = 'include';
        return FetchProvider.fetch()(url, options);
    });
    // The response comes back in snake_case. Convert to camel:
    return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
    };
}
async function revokeToken(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts:revokeToken" /* Endpoint.REVOKE_TOKEN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */ class StsTokenManager {
    constructor(){
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
    }
    get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */ ;
    }
    updateFromServerResponse(response) {
        _assert(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        _assert(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
    }
    updateFromIdToken(idToken) {
        _assert(idToken.length !== 0, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const expiresIn = _tokenExpiresIn(idToken);
        this.updateTokensAndExpiration(idToken, null, expiresIn);
    }
    async getToken(auth, forceRefresh = false) {
        if (!forceRefresh && this.accessToken && !this.isExpired) return this.accessToken;
        _assert(this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ );
        if (this.refreshToken) {
            await this.refresh(auth, this.refreshToken);
            return this.accessToken;
        }
        return null;
    }
    clearRefreshToken() {
        this.refreshToken = null;
    }
    async refresh(auth, oldToken) {
        const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
    }
    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1000;
    }
    static fromJSON(appName, object) {
        const { refreshToken, accessToken, expirationTime } = object;
        const manager = new StsTokenManager();
        if (refreshToken) {
            _assert(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName
            });
            manager.refreshToken = refreshToken;
        }
        if (accessToken) {
            _assert(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName
            });
            manager.accessToken = accessToken;
        }
        if (expirationTime) {
            _assert(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName
            });
            manager.expirationTime = expirationTime;
        }
        return manager;
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
        };
    }
    _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
    }
    _clone() {
        return Object.assign(new StsTokenManager(), this.toJSON());
    }
    _performRefresh() {
        return debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function assertStringOrUndefined(assertion, appName) {
    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
        appName
    });
}
class UserImpl {
    constructor({ uid, auth, stsTokenManager, ...opt }){
        // For the user object, provider is always Firebase.
        this.providerId = "firebase" /* ProviderId.FIREBASE */ ;
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [
            ...opt.providerData
        ] : [];
        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
    }
    async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
    }
    getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
    }
    reload() {
        return reload(this);
    }
    _assign(user) {
        if (this === user) return;
        _assert(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo)=>({
                ...userInfo
            }));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
    }
    _clone(auth) {
        const newUser = new UserImpl({
            ...this,
            auth,
            stsTokenManager: this.stsTokenManager._clone()
        });
        newUser.metadata._copy(this.metadata);
        return newUser;
    }
    _onReload(callback) {
        // There should only ever be one listener, and that is a single instance of MultiFactorUser
        _assert(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
        }
    }
    _notifyReloadListener(userInfo) {
        if (this.reloadListener) this.reloadListener(userInfo);
        else // If no listener is subscribed yet, save the result so it's available when they do subscribe
        this.reloadUserInfo = userInfo;
    }
    _startProactiveRefresh() {
        this.proactiveRefresh._start();
    }
    _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
    }
    async _updateTokensIfNecessary(response, reload = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
        }
        if (reload) await _reloadWithoutSaving(this);
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) this.auth._notifyListenersIfCurrent(this);
    }
    async delete() {
        if ((0, _app._isFirebaseServerApp)(this.auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, {
            idToken
        }));
        this.stsTokenManager.clearRefreshToken();
        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
        //       cancels pending actions...
        return this.auth.signOut();
    }
    toJSON() {
        return {
            uid: this.uid,
            email: this.email || undefined,
            emailVerified: this.emailVerified,
            displayName: this.displayName || undefined,
            isAnonymous: this.isAnonymous,
            photoURL: this.photoURL || undefined,
            phoneNumber: this.phoneNumber || undefined,
            tenantId: this.tenantId || undefined,
            providerData: this.providerData.map((userInfo)=>({
                    ...userInfo
                })),
            stsTokenManager: this.stsTokenManager.toJSON(),
            // Redirect event ID must be maintained in case there is a pending
            // redirect event.
            _redirectEventId: this._redirectEventId,
            ...this.metadata.toJSON(),
            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
            apiKey: this.auth.config.apiKey,
            appName: this.auth.name
        };
    }
    get refreshToken() {
        return this.stsTokenManager.refreshToken || '';
    }
    static _fromJSON(auth, object) {
        const displayName = object.displayName ?? undefined;
        const email = object.email ?? undefined;
        const phoneNumber = object.phoneNumber ?? undefined;
        const photoURL = object.photoURL ?? undefined;
        const tenantId = object.tenantId ?? undefined;
        const _redirectEventId = object._redirectEventId ?? undefined;
        const createdAt = object.createdAt ?? undefined;
        const lastLoginAt = object.lastLoginAt ?? undefined;
        const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
        _assert(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new UserImpl({
            uid,
            auth,
            email,
            emailVerified,
            displayName,
            isAnonymous,
            photoURL,
            phoneNumber,
            tenantId,
            stsTokenManager,
            createdAt,
            lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) user.providerData = providerData.map((userInfo)=>({
                ...userInfo
            }));
        if (_redirectEventId) user._redirectEventId = _redirectEventId;
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        // Initialize the Firebase Auth user.
        const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth,
            stsTokenManager,
            isAnonymous
        });
        // Updates the user info and data and resolves with a user instance.
        await _reloadWithoutSaving(user);
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromGetAccountInfoResponse(auth, response, idToken) {
        const coreAccount = response.users[0];
        _assert(coreAccount.localId !== undefined, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];
        const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromIdToken(idToken);
        // Initialize the Firebase Auth user.
        const user = new UserImpl({
            uid: coreAccount.localId,
            auth,
            stsTokenManager,
            isAnonymous
        });
        // update the user with data from the GetAccountInfo response.
        const updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData,
            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length
        };
        Object.assign(user, updates);
        return user;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const instanceCache = new Map();
function _getInstance(cls) {
    debugAssert(cls instanceof Function, 'Expected a class definition');
    let instance = instanceCache.get(cls);
    if (instance) {
        debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
        return instance;
    }
    instance = new cls();
    instanceCache.set(cls, instance);
    return instance;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class InMemoryPersistence {
    constructor(){
        this.type = "NONE" /* PersistenceType.NONE */ ;
        this.storage = {};
    }
    async _isAvailable() {
        return true;
    }
    async _set(key, value) {
        this.storage[key] = value;
    }
    async _get(key) {
        const value = this.storage[key];
        return value === undefined ? null : value;
    }
    async _remove(key) {
        delete this.storage[key];
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
}
InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */ const inMemoryPersistence = InMemoryPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _persistenceKeyName(key, apiKey, appName) {
    return `${"firebase" /* Namespace.PERSISTENCE */ }:${key}:${apiKey}:${appName}`;
}
class PersistenceUserManager {
    constructor(persistence, auth, userKey){
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config, name } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
        this.fullPersistenceKey = _persistenceKeyName("persistence" /* KeyName.PERSISTENCE_USER */ , config.apiKey, name);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
    }
    setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
    }
    async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        if (!blob) return null;
        if (typeof blob === 'string') {
            const response = await getAccountInfo(this.auth, {
                idToken: blob
            }).catch(()=>undefined);
            if (!response) return null;
            return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);
        }
        return UserImpl._fromJSON(this.auth, blob);
    }
    removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
    }
    savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
    }
    async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) return;
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) return this.setCurrentUser(currentUser);
    }
    delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
    }
    static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */ ) {
        if (!persistenceHierarchy.length) return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
        // Eliminate any persistences that are not available
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (await persistence._isAvailable()) return persistence;
            return undefined;
        }))).filter((persistence)=>persistence);
        // Fall back to the first persistence listed, or in memory if none available
        let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
        // Pull out the existing user, setting the chosen persistence to that
        // persistence if the user exists.
        let userToMigrate = null;
        // Note, here we check for a user in _all_ persistences, not just the
        // ones deemed available. If we can migrate a user out of a broken
        // persistence, we will (but only if that persistence supports migration).
        for (const persistence of persistenceHierarchy)try {
            const blob = await persistence._get(key);
            if (blob) {
                let user;
                if (typeof blob === 'string') {
                    const response = await getAccountInfo(auth, {
                        idToken: blob
                    }).catch(()=>undefined);
                    if (!response) break;
                    user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);
                } else user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                if (persistence !== selectedPersistence) userToMigrate = user;
                selectedPersistence = persistence;
                break;
            }
        } catch  {}
        // If we find the user in a persistence that does support migration, use
        // that migration path (of only persistences that support migration)
        const migrationHierarchy = availablePersistences.filter((p)=>p._shouldAllowMigration);
        // If the persistence does _not_ allow migration, just finish off here
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) return new PersistenceUserManager(selectedPersistence, auth, userKey);
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
        // we'll just let it bubble to surface the error.
        await selectedPersistence._set(key, userToMigrate.toJSON());
        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
        // such as users getting stuck with a previous account after signing out and refreshing the tab.
        await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (persistence !== selectedPersistence) try {
                await persistence._remove(key);
            } catch  {}
        }));
        return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine the browser for the purposes of reporting usage to the API
 */ function _getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) return "Opera" /* BrowserName.OPERA */ ;
    else if (_isIEMobile(ua)) // Windows phone IEMobile browser.
    return "IEMobile" /* BrowserName.IEMOBILE */ ;
    else if (ua.includes('msie') || ua.includes('trident/')) return "IE" /* BrowserName.IE */ ;
    else if (ua.includes('edge/')) return "Edge" /* BrowserName.EDGE */ ;
    else if (_isFirefox(ua)) return "Firefox" /* BrowserName.FIREFOX */ ;
    else if (ua.includes('silk/')) return "Silk" /* BrowserName.SILK */ ;
    else if (_isBlackBerry(ua)) // Blackberry browser.
    return "Blackberry" /* BrowserName.BLACKBERRY */ ;
    else if (_isWebOS(ua)) // WebOS default browser.
    return "Webos" /* BrowserName.WEBOS */ ;
    else if (_isSafari(ua)) return "Safari" /* BrowserName.SAFARI */ ;
    else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) return "Chrome" /* BrowserName.CHROME */ ;
    else if (_isAndroid(ua)) // Android stock browser.
    return "Android" /* BrowserName.ANDROID */ ;
    else {
        // Most modern browsers have name/version at end of user agent string.
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if (matches?.length === 2) return matches[1];
    }
    return "Other" /* BrowserName.OTHER */ ;
}
function _isFirefox(ua = (0, _util.getUA)()) {
    return /firefox\//i.test(ua);
}
function _isSafari(userAgent = (0, _util.getUA)()) {
    const ua = userAgent.toLowerCase();
    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}
function _isChromeIOS(ua = (0, _util.getUA)()) {
    return /crios\//i.test(ua);
}
function _isIEMobile(ua = (0, _util.getUA)()) {
    return /iemobile/i.test(ua);
}
function _isAndroid(ua = (0, _util.getUA)()) {
    return /android/i.test(ua);
}
function _isBlackBerry(ua = (0, _util.getUA)()) {
    return /blackberry/i.test(ua);
}
function _isWebOS(ua = (0, _util.getUA)()) {
    return /webos/i.test(ua);
}
function _isIOS(ua = (0, _util.getUA)()) {
    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
}
function _isIOS7Or8(ua = (0, _util.getUA)()) {
    return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}
function _isIOSStandalone(ua = (0, _util.getUA)()) {
    return _isIOS(ua) && !!window.navigator?.standalone;
}
function _isIE10() {
    return (0, _util.isIE)() && document.documentMode === 10;
}
function _isMobileBrowser(ua = (0, _util.getUA)()) {
    // TODO: implement getBrowserName equivalent for OS.
    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Determine the SDK version string
 */ function _getClientVersion(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch(clientPlatform){
        case "Browser" /* ClientPlatform.BROWSER */ :
            // In a browser environment, report the browser name.
            reportedPlatform = _getBrowserName((0, _util.getUA)());
            break;
        case "Worker" /* ClientPlatform.WORKER */ :
            // Technically a worker runs from a browser but we need to differentiate a
            // worker from a browser.
            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
            reportedPlatform = `${_getBrowserName((0, _util.getUA)())}-${clientPlatform}`;
            break;
        default:
            reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */ 
    return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */ }/${0, _app.SDK_VERSION}/${reportedFrameworks}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthMiddlewareQueue {
    constructor(auth){
        this.auth = auth;
        this.queue = [];
    }
    pushCallback(callback, onAbort) {
        // The callback could be sync or async. Wrap it into a
        // function that is always async.
        const wrappedCallback = (user)=>new Promise((resolve, reject)=>{
                try {
                    const result = callback(user);
                    // Either resolve with existing promise or wrap a non-promise
                    // return value into a promise.
                    resolve(result);
                } catch (e) {
                    // Sync callback throws.
                    reject(e);
                }
            });
        // Attach the onAbort if present
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return ()=>{
            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
            // indexing of other elements.
            this.queue[index] = ()=>Promise.resolve();
        };
    }
    async runMiddleware(nextUser) {
        if (this.auth.currentUser === nextUser) return;
        // While running the middleware, build a temporary stack of onAbort
        // callbacks to call if one middleware callback rejects.
        const onAbortStack = [];
        try {
            for (const beforeStateCallback of this.queue){
                await beforeStateCallback(nextUser);
                // Only push the onAbort if the callback succeeds
                if (beforeStateCallback.onAbort) onAbortStack.push(beforeStateCallback.onAbort);
            }
        } catch (e) {
            // Run all onAbort, with separate try/catch to ignore any errors and
            // continue
            onAbortStack.reverse();
            for (const onAbort of onAbortStack)try {
                onAbort();
            } catch (_) {
            /* swallow error */ }
            throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */ , {
                originalMessage: e?.message
            });
        }
    }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Fetches the password policy for the currently set tenant or the project if no tenant is set.
 *
 * @param auth Auth object.
 * @param request Password policy request.
 * @returns Password policy response.
 */ async function _getPasswordPolicy(auth, request = {}) {
    return _performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v2/passwordPolicy" /* Endpoint.GET_PASSWORD_POLICY */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Minimum min password length enforced by the backend, even if no minimum length is set.
const MINIMUM_MIN_PASSWORD_LENGTH = 6;
/**
 * Stores password policy requirements and provides password validation against the policy.
 *
 * @internal
 */ class PasswordPolicyImpl {
    constructor(response){
        // Only include custom strength options defined in the response.
        const responseOptions = response.customStrengthOptions;
        this.customStrengthOptions = {};
        // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.
        this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;
        if (responseOptions.maxPasswordLength) this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;
        if (responseOptions.containsLowercaseCharacter !== undefined) this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;
        if (responseOptions.containsUppercaseCharacter !== undefined) this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;
        if (responseOptions.containsNumericCharacter !== undefined) this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;
        if (responseOptions.containsNonAlphanumericCharacter !== undefined) this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;
        this.enforcementState = response.enforcementState;
        if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') this.enforcementState = 'OFF';
        // Use an empty string if no non-alphanumeric characters are specified in the response.
        this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';
        this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;
        this.schemaVersion = response.schemaVersion;
    }
    validatePassword(password) {
        const status = {
            isValid: true,
            passwordPolicy: this
        };
        // Check the password length and character options.
        this.validatePasswordLengthOptions(password, status);
        this.validatePasswordCharacterOptions(password, status);
        // Combine the status into single isValid property.
        status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);
        status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);
        status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);
        status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);
        status.isValid && (status.isValid = status.containsNumericCharacter ?? true);
        status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);
        return status;
    }
    /**
     * Validates that the password meets the length options for the policy.
     *
     * @param password Password to validate.
     * @param status Validation status.
     */ validatePasswordLengthOptions(password, status) {
        const minPasswordLength = this.customStrengthOptions.minPasswordLength;
        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
        if (minPasswordLength) status.meetsMinPasswordLength = password.length >= minPasswordLength;
        if (maxPasswordLength) status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
    }
    /**
     * Validates that the password meets the character options for the policy.
     *
     * @param password Password to validate.
     * @param status Validation status.
     */ validatePasswordCharacterOptions(password, status) {
        // Assign statuses for requirements even if the password is an empty string.
        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */ false, /* containsUppercaseCharacter= */ false, /* containsNumericCharacter= */ false, /* containsNonAlphanumericCharacter= */ false);
        let passwordChar;
        for(let i = 0; i < password.length; i++){
            passwordChar = password.charAt(i);
            this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */ passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */ passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */ passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));
        }
    }
    /**
     * Updates the running validation status with the statuses for the character options.
     * Expected to be called each time a character is processed to update each option status
     * based on the current character.
     *
     * @param status Validation status.
     * @param containsLowercaseCharacter Whether the character is a lowercase letter.
     * @param containsUppercaseCharacter Whether the character is an uppercase letter.
     * @param containsNumericCharacter Whether the character is a numeric character.
     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
     */ updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
        if (this.customStrengthOptions.containsLowercaseLetter) status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
        if (this.customStrengthOptions.containsUppercaseLetter) status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
        if (this.customStrengthOptions.containsNumericCharacter) status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
        if (this.customStrengthOptions.containsNonAlphanumericCharacter) status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthImpl {
    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config){
        this.app = app;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
        // Any network calls will set this to true and prevent subsequent emulator
        // initialization
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        this._projectPasswordPolicy = null;
        this._tenantPasswordPolicies = {};
        this._resolvePersistenceManagerAvailable = undefined;
        // Tracks the last notified UID for state change listeners to prevent
        // repeated calls to the callbacks. Undefined means it's never been
        // called, whereas null means it's been called with a signed out user
        this.lastNotifiedUid = undefined;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = {
            appVerificationDisabledForTesting: false
        };
        this.frameworks = [];
        this.name = app.name;
        this.clientVersion = config.sdkClientVersion;
        // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs
        // persistenceMananger to be available. see _getFinalTarget for more context
        this._persistenceManagerAvailable = new Promise((resolve)=>this._resolvePersistenceManagerAvailable = resolve);
    }
    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        // Have to check for app deletion throughout initialization (after each
        // promise resolution)
        this._initializationPromise = this.queue(async ()=>{
            if (this._deleted) return;
            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
            this._resolvePersistenceManagerAvailable?.();
            if (this._deleted) return;
            // Initialize the resolver early if necessary (only applicable to web:
            // this will cause the iframe to load immediately in certain cases)
            if (this._popupRedirectResolver?._shouldInitProactively) // If this fails, don't halt auth loading
            try {
                await this._popupRedirectResolver._initialize(this);
            } catch (e) {
            /* Ignore the error */ }
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = this.currentUser?.uid || null;
            if (this._deleted) return;
            this._isInitialized = true;
        });
        return this._initializationPromise;
    }
    /**
     * If the persistence is changed in another window, the user manager will let us know
     */ async _onStorageEvent() {
        if (this._deleted) return;
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) // No change, do nothing (was signed out and remained signed out).
        return;
        // If the same user is to be synchronized.
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
            // Data update, simply copy data changes.
            this._currentUser._assign(user);
            // If tokens changed from previous user tokens, this will trigger
            // notifyAuthListeners_.
            await this.currentUser.getIdToken();
            return;
        }
        // Update current Auth state. Either a new login or logout.
        // Skip blocking callbacks, they should not apply to a change in another tab.
        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
    }
    async initializeCurrentUserFromIdToken(idToken) {
        try {
            const response = await getAccountInfo(this, {
                idToken
            });
            const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);
            await this.directlySetCurrentUser(user);
        } catch (err) {
            console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);
            await this.directlySetCurrentUser(null);
        }
    }
    async initializeCurrentUser(popupRedirectResolver) {
        if ((0, _app._isFirebaseServerApp)(this.app)) {
            const idToken = this.app.settings.authIdToken;
            if (idToken) // Start the auth operation in the next tick to allow a moment for the customer's app to
            // attach an emulator, if desired.
            return new Promise((resolve)=>{
                setTimeout(()=>this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
            });
            else return this.directlySetCurrentUser(null);
        }
        // First check to see if we have a pending redirect event.
        const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = this.redirectUser?._redirectEventId;
            const storedUserEventId = futureCurrentUser?._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            // If the stored user (i.e. the old "currentUser") has a redirectId that
            // matches the redirect user, then we want to initially sign in with the
            // new user object from result.
            // TODO(samgho): More thoroughly test all of this
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {
                futureCurrentUser = result.user;
                needsTocheckMiddleware = true;
            }
        }
        // If no user in persistence, there is no current user. Set to null.
        if (!futureCurrentUser) return this.directlySetCurrentUser(null);
        if (!futureCurrentUser._redirectEventId) {
            // This isn't a redirect link operation, we can reload and bail.
            // First though, ensure that we check the middleware is happy.
            if (needsTocheckMiddleware) try {
                await this.beforeStateQueue.runMiddleware(futureCurrentUser);
            } catch (e) {
                futureCurrentUser = previouslyStoredUser;
                // We know this is available since the bit is only set when the
                // resolver is available
                this._popupRedirectResolver._overrideRedirectResult(this, ()=>Promise.reject(e));
            }
            if (futureCurrentUser) return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
            else return this.directlySetCurrentUser(null);
        }
        _assert(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        await this.getOrInitRedirectPersistenceManager();
        // If the redirect user's event ID matches the current user's event ID,
        // DO NOT reload the current user, otherwise they'll be cleared from storage.
        // This is important for the reauthenticateWithRedirect() flow.
        if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) return this.directlySetCurrentUser(futureCurrentUser);
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
    }
    async tryRedirectSignIn(redirectResolver) {
        // The redirect user needs to be checked (and signed in if available)
        // during auth initialization. All of the normal sign in and link/reauth
        // flows call back into auth and push things onto the promise queue. We
        // need to await the result of the redirect sign in *inside the promise
        // queue*. This presents a problem: we run into deadlock. See:
        //    ┌> [Initialization] ─────┐
        //    ┌> [<other queue tasks>] │
        //    └─ [getRedirectResult] <─┘
        //    where [] are tasks on the queue and arrows denote awaits
        // Initialization will never complete because it's waiting on something
        // that's waiting for initialization to complete!
        //
        // Instead, this method calls getRedirectResult() (stored in
        // _completeRedirectFn) with an optional parameter that instructs all of
        // the underlying auth operations to skip anything that mutates auth state.
        let result = null;
        try {
            // We know this._popupRedirectResolver is set since redirectResolver
            // is passed in. The _completeRedirectFn expects the unwrapped extern.
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e) {
            // Swallow any errors here; the code can retrieve them in
            // getRedirectResult().
            await this._setRedirectUser(null);
        }
        return result;
    }
    async reloadAndSetCurrentUserOrClear(user) {
        try {
            await _reloadWithoutSaving(user);
        } catch (e) {
            if (e?.code !== `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ }`) // Something's wrong with the user's token. Log them out and remove
            // them from storage
            return this.directlySetCurrentUser(null);
        }
        return this.directlySetCurrentUser(user);
    }
    useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
    }
    async _delete() {
        this._deleted = true;
    }
    async updateCurrentUser(userExtern) {
        if ((0, _app._isFirebaseServerApp)(this.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        // The public updateCurrentUser method needs to make a copy of the user,
        // and also check that the project matches
        const user = userExtern ? (0, _util.getModularInstance)(userExtern) : null;
        if (user) _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ );
        return this._updateCurrentUser(user && user._clone(this));
    }
    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        if (this._deleted) return;
        if (user) _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ );
        if (!skipBeforeStateCallbacks) await this.beforeStateQueue.runMiddleware(user);
        return this.queue(async ()=>{
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
        });
    }
    async signOut() {
        if ((0, _app._isFirebaseServerApp)(this.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        // Run first, to block _setRedirectUser() if any callbacks fail.
        await this.beforeStateQueue.runMiddleware(null);
        // Clear the redirect user when signOut is called
        if (this.redirectPersistenceManager || this._popupRedirectResolver) await this._setRedirectUser(null);
        // Prevent callbacks from being called again in _updateCurrentUser, as
        // they were already called in the first line.
        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
    }
    setPersistence(persistence) {
        if ((0, _app._isFirebaseServerApp)(this.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
        return this.queue(async ()=>{
            await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
    }
    _getRecaptchaConfig() {
        if (this.tenantId == null) return this._agentRecaptchaConfig;
        else return this._tenantRecaptchaConfigs[this.tenantId];
    }
    async validatePassword(password) {
        if (!this._getPasswordPolicyInternal()) await this._updatePasswordPolicy();
        // Password policy will be defined after fetching.
        const passwordPolicy = this._getPasswordPolicyInternal();
        // Check that the policy schema version is supported by the SDK.
        // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.
        if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */ , {}));
        return passwordPolicy.validatePassword(password);
    }
    _getPasswordPolicyInternal() {
        if (this.tenantId === null) return this._projectPasswordPolicy;
        else return this._tenantPasswordPolicies[this.tenantId];
    }
    async _updatePasswordPolicy() {
        const response = await _getPasswordPolicy(this);
        const passwordPolicy = new PasswordPolicyImpl(response);
        if (this.tenantId === null) this._projectPasswordPolicy = passwordPolicy;
        else this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
    }
    _getPersistenceType() {
        return this.assertedPersistence.persistence.type;
    }
    _getPersistence() {
        return this.assertedPersistence.persistence;
    }
    _updateErrorMap(errorMap) {
        this._errorFactory = new (0, _util.ErrorFactory)('auth', 'Firebase', errorMap());
    }
    onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
    }
    beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
    }
    onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
    }
    authStateReady() {
        return new Promise((resolve, reject)=>{
            if (this.currentUser) resolve();
            else {
                const unsubscribe = this.onAuthStateChanged(()=>{
                    unsubscribe();
                    resolve();
                }, reject);
            }
        });
    }
    /**
     * Revokes the given access token. Currently only supports Apple OAuth access tokens.
     */ async revokeAccessToken(token) {
        if (this.currentUser) {
            const idToken = await this.currentUser.getIdToken();
            // Generalize this to accept other providers once supported.
            const request = {
                providerId: 'apple.com',
                tokenType: "ACCESS_TOKEN" /* TokenType.ACCESS_TOKEN */ ,
                token,
                idToken
            };
            if (this.tenantId != null) request.tenantId = this.tenantId;
            await revokeToken(this, request);
        }
    }
    toJSON() {
        return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: this._currentUser?.toJSON()
        };
    }
    async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
    }
    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [
                _getInstance(resolver._redirectPersistence)
            ], "redirectUser" /* KeyName.REDIRECT_USER */ );
            this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
    }
    async _redirectUserForId(id) {
        // Make sure we've cleared any pending persistence actions if we're not in
        // the initializer
        if (this._isInitialized) await this.queue(async ()=>{});
        if (this._currentUser?._redirectEventId === id) return this._currentUser;
        if (this.redirectUser?._redirectEventId === id) return this.redirectUser;
        return null;
    }
    async _persistUserIfCurrent(user) {
        if (user === this.currentUser) return this.queue(async ()=>this.directlySetCurrentUser(user));
    }
    /** Notifies listeners only if the user is current */ _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) this.notifyAuthListeners();
    }
    _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
    }
    _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) this._currentUser._startProactiveRefresh();
    }
    _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) this._currentUser._stopProactiveRefresh();
    }
    /** Returns the current user cast as the internal type */ get _currentUser() {
        return this.currentUser;
    }
    notifyAuthListeners() {
        if (!this._isInitialized) return;
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = this.currentUser?.uid ?? null;
        if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
        }
    }
    registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) return ()=>{};
        const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        let isUnsubscribed = false;
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        // The callback needs to be called asynchronously per the spec.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        promise.then(()=>{
            if (isUnsubscribed) return;
            cb(this.currentUser);
        });
        if (typeof nextOrObserver === 'function') {
            const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
            return ()=>{
                isUnsubscribed = true;
                unsubscribe();
            };
        } else {
            const unsubscribe = subscription.addObserver(nextOrObserver);
            return ()=>{
                isUnsubscribed = true;
                unsubscribe();
            };
        }
    }
    /**
     * Unprotected (from race conditions) method to set the current user. This
     * should only be called from within a queued callback. This is necessary
     * because the queue shouldn't rely on another queued callback.
     */ async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) this._currentUser._stopProactiveRefresh();
        if (user && this.isProactiveRefreshEnabled) user._startProactiveRefresh();
        this.currentUser = user;
        if (user) await this.assertedPersistence.setCurrentUser(user);
        else await this.assertedPersistence.removeCurrentUser();
    }
    queue(action) {
        // In case something errors, the callback still should be called in order
        // to keep the promise chain alive
        this.operations = this.operations.then(action, action);
        return this.operations;
    }
    get assertedPersistence() {
        _assert(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.persistenceManager;
    }
    _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) return;
        this.frameworks.push(framework);
        // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
        // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
    }
    _getFrameworks() {
        return this.frameworks;
    }
    async _getAdditionalHeaders() {
        // Additional headers on every request
        const headers = {
            ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */ ]: this.clientVersion
        };
        if (this.app.options.appId) headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */ ] = this.app.options.appId;
        // If the heartbeat service exists, add the heartbeat string
        const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({
            optional: true
        })?.getHeartbeatsHeader();
        if (heartbeatsHeader) headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */ ] = heartbeatsHeader;
        // If the App Check service exists, add the App Check token in the headers
        const appCheckToken = await this._getAppCheckToken();
        if (appCheckToken) headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */ ] = appCheckToken;
        return headers;
    }
    async _getAppCheckToken() {
        if ((0, _app._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) return this.app.settings.appCheckToken;
        const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({
            optional: true
        })?.getToken();
        if (appCheckTokenResult?.error) // Context: appCheck.getToken() will never throw even if an error happened.
        // In the error case, a dummy token will be returned along with an error field describing
        // the error. In general, we shouldn't care about the error condition and just use
        // the token (actual or dummy) to send requests.
        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
        return appCheckTokenResult?.token;
    }
}
/**
 * Method to be used to cast down to our private implementation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */ function _castAuth(auth) {
    return (0, _util.getModularInstance)(auth);
}
/** Helper class to wrap subscriber logic */ class Subscription {
    constructor(auth){
        this.auth = auth;
        this.observer = null;
        this.addObserver = (0, _util.createSubscribe)((observer)=>this.observer = observer);
    }
    get next() {
        _assert(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.observer.next.bind(this.observer);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let externalJSProvider = {
    async loadJS () {
        throw new Error('Unable to load external scripts');
    },
    recaptchaV2Script: '',
    recaptchaEnterpriseScript: '',
    gapiScript: ''
};
function _setExternalJSProvider(p) {
    externalJSProvider = p;
}
function _loadJS(url) {
    return externalJSProvider.loadJS(url);
}
function _recaptchaV2ScriptUrl() {
    return externalJSProvider.recaptchaV2Script;
}
function _recaptchaEnterpriseScriptUrl() {
    return externalJSProvider.recaptchaEnterpriseScript;
}
function _gapiScriptUrl() {
    return externalJSProvider.gapiScript;
}
function _generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _SOLVE_TIME_MS = 500;
const _EXPIRATION_TIME_MS = 60000;
const _WIDGET_ID_START = 1000000000000;
class MockReCaptcha {
    constructor(auth){
        this.auth = auth;
        this.counter = _WIDGET_ID_START;
        this._widgets = new Map();
    }
    render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
    }
    reset(optWidgetId) {
        const id = optWidgetId || _WIDGET_ID_START;
        this._widgets.get(id)?.delete();
        this._widgets.delete(id);
    }
    getResponse(optWidgetId) {
        const id = optWidgetId || _WIDGET_ID_START;
        return this._widgets.get(id)?.getResponse() || '';
    }
    async execute(optWidgetId) {
        const id = optWidgetId || _WIDGET_ID_START;
        this._widgets.get(id)?.execute();
        return '';
    }
}
class MockGreCAPTCHATopLevel {
    constructor(){
        this.enterprise = new MockGreCAPTCHA();
    }
    ready(callback) {
        callback();
    }
    execute(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _siteKey, _options) {
        return Promise.resolve('token');
    }
    render(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _container, _parameters) {
        return '';
    }
}
class MockGreCAPTCHA {
    ready(callback) {
        callback();
    }
    execute(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _siteKey, _options) {
        return Promise.resolve('token');
    }
    render(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _container, _parameters) {
        return '';
    }
}
class MockWidget {
    constructor(containerOrId, appName, params){
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = ()=>{
            this.execute();
        };
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ , {
            appName
        });
        this.container = container;
        this.isVisible = this.params.size !== 'invisible';
        if (this.isVisible) this.execute();
        else this.container.addEventListener('click', this.clickHandler);
    }
    getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
    }
    delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        this.container.removeEventListener('click', this.clickHandler);
    }
    execute() {
        this.checkIfDeleted();
        if (this.timerId) return;
        this.timerId = window.setTimeout(()=>{
            this.responseToken = generateRandomAlphaNumericString(50);
            const { callback, 'expired-callback': expiredCallback } = this.params;
            if (callback) try {
                callback(this.responseToken);
            } catch (e) {}
            this.timerId = window.setTimeout(()=>{
                this.timerId = null;
                this.responseToken = null;
                if (expiredCallback) try {
                    expiredCallback();
                } catch (e) {}
                if (this.isVisible) this.execute();
            }, _EXPIRATION_TIME_MS);
        }, _SOLVE_TIME_MS);
    }
    checkIfDeleted() {
        if (this.deleted) throw new Error('reCAPTCHA mock was already deleted!');
    }
}
function generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for(let i = 0; i < len; i++)chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    return chars.join('');
}
/* eslint-disable @typescript-eslint/no-require-imports */ const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
const FAKE_TOKEN = 'NO_RECAPTCHA';
class RecaptchaEnterpriseVerifier {
    /**
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     */ constructor(authExtern){
        /**
         * Identifies the type of application verifier (e.g. "recaptcha-enterprise").
         */ this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
        this.auth = _castAuth(authExtern);
    }
    /**
     * Executes the verification process.
     *
     * @returns A Promise for a token that can be used to assert the validity of a request.
     */ async verify(action = 'verify', forceRefresh = false) {
        async function retrieveSiteKey(auth) {
            if (!forceRefresh) {
                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) return auth._agentRecaptchaConfig.siteKey;
                if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
            }
            return new Promise(async (resolve, reject)=>{
                getRecaptchaConfig(auth, {
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }).then((response)=>{
                    if (response.recaptchaKey === undefined) reject(new Error('recaptcha Enterprise site key undefined'));
                    else {
                        const config = new RecaptchaConfig(response);
                        if (auth.tenantId == null) auth._agentRecaptchaConfig = config;
                        else auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                        return resolve(config.siteKey);
                    }
                }).catch((error)=>{
                    reject(error);
                });
            });
        }
        function retrieveRecaptchaToken(siteKey, resolve, reject) {
            const grecaptcha = window.grecaptcha;
            if (isEnterprise(grecaptcha)) grecaptcha.enterprise.ready(()=>{
                grecaptcha.enterprise.execute(siteKey, {
                    action
                }).then((token)=>{
                    resolve(token);
                }).catch(()=>{
                    resolve(FAKE_TOKEN);
                });
            });
            else reject(Error('No reCAPTCHA enterprise script loaded.'));
        }
        // Returns Promise for a mock token when appVerificationDisabledForTesting is true.
        if (this.auth.settings.appVerificationDisabledForTesting) {
            const mockRecaptcha = new MockGreCAPTCHATopLevel();
            return mockRecaptcha.execute('siteKey', {
                action: 'verify'
            });
        }
        return new Promise((resolve, reject)=>{
            retrieveSiteKey(this.auth).then((siteKey)=>{
                if (!forceRefresh && isEnterprise(window.grecaptcha)) retrieveRecaptchaToken(siteKey, resolve, reject);
                else {
                    if (typeof window === 'undefined') {
                        reject(new Error('RecaptchaVerifier is only supported in browser'));
                        return;
                    }
                    let url = _recaptchaEnterpriseScriptUrl();
                    if (url.length !== 0) url += siteKey;
                    _loadJS(url).then(()=>{
                        retrieveRecaptchaToken(siteKey, resolve, reject);
                    }).catch((error)=>{
                        reject(error);
                    });
                }
            }).catch((error)=>{
                reject(error);
            });
        });
    }
}
async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {
    const verifier = new RecaptchaEnterpriseVerifier(auth);
    let captchaResponse;
    if (isFakeToken) captchaResponse = FAKE_TOKEN;
    else try {
        captchaResponse = await verifier.verify(action);
    } catch (error) {
        captchaResponse = await verifier.verify(action, true);
    }
    const newRequest = {
        ...request
    };
    if (action === "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */  || action === "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */ ) {
        if ('phoneEnrollmentInfo' in newRequest) {
            const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
            const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;
            Object.assign(newRequest, {
                'phoneEnrollmentInfo': {
                    phoneNumber,
                    recaptchaToken,
                    captchaResponse,
                    'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }
            });
        } else if ('phoneSignInInfo' in newRequest) {
            const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;
            Object.assign(newRequest, {
                'phoneSignInInfo': {
                    recaptchaToken,
                    captchaResponse,
                    'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }
            });
        }
        return newRequest;
    }
    if (!isCaptchaResp) Object.assign(newRequest, {
        captchaResponse
    });
    else Object.assign(newRequest, {
        'captchaResp': captchaResponse
    });
    Object.assign(newRequest, {
        'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    });
    Object.assign(newRequest, {
        'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
    });
    return newRequest;
}
async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {
    if (recaptchaAuthProvider === "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ ) {
        if (authInstance._getRecaptchaConfig()?.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ )) {
            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ );
            return actionMethod(authInstance, requestWithRecaptcha);
        } else return actionMethod(authInstance, request).catch(async (error)=>{
            if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ }`) {
                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
                const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ );
                return actionMethod(authInstance, requestWithRecaptcha);
            } else return Promise.reject(error);
        });
    } else if (recaptchaAuthProvider === "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ ) {
        if (authInstance._getRecaptchaConfig()?.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ )) {
            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);
            return actionMethod(authInstance, requestWithRecaptcha).catch(async (error)=>{
                if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ ) === "AUDIT" /* EnforcementState.AUDIT */ ) // AUDIT mode
                {
                    if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ }` || error.code === `auth/${"invalid-app-credential" /* AuthErrorCode.INVALID_APP_CREDENTIAL */ }`) {
                        console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);
                        // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token
                        // check fails.
                        // Fallback to reCAPTCHA v2 flow.
                        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false, true // isFakeToken
                        );
                        // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.
                        return actionMethod(authInstance, requestWithRecaptchaFields);
                    }
                }
                // ENFORCE mode or AUDIT mode with any other error.
                return Promise.reject(error);
            });
        } else {
            // Do reCAPTCHA v2 flow.
            const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false, true // isFakeToken
            );
            // This will call the PhoneApiCaller to fetch and inject v2 token.
            return actionMethod(authInstance, requestWithRecaptchaFields);
        }
    } else return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');
}
async function _initializeRecaptchaConfig(auth) {
    const authInternal = _castAuth(auth);
    const response = await getRecaptchaConfig(authInternal, {
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
        version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
    });
    const config = new RecaptchaConfig(response);
    if (authInternal.tenantId == null) authInternal._agentRecaptchaConfig = config;
    else authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;
    if (config.isAnyProviderEnabled()) {
        const verifier = new RecaptchaEnterpriseVerifier(authInternal);
        verifier.verify();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */ function initializeAuth(app, deps) {
    const provider = (0, _app._getProvider)(app, 'auth');
    if (provider.isInitialized()) {
        const auth = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if ((0, _util.deepEqual)(initialOptions, deps ?? {})) return auth;
        else _fail(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */ );
    }
    const auth = provider.initialize({
        options: deps
    });
    return auth;
}
function _initializeAuthInstance(auth, deps) {
    const persistence = deps?.persistence || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [
        persistence
    ]).map(_getInstance);
    if (deps?.errorMap) auth._updateErrorMap(deps.errorMap);
    // This promise is intended to float; auth initialization happens in the
    // background, meanwhile the auth object may be used by the app.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);
}
/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */ function connectAuthEmulator(auth, url, options) {
    const authInternal = _castAuth(auth);
    _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ );
    const disableWarnings = !!options?.disableWarnings;
    const protocol = extractProtocol(url);
    const { host, port } = extractHostAndPort(url);
    const portStr = port === null ? '' : `:${port}`;
    // Always replace path with "/" (even if input url had no path at all, or had a different one).
    const emulator = {
        url: `${protocol}//${host}${portStr}/`
    };
    const emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(':', ''),
        options: Object.freeze({
            disableWarnings
        })
    });
    // There are a few scenarios to guard against if the Auth instance has already started:
    if (!authInternal._canInitEmulator) {
        // Applications may not initialize the emulator for the first time if Auth has already started
        // to make network requests.
        _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ );
        // Applications may not alter the configuration of the emulator (aka pass a different config)
        // once Auth has started to make network requests.
        _assert((0, _util.deepEqual)(emulator, authInternal.config.emulator) && (0, _util.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ );
        // It's valid, however, to invoke connectAuthEmulator() after Auth has started making
        // connections, so long as the config matches the existing config. This results in a no-op.
        return;
    }
    authInternal.config.emulator = emulator;
    authInternal.emulatorConfig = emulatorConfig;
    authInternal.settings.appVerificationDisabledForTesting = true;
    // Workaround to get cookies in Firebase Studio
    if ((0, _util.isCloudWorkstation)(host)) {
        (0, _util.pingServer)(`${protocol}//${host}${portStr}`);
        (0, _util.updateEmulatorBanner)('Auth', true);
    } else if (!disableWarnings) emitEmulatorWarning();
}
function extractProtocol(url) {
    const protocolEnd = url.indexOf(':');
    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
    const protocol = extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
    if (!authority) return {
        host: '',
        port: null
    };
    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return {
            host,
            port: parsePort(hostAndPort.substr(host.length + 1))
        };
    } else {
        const [host, port] = hostAndPort.split(':');
        return {
            host,
            port: parsePort(port)
        };
    }
}
function parsePort(portStr) {
    if (!portStr) return null;
    const port = Number(portStr);
    if (isNaN(port)) return null;
    return port;
}
function emitEmulatorWarning() {
    function attachBanner() {
        const el = document.createElement('p');
        const sty = el.style;
        el.innerText = 'Running in emulator mode. Do not use with production credentials.';
        sty.position = 'fixed';
        sty.width = '100%';
        sty.backgroundColor = '#ffffff';
        sty.border = '.1em solid #000000';
        sty.color = '#b50000';
        sty.bottom = '0px';
        sty.left = '0px';
        sty.margin = '0px';
        sty.zIndex = '10000';
        sty.textAlign = 'center';
        el.classList.add('firebase-emulator-warning');
        document.body.appendChild(el);
    }
    if (typeof console !== 'undefined' && typeof console.info === 'function') console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
        if (document.readyState === 'loading') window.addEventListener('DOMContentLoaded', attachBanner);
        else attachBanner();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class AuthCredential {
    /** @internal */ constructor(/**
     * The authentication provider ID for the credential.
     *
     * @remarks
     * For example, 'facebook.com', or 'google.com'.
     */ providerId, /**
     * The authentication sign in method for the credential.
     *
     * @remarks
     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
     * identifier as returned in {@link fetchSignInMethodsForEmail}.
     */ signInMethod){
        this.providerId = providerId;
        this.signInMethod = signInMethod;
    }
    /**
     * Returns a JSON-serializable representation of this object.
     *
     * @returns a JSON-serializable representation of this object.
     */ toJSON() {
        return debugFail('not implemented');
    }
    /** @internal */ _getIdTokenResponse(_auth) {
        return debugFail('not implemented');
    }
    /** @internal */ _linkToIdToken(_auth, _idToken) {
        return debugFail('not implemented');
    }
    /** @internal */ _getReauthenticationResolver(_auth) {
        return debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function resetPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:resetPassword" /* Endpoint.RESET_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function updateEmailPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
// Used for linking an email/password account to an existing idToken. Uses the same request/response
// format as updateEmailPassword.
async function linkEmailPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signUp" /* Endpoint.SIGN_UP */ , request);
}
async function applyActionCode$1(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithPassword(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function sendOobCode(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:sendOobCode" /* Endpoint.SEND_OOB_CODE */ , _addTidIfNecessary(auth, request));
}
async function sendEmailVerification$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendPasswordResetEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendSignInLinkToEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function verifyAndChangeEmail(auth, request) {
    return sendOobCode(auth, request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithEmailLink$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
async function signInWithEmailLinkForLinking(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */ class EmailAuthCredential extends AuthCredential {
    /** @internal */ constructor(/** @internal */ _email, /** @internal */ _password, signInMethod, /** @internal */ _tenantId = null){
        super("password" /* ProviderId.PASSWORD */ , signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
    }
    /** @internal */ static _fromEmailAndPassword(email, password) {
        return new EmailAuthCredential(email, password, "password" /* SignInMethod.EMAIL_PASSWORD */ );
    }
    /** @internal */ static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new EmailAuthCredential(email, oobCode, "emailLink" /* SignInMethod.EMAIL_LINK */ , tenantId);
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
     *
     * @param json - Either `object` or the stringified representation of the object. When string is
     * provided, `JSON.parse` would be called first.
     *
     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        if (obj?.email && obj?.password) {
            if (obj.signInMethod === "password" /* SignInMethod.EMAIL_PASSWORD */ ) return this._fromEmailAndPassword(obj.email, obj.password);
            else if (obj.signInMethod === "emailLink" /* SignInMethod.EMAIL_LINK */ ) return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
        }
        return null;
    }
    /** @internal */ async _getIdTokenResponse(auth) {
        switch(this.signInMethod){
            case "password" /* SignInMethod.EMAIL_PASSWORD */ :
                const request = {
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password,
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                };
                return handleRecaptchaFlow(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */ , signInWithPassword, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
            case "emailLink" /* SignInMethod.EMAIL_LINK */ :
                return signInWithEmailLink$1(auth, {
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    /** @internal */ async _linkToIdToken(auth, idToken) {
        switch(this.signInMethod){
            case "password" /* SignInMethod.EMAIL_PASSWORD */ :
                const request = {
                    idToken,
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password,
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                };
                return handleRecaptchaFlow(auth, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */ , linkEmailPassword, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
            case "emailLink" /* SignInMethod.EMAIL_LINK */ :
                return signInWithEmailLinkForLinking(auth, {
                    idToken,
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithIdp(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class OAuthCredential extends AuthCredential {
    constructor(){
        super(...arguments);
        this.pendingToken = null;
    }
    /** @internal */ static _fromParams(params) {
        const cred = new OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
            // OAuth 2 and either ID token or access token.
            if (params.idToken) cred.idToken = params.idToken;
            if (params.accessToken) cred.accessToken = params.accessToken;
            // Add nonce if available and no pendingToken is present.
            if (params.nonce && !params.pendingToken) cred.nonce = params.nonce;
            if (params.pendingToken) cred.pendingToken = params.pendingToken;
        } else if (params.oauthToken && params.oauthTokenSecret) {
            // OAuth 1 and OAuth token with token secret
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
        } else _fail("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return cred;
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId, signInMethod, ...rest } = obj;
        if (!providerId || !signInMethod) return null;
        const cred = new OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || undefined;
        cred.accessToken = rest.accessToken || undefined;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    buildRequest() {
        const request = {
            requestUri: IDP_REQUEST_URI$1,
            returnSecureToken: true
        };
        if (this.pendingToken) request.pendingToken = this.pendingToken;
        else {
            const postBody = {};
            if (this.idToken) postBody['id_token'] = this.idToken;
            if (this.accessToken) postBody['access_token'] = this.accessToken;
            if (this.secret) postBody['oauth_token_secret'] = this.secret;
            postBody['providerId'] = this.providerId;
            if (this.nonce && !this.pendingToken) postBody['nonce'] = this.nonce;
            request.postBody = (0, _util.querystring)(postBody);
        }
        return request;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function sendPhoneVerificationCode(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:sendVerificationCode" /* Endpoint.SEND_VERIFICATION_CODE */ , _addTidIfNecessary(auth, request));
}
async function signInWithPhoneNumber$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
}
async function linkWithPhoneNumber$1(auth, request) {
    const response = await _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
    if (response.temporaryProof) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ , response);
    return response;
}
const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */ ]: "user-not-found" /* AuthErrorCode.USER_DELETED */ 
};
async function verifyPhoneNumberForExisting(auth, request) {
    const apiRequest = {
        ...request,
        operation: 'REAUTH'
    };
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */ class PhoneAuthCredential extends AuthCredential {
    constructor(params){
        super("phone" /* ProviderId.PHONE */ , "phone" /* SignInMethod.PHONE */ );
        this.params = params;
    }
    /** @internal */ static _fromVerification(verificationId, verificationCode) {
        return new PhoneAuthCredential({
            verificationId,
            verificationCode
        });
    }
    /** @internal */ static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new PhoneAuthCredential({
            phoneNumber,
            temporaryProof
        });
    }
    /** @internal */ _getIdTokenResponse(auth) {
        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        return linkWithPhoneNumber$1(auth, {
            idToken,
            ...this._makeVerificationRequest()
        });
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
    }
    /** @internal */ _makeVerificationRequest() {
        const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
        if (temporaryProof && phoneNumber) return {
            temporaryProof,
            phoneNumber
        };
        return {
            sessionInfo: verificationId,
            code: verificationCode
        };
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        const obj = {
            providerId: this.providerId
        };
        if (this.params.phoneNumber) obj.phoneNumber = this.params.phoneNumber;
        if (this.params.temporaryProof) obj.temporaryProof = this.params.temporaryProof;
        if (this.params.verificationCode) obj.verificationCode = this.params.verificationCode;
        if (this.params.verificationId) obj.verificationId = this.params.verificationId;
        return obj;
    }
    /** Generates a phone credential based on a plain object or a JSON string. */ static fromJSON(json) {
        if (typeof json === 'string') json = JSON.parse(json);
        const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) return null;
        return new PhoneAuthCredential({
            verificationId,
            verificationCode,
            phoneNumber,
            temporaryProof
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */ function parseMode(mode) {
    switch(mode){
        case 'recoverEmail':
            return "RECOVER_EMAIL" /* ActionCodeOperation.RECOVER_EMAIL */ ;
        case 'resetPassword':
            return "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */ ;
        case 'signIn':
            return "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ;
        case 'verifyEmail':
            return "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */ ;
        case 'verifyAndChangeEmail':
            return "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ;
        case 'revertSecondFactorAddition':
            return "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ ;
        default:
            return null;
    }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */ function parseDeepLink(url) {
    const link = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['link'];
    // Double link case (automatic redirect).
    const doubleDeepLink = link ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(link))['deep_link_id'] : null;
    // iOS custom scheme links.
    const iOSDeepLink = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['deep_link_id'];
    const iOSDoubleDeepLink = iOSDeepLink ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(iOSDeepLink))['link'] : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */ class ActionCodeURL {
    /**
     * @param actionLink - The link from which to extract the URL.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @internal
     */ constructor(actionLink){
        const searchParams = (0, _util.querystringDecode)((0, _util.extractQuerystring)(actionLink));
        const apiKey = searchParams["apiKey" /* QueryField.API_KEY */ ] ?? null;
        const code = searchParams["oobCode" /* QueryField.CODE */ ] ?? null;
        const operation = parseMode(searchParams["mode" /* QueryField.MODE */ ] ?? null);
        // Validate API key, code and mode.
        _assert(apiKey && code && operation, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = searchParams["continueUrl" /* QueryField.CONTINUE_URL */ ] ?? null;
        this.languageCode = searchParams["lang" /* QueryField.LANGUAGE_CODE */ ] ?? null;
        this.tenantId = searchParams["tenantId" /* QueryField.TENANT_ID */ ] ?? null;
    }
    /**
     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
     * otherwise returns null.
     *
     * @param link  - The email action link string.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @public
     */ static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
            return new ActionCodeURL(actionLink);
        } catch  {
            return null;
        }
    }
}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */ function parseActionCodeURL(link) {
    return ActionCodeURL.parseLink(link);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */ class EmailAuthProvider {
    constructor(){
        /**
         * Always set to {@link ProviderId}.PASSWORD, even for email link.
         */ this.providerId = EmailAuthProvider.PROVIDER_ID;
    }
    /**
     * Initialize an {@link AuthCredential} using an email and password.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credential(email, password);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * const userCredential = await signInWithEmailAndPassword(auth, email, password);
     * ```
     *
     * @param email - Email address.
     * @param password - User account password.
     * @returns The auth provider credential.
     */ static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
    }
    /**
     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
     * email link operation.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * await sendSignInLinkToEmail(auth, email);
     * // Obtain emailLink from user.
     * const userCredential = await signInWithEmailLink(auth, email, emailLink);
     * ```
     *
     * @param auth - The {@link Auth} instance used to verify the link.
     * @param email - Email address.
     * @param emailLink - Sign-in email link.
     * @returns - The auth provider credential.
     */ static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(actionCodeUrl, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
    }
}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */ EmailAuthProvider.PROVIDER_ID = "password" /* ProviderId.PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */ EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* SignInMethod.EMAIL_PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */ EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* SignInMethod.EMAIL_LINK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */ class FederatedAuthProvider {
    /**
     * Constructor for generic OAuth providers.
     *
     * @param providerId - Provider for which credentials should be generated.
     */ constructor(providerId){
        this.providerId = providerId;
        /** @internal */ this.defaultLanguageCode = null;
        /** @internal */ this.customParameters = {};
    }
    /**
     * Set the language gode.
     *
     * @param languageCode - language code
     */ setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
    }
    /**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
     * operations.
     *
     * @remarks
     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
     *
     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
     */ setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
    }
    /**
     * Retrieve the current list of {@link CustomParameters}.
     */ getCustomParameters() {
        return this.customParameters;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */ class BaseOAuthProvider extends FederatedAuthProvider {
    constructor(){
        super(...arguments);
        /** @internal */ this.scopes = [];
    }
    /**
     * Add an OAuth scope to the credential.
     *
     * @param scope - Provider OAuth scope to add.
     */ addScope(scope) {
        // If not already added, add scope to list.
        if (!this.scopes.includes(scope)) this.scopes.push(scope);
        return this;
    }
    /**
     * Retrieve the current list of OAuth scopes.
     */ getScopes() {
        return [
            ...this.scopes
        ];
    }
}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class OAuthProvider extends BaseOAuthProvider {
    /**
     * Creates an {@link OAuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        _assert('providerId' in obj && 'signInMethod' in obj, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return OAuthCredential._fromParams(obj);
    }
    /**
     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
     *
     * @remarks
     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
     * the raw nonce must match the nonce field in the ID token.
     *
     * @example
     * ```javascript
     * // `googleUser` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a `google.com` providerId.
     * const provider = new OAuthProvider('google.com');
     * const credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param params - Either the options object containing the ID token, access token and raw nonce
     * or the ID token string.
     */ credential(params) {
        return this._credential({
            ...params,
            nonce: params.rawNonce
        });
    }
    /** An internal credential method that accepts more permissive options */ _credential(params) {
        _assert(params.idToken || params.accessToken, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        // For OAuthCredential, sign in method is same as providerId.
        return OAuthCredential._fromParams({
            ...params,
            providerId: this.providerId,
            signInMethod: this.providerId
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
    }
    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;
        if (!providerId) return null;
        try {
            return new OAuthProvider(providerId)._credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                nonce,
                pendingToken
            });
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class FacebookAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("facebook.com" /* ProviderId.FACEBOOK */ );
    }
    /**
     * Creates a credential for Facebook.
     *
     * @example
     * ```javascript
     * // `event` from the Facebook auth.authResponseChange callback.
     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param accessToken - Facebook access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: FacebookAuthProvider.PROVIDER_ID,
            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch  {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */ FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */ ;
/** Always set to {@link ProviderId}.FACEBOOK. */ FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class GoogleAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("google.com" /* ProviderId.GOOGLE */ );
        this.addScope('profile');
    }
    /**
     * Creates a credential for Google. At least one of ID token and access token is required.
     *
     * @example
     * ```javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param idToken - Google ID token.
     * @param accessToken - Google access token.
     */ static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
            providerId: GoogleAuthProvider.PROVIDER_ID,
            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
            idToken,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthIdToken, oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) // This could be an oauth 1 credential or a phone credential
        return null;
        try {
            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch  {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GOOGLE. */ GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */ ;
/** Always set to {@link ProviderId}.GOOGLE. */ GoogleAuthProvider.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a GitHub Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a GitHub Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class GithubAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("github.com" /* ProviderId.GITHUB */ );
    }
    /**
     * Creates a credential for GitHub.
     *
     * @param accessToken - GitHub access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: GithubAuthProvider.PROVIDER_ID,
            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GithubAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch  {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GITHUB. */ GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */ ;
/** Always set to {@link ProviderId}.GITHUB. */ GithubAuthProvider.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI = 'http://localhost';
/**
 * @public
 */ class SAMLAuthCredential extends AuthCredential {
    /** @internal */ constructor(providerId, pendingToken){
        super(providerId, providerId);
        this.pendingToken = pendingToken;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId, signInMethod, pendingToken } = obj;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) return null;
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    /**
     * Helper static method to avoid exposing the constructor to end users.
     *
     * @internal
     */ static _create(providerId, pendingToken) {
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    buildRequest() {
        return {
            requestUri: IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
        };
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const SAML_PROVIDER_PREFIX = 'saml.';
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */ class SAMLAuthProvider extends FederatedAuthProvider {
    /**
     * Constructor. The providerId must start with "saml."
     * @param providerId - SAML provider ID.
     */ constructor(providerId){
        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        super(providerId);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential} after a
     * successful SAML flow completes.
     *
     * @remarks
     *
     * For example, to get an {@link AuthCredential}, you could write the
     * following code:
     *
     * ```js
     * const userCredential = await signInWithPopup(auth, samlProvider);
     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
     * ```
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
    }
    /**
     * Creates an {@link AuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const credential = SAMLAuthCredential.fromJSON(json);
        _assert(credential, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return credential;
    }
    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { pendingToken, providerId } = tokenResponse;
        if (!pendingToken || !providerId) return null;
        try {
            return SAMLAuthCredential._create(providerId, pendingToken);
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */ class TwitterAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("twitter.com" /* ProviderId.TWITTER */ );
    }
    /**
     * Creates a credential for Twitter.
     *
     * @param token - Twitter access token.
     * @param secret - Twitter secret.
     */ static credential(token, secret) {
        return OAuthCredential._fromParams({
            providerId: TwitterAuthProvider.PROVIDER_ID,
            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) return null;
        try {
            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch  {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.TWITTER. */ TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */ ;
/** Always set to {@link ProviderId}.TWITTER. */ TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signUp(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signUp" /* Endpoint.SIGN_UP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserCredentialImpl {
    constructor(params){
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
    }
    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
        });
        return userCred;
    }
    static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(response, /* reload */ true);
        const providerId = providerIdForResponse(response);
        return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
        });
    }
}
function providerIdForResponse(response) {
    if (response.providerId) return response.providerId;
    if ('phoneNumber' in response) return "phone" /* ProviderId.PHONE */ ;
    return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ async function signInAnonymously(auth) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    await authInternal._initializationPromise;
    if (authInternal.currentUser?.isAnonymous) // If an anonymous user is already signed in, no need to sign them in again.
    return new UserCredentialImpl({
        user: authInternal.currentUser,
        providerId: null,
        operationType: "signIn" /* OperationType.SIGN_IN */ 
    });
    const response = await signUp(authInternal, {
        returnSecureToken: true
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorError extends (0, _util.FirebaseError) {
    constructor(auth, error, operationType, user){
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, MultiFactorError.prototype);
        this.customData = {
            appName: auth.name,
            tenantId: auth.tenantId ?? undefined,
            _serverResponse: error.customData._serverResponse,
            operationType
        };
    }
    static _fromErrorAndOperation(auth, error, operationType, user) {
        return new MultiFactorError(auth, error, operationType, user);
    }
}
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
    return idTokenProvider.catch((error)=>{
        if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ }`) throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */ function providerDataAsNames(providerData) {
    return new Set(providerData.map(({ providerId })=>providerId).filter((pid)=>!!pid));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */ async function unlink(user, providerId) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [
            providerId
        ]
    });
    const providersLeft = providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter((pd)=>providersLeft.has(pd.providerId));
    if (!providersLeft.has("phone" /* ProviderId.PHONE */ )) userInternal.phoneNumber = null;
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
}
async function _link$1(user, credential, bypassAuthState = false) {
    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */ , response);
}
async function _assertLinkedStatus(expected, user, provider) {
    await _reloadWithoutSaving(user);
    const providerIds = providerDataAsNames(user.providerData);
    const code = expected === false ? "provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */  : "no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */ ;
    _assert(providerIds.has(provider) === expected, user.auth, code);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reauthenticate(user, credential, bypassAuthState = false) {
    const { auth } = user;
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */ ;
    try {
        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        _assert(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const parsed = _parseToken(response.idToken);
        _assert(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const { sub: localId } = parsed;
        _assert(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */ );
        return UserCredentialImpl._forOperation(user, operationType, response);
    } catch (e) {
        // Convert user deleted error into user mismatch
        if (e?.code === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */ }`) _fail(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */ );
        throw e;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _signInWithCredential(auth, credential, bypassAuthState = false) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const operationType = "signIn" /* OperationType.SIGN_IN */ ;
    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
    if (!bypassAuthState) await auth._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */ async function signInWithCredential(auth, credential) {
    return _signInWithCredential(_castAuth(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function linkWithCredential(user, credential) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(false, userInternal, credential.providerId);
    return _link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error
 * or a `TOKEN_EXPIRED` error.
 *
 * This method is not supported on any {@link User} signed in by {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function reauthenticateWithCredential(user, credential) {
    return _reauthenticate((0, _util.getModularInstance)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithCustomToken$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithCustomToken" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */ async function signInWithCustomToken(auth, customToken) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    const response = await signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
    });
    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorInfoImpl {
    constructor(factorId, response){
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
    }
    static _fromServerResponse(auth, enrollment) {
        if ('phoneInfo' in enrollment) return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        else if ('totpInfo' in enrollment) return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        return _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
}
class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {
    constructor(response){
        super("phone" /* FactorId.PHONE */ , response);
        this.phoneNumber = response.phoneInfo;
    }
    static _fromServerResponse(_auth, enrollment) {
        return new PhoneMultiFactorInfoImpl(enrollment);
    }
}
class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {
    constructor(response){
        super("totp" /* FactorId.TOTP */ , response);
    }
    static _fromServerResponse(_auth, enrollment) {
        return new TotpMultiFactorInfoImpl(enrollment);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
    _assert(actionCodeSettings.url?.length > 0, auth, "invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */ );
    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ );
    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, "invalid-hosting-link-domain" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */ );
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.linkDomain = actionCodeSettings.linkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ );
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
        _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ );
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates the password policy cached in the {@link Auth} instance if a policy is already
 * cached for the project or tenant.
 *
 * @remarks
 * We only fetch the password policy if the password did not meet policy requirements and
 * there is an existing policy cached. A developer must call validatePassword at least
 * once for the cache to be automatically updated.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @private
 */ async function recachePasswordPolicy(auth) {
    const authInternal = _castAuth(auth);
    if (authInternal._getPasswordPolicyInternal()) await authInternal._updatePasswordPolicy();
}
/**
 * Sends a password reset email to the given email address. This method does not throw an error when
 * there's no user account with the given email address and
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
    const authInternal = _castAuth(auth);
    const request = {
        requestType: "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */ ,
        email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
    await handleRecaptchaFlow(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ , sendPasswordResetEmail$1, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */ async function confirmPasswordReset(auth, oobCode, newPassword) {
    await resetPassword((0, _util.getModularInstance)(auth), {
        oobCode,
        newPassword
    }).catch(async (error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) recachePasswordPolicy(auth);
        throw error;
    });
// Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function applyActionCode(auth, oobCode) {
    await applyActionCode$1((0, _util.getModularInstance)(auth), {
        oobCode
    });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function checkActionCode(auth, oobCode) {
    const authModular = (0, _util.getModularInstance)(auth);
    const response = await resetPassword(authModular, {
        oobCode
    });
    // Email could be empty only if the request type is EMAIL_SIGNIN or
    // VERIFY_AND_CHANGE_EMAIL.
    // New email should not be empty if the request type is
    // VERIFY_AND_CHANGE_EMAIL.
    // Multi-factor info could not be empty if the request type is
    // REVERT_SECOND_FACTOR_ADDITION.
    const operation = response.requestType;
    _assert(operation, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    switch(operation){
        case "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ :
            break;
        case "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ :
            _assert(response.newEmail, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
            break;
        case "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ :
            _assert(response.mfaInfo, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        // fall through
        default:
            _assert(response.email, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
    // The multi-factor info for revert second factor addition
    let multiFactorInfo = null;
    if (response.mfaInfo) multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
    return {
        data: {
            email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.newEmail : response.email) || null,
            previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.email : response.newEmail) || null,
            multiFactorInfo
        },
        operation
    };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */ async function verifyPasswordResetCode(auth, code) {
    const { data } = await checkActionCode((0, _util.getModularInstance)(auth), code);
    // Email should always be present since a code was sent to it
    return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * This method is not supported on {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */ async function createUserWithEmailAndPassword(auth, email, password) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    const request = {
        returnSecureToken: true,
        email,
        password,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    const signUpResponse = handleRecaptchaFlow(authInternal, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */ , signUp, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
    const response = await signUpResponse.catch((error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) recachePasswordPolicy(auth);
        throw error;
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match. When
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled, this method fails with "auth/invalid-credential" in case of an invalid
 * email/password.
 *
 * This method is not supported on {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */ function signInWithEmailAndPassword(auth, email, password) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    return signInWithCredential((0, _util.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async (error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) recachePasswordPolicy(auth);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
    const authInternal = _castAuth(auth);
    const request = {
        requestType: "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ,
        email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    function setActionCodeSettings(request, actionCodeSettings) {
        _assert(actionCodeSettings.handleCodeInApp, authInternal, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        if (actionCodeSettings) _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
    }
    setActionCodeSettings(request, actionCodeSettings);
    await handleRecaptchaFlow(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ , sendSignInLinkToEmail$1, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ function isSignInWithEmailLink(auth, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    return actionCodeUrl?.operation === "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ async function signInWithEmailLink(auth, email, emailLink) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authModular = (0, _util.getModularInstance)(auth);
    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
    // Check if the tenant ID in the email link matches the tenant ID on Auth
    // instance.
    _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ );
    return signInWithCredential(authModular, credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function createAuthUri(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:createAuthUri" /* Endpoint.CREATE_AUTH_URI */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Gets the list of possible sign in methods for the given email address. This method returns an
 * empty list when
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled, irrespective of the number of authentication methods available for the given email.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * Deprecated. Migrating off of this method is recommended as a security best-practice.
 * Learn more in the Identity Platform documentation for
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.
 * @public
 */ async function fetchSignInMethodsForEmail(auth, email) {
    // createAuthUri returns an error if continue URI is not http or https.
    // For environments like Cordova, Chrome extensions, native frameworks, file
    // systems, etc, use http://localhost as continue URL.
    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
    const request = {
        identifier: email,
        continueUri
    };
    const { signinMethods } = await createAuthUri((0, _util.getModularInstance)(auth), request);
    return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendEmailVerification(user, actionCodeSettings) {
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */ ,
        idToken
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email } = await sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) await user.reload();
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ,
        idToken,
        newEmail
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email } = await verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) // If the local copy of the email on user is outdated, reload the
    // user.
    await user.reload();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function updateProfile$1(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */ async function updateProfile(user, { displayName, photoURL: photoUrl }) {
    if (displayName === undefined && photoUrl === undefined) return;
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
        idToken,
        displayName,
        photoUrl,
        returnSecureToken: true
    };
    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    // Update the password provider as well
    const passwordProvider = userInternal.providerData.find(({ providerId })=>providerId === "password" /* ProviderId.PASSWORD */ );
    if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * This method is not supported on any {@link User} signed in by {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * Throws "auth/operation-not-allowed" error when
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled.
 * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.
 *
 * @public
 */ function updateEmail(user, newEmail) {
    const userInternal = (0, _util.getModularInstance)(user);
    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    return updateEmailOrPassword(userInternal, newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */ function updatePassword(user, newPassword) {
    return updateEmailOrPassword((0, _util.getModularInstance)(user), null, newPassword);
}
async function updateEmailOrPassword(user, email, password) {
    const { auth } = user;
    const idToken = await user.getIdToken();
    const request = {
        idToken,
        returnSecureToken: true
    };
    if (email) request.email = email;
    if (password) request.password = password;
    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
    await user._updateTokensIfNecessary(response, /* reload */ true);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */ function _fromIdTokenResponse(idTokenResponse) {
    if (!idTokenResponse) return null;
    const { providerId } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* IdTokenResponseKind.SignupNewUser */ ;
    if (!providerId && idTokenResponse?.idToken) {
        const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];
        if (signInProvider) {
            const filteredProviderId = signInProvider !== "anonymous" /* ProviderId.ANONYMOUS */  && signInProvider !== "custom" /* ProviderId.CUSTOM */  ? signInProvider : null;
            // Uses generic class in accordance with the legacy SDK.
            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
    }
    if (!providerId) return null;
    switch(providerId){
        case "facebook.com" /* ProviderId.FACEBOOK */ :
            return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com" /* ProviderId.GITHUB */ :
            return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com" /* ProviderId.GOOGLE */ :
            return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com" /* ProviderId.TWITTER */ :
            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom" /* ProviderId.CUSTOM */ :
        case "anonymous" /* ProviderId.ANONYMOUS */ :
            return new GenericAdditionalUserInfo(isNewUser, null);
        default:
            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
}
class GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile = {}){
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
    }
}
class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile, username){
        super(isNewUser, providerId, profile);
        this.username = username;
    }
}
class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "facebook.com" /* ProviderId.FACEBOOK */ , profile);
    }
}
class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile){
        super(isNewUser, "github.com" /* ProviderId.GITHUB */ , profile, typeof profile?.login === 'string' ? profile?.login : null);
    }
}
class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "google.com" /* ProviderId.GOOGLE */ , profile);
    }
}
class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile, screenName){
        super(isNewUser, "twitter.com" /* ProviderId.TWITTER */ , profile, screenName);
    }
}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */ function getAdditionalUserInfo(userCredential) {
    const { user, _tokenResponse } = userCredential;
    if (user.isAnonymous && !_tokenResponse) // Handle the special case where signInAnonymously() gets called twice.
    // No network call is made so there's nothing to actually fill this in
    return {
        providerId: null,
        isNewUser: false,
        profile: null
    };
    return _fromIdTokenResponse(_tokenResponse);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Non-optional auth methods.
/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */ function setPersistence(auth, persistence) {
    return (0, _util.getModularInstance)(auth).setPersistence(persistence);
}
/**
 * Loads the reCAPTCHA configuration into the `Auth` instance.
 *
 * @remarks
 * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA
 * verification flow should be triggered for each auth provider, into the
 * current Auth session.
 *
 * If initializeRecaptchaConfig() is not invoked, the auth flow will always start
 * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA
 * verification, the SDK will transparently load the reCAPTCHA config and restart the
 * auth flows.
 *
 * Thus, by calling this optional method, you will reduce the latency of future auth flows.
 * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.
 *
 * This method does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * initializeRecaptchaConfig(auth);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function initializeRecaptchaConfig(auth) {
    return _initializeRecaptchaConfig(auth);
}
/**
 * Validates the password against the password policy configured for the project or tenant.
 *
 * @remarks
 * If no tenant ID is set on the `Auth` instance, then this method will use the password
 * policy configured for the project. Otherwise, this method will use the policy configured
 * for the tenant. If a password policy has not been configured, then the default policy
 * configured for all projects will be used.
 *
 * If an auth flow fails because a submitted password does not meet the password policy
 * requirements and this method has previously been called, then this method will use the
 * most recent policy available when called again.
 *
 * @example
 * ```javascript
 * validatePassword(auth, 'some-password');
 * ```
 *
 * @param auth The {@link Auth} instance.
 * @param password The password to validate.
 *
 * @public
 */ async function validatePassword(auth, password) {
    const authInternal = _castAuth(auth);
    return authInternal.validatePassword(password);
}
/**
 * Adds an observer for changes to the signed-in user's ID token.
 *
 * @remarks
 * This includes sign-in, sign-out, and token refresh events.
 * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function onIdTokenChanged(auth, nextOrObserver, error, completed) {
    return (0, _util.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds a blocking callback that runs before an auth state change
 * sets a new user.
 *
 * @param auth - The {@link Auth} instance.
 * @param callback - callback triggered before new user value is set.
 *   If this throws, it blocks the user from being set.
 * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
 *   callback throws, allowing you to undo any side effects.
 */ function beforeAuthStateChanged(auth, callback, onAbort) {
    return (0, _util.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function onAuthStateChanged(auth, nextOrObserver, error, completed) {
    return (0, _util.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function useDeviceLanguage(auth) {
    (0, _util.getModularInstance)(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */ function updateCurrentUser(auth, user) {
    return (0, _util.getModularInstance)(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @remarks
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function signOut(auth) {
    return (0, _util.getModularInstance)(auth).signOut();
}
/**
 * Revokes the given access token. Currently only supports Apple OAuth access tokens.
 *
 * @param auth - The {@link Auth} instance.
 * @param token - The Apple OAuth access token.
 *
 * @public
 */ function revokeAccessToken(auth, token) {
    const authInternal = _castAuth(auth);
    return authInternal.revokeAccessToken(token);
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */ async function deleteUser(user) {
    return (0, _util.getModularInstance)(user).delete();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorSessionImpl {
    constructor(type, credential, user){
        this.type = type;
        this.credential = credential;
        this.user = user;
    }
    static _fromIdtoken(idToken, user) {
        return new MultiFactorSessionImpl("enroll" /* MultiFactorSessionType.ENROLL */ , idToken, user);
    }
    static _fromMfaPendingCredential(mfaPendingCredential) {
        return new MultiFactorSessionImpl("signin" /* MultiFactorSessionType.SIGN_IN */ , mfaPendingCredential);
    }
    toJSON() {
        const key = this.type === "enroll" /* MultiFactorSessionType.ENROLL */  ? 'idToken' : 'pendingCredential';
        return {
            multiFactorSession: {
                [key]: this.credential
            }
        };
    }
    static fromJSON(obj) {
        if (obj?.multiFactorSession) {
            if (obj.multiFactorSession?.pendingCredential) return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            else if (obj.multiFactorSession?.idToken) return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
        }
        return null;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorResolverImpl {
    constructor(session, hints, signInResolver){
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
    }
    /** @internal */ static _fromError(authExtern, error) {
        const auth = _castAuth(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
        _assert(serverResponse.mfaPendingCredential, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new MultiFactorResolverImpl(session, hints, async (assertion)=>{
            const mfaResponse = await assertion._process(auth, session);
            // Clear out the unneeded fields from the old login response
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            // Use in the new token & refresh token in the old response
            const idTokenResponse = {
                ...serverResponse,
                idToken: mfaResponse.idToken,
                refreshToken: mfaResponse.refreshToken
            };
            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
            switch(error.operationType){
                case "signIn" /* OperationType.SIGN_IN */ :
                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                    await auth._updateCurrentUser(userCredential.user);
                    return userCredential;
                case "reauthenticate" /* OperationType.REAUTHENTICATE */ :
                    _assert(error.user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                default:
                    _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
            }
        });
    }
    async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
    }
}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */ function getMultiFactorResolver(auth, error) {
    const authModular = (0, _util.getModularInstance)(auth);
    const errorInternal = error;
    _assert(error.customData.operationType, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function finalizeEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function startEnrollTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function finalizeEnrollTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function withdrawMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:withdraw" /* Endpoint.WITHDRAW_MFA */ , _addTidIfNecessary(auth, request));
}
class MultiFactorUserImpl {
    constructor(user){
        this.user = user;
        this.enrolledFactors = [];
        user._onReload((userInfo)=>{
            if (userInfo.mfaInfo) this.enrolledFactors = userInfo.mfaInfo.map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
        });
    }
    static _fromUser(user) {
        return new MultiFactorUserImpl(user);
    }
    async getSession() {
        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);
    }
    async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = await this.getSession();
        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        // New tokens will be issued after enrollment of the new second factors.
        // They need to be updated on the user.
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        // The user needs to be reloaded to get the new multi-factor information
        // from server. USER_RELOADED event will be triggered and `enrolledFactors`
        // will be updated.
        return this.user.reload();
    }
    async unenroll(infoOrUid) {
        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        try {
            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                idToken,
                mfaEnrollmentId
            }));
            // Remove the second factor from the user's list.
            this.enrolledFactors = this.enrolledFactors.filter(({ uid })=>uid !== mfaEnrollmentId);
            // Depending on whether the backend decided to revoke the user's session,
            // the tokenResponse may be empty. If the tokens were not updated (and they
            // are now invalid), reloading the user will discover this and invalidate
            // the user's state accordingly.
            await this.user._updateTokensIfNecessary(idTokenResponse);
            await this.user.reload();
        } catch (e) {
            throw e;
        }
    }
}
const multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */ function multiFactor(user) {
    const userModular = (0, _util.getModularInstance)(user);
    if (!multiFactorUserCache.has(userModular)) multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
    return multiFactorUserCache.get(userModular);
}
const STORAGE_AVAILABLE_KEY = '__sak';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class BrowserPersistenceClass {
    constructor(storageRetriever, type){
        this.storageRetriever = storageRetriever;
        this.type = type;
    }
    _isAvailable() {
        try {
            if (!this.storage) return Promise.resolve(false);
            this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
            this.storage.removeItem(STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
        } catch  {
            return Promise.resolve(false);
        }
    }
    _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
    }
    _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
    }
    _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
    }
    get storage() {
        return this.storageRetriever();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The polling period in case events are not supported
const _POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class BrowserLocalPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.localStorage, "LOCAL" /* PersistenceType.LOCAL */ );
        this.boundEventHandler = (event, poll)=>this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        // Whether to use polling instead of depending on window events
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
    }
    forAllChangedKeys(cb) {
        // Check all keys with listeners on them.
        for (const key of Object.keys(this.listeners)){
            // Get value from localStorage.
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            // If local map value does not match, trigger listener with storage event.
            // Differentiate this simulated event from the real storage event.
            if (newValue !== oldValue) cb(key, oldValue, newValue);
        }
    }
    onStorageEvent(event, poll = false) {
        // Key would be null in some situations, like when localStorage is cleared
        if (!event.key) {
            this.forAllChangedKeys((key, _oldValue, newValue)=>{
                this.notifyListeners(key, newValue);
            });
            return;
        }
        const key = event.key;
        // Check the mechanism how this event was detected.
        // The first event will dictate the mechanism to be used.
        if (poll) // Environment detects storage changes via polling.
        // Remove storage event listener to prevent possible event duplication.
        this.detachListener();
        else // Environment detects storage changes via storage event listener.
        // Remove polling listener to prevent possible event duplication.
        this.stopPolling();
        const triggerListeners = ()=>{
            // Keep local map up to date in case storage event is triggered before
            // poll.
            const storedValue = this.storage.getItem(key);
            if (!poll && this.localCache[key] === storedValue) // Real storage event which has already been detected, do nothing.
            // This seems to trigger in some IE browsers for some reason.
            return;
            this.notifyListeners(key, storedValue);
        };
        const storedValue = this.storage.getItem(key);
        if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) // IE 10 has this weird bug where a storage event would trigger with the
        // correct key, oldValue and newValue but localStorage.getItem(key) does
        // not yield the updated value until a few milliseconds. This ensures
        // this recovers from that situation.
        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        else triggerListeners();
    }
    notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(value ? JSON.parse(value) : value);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(()=>{
            this.forAllChangedKeys((key, oldValue, newValue)=>{
                this.onStorageEvent(new StorageEvent('storage', {
                    key,
                    oldValue,
                    newValue
                }), /* poll */ true);
            });
        }, _POLLING_INTERVAL_MS$1);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    attachListener() {
        window.addEventListener('storage', this.boundEventHandler);
    }
    detachListener() {
        window.removeEventListener('storage', this.boundEventHandler);
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            // Whether browser can detect storage event when it had already been pushed to the background.
            // This may happen in some mobile browsers. A localStorage change in the foreground window
            // will not be detected in the background window via the storage event.
            // This was detected in iOS 7.x mobile browsers
            if (this.fallbackToPolling) this.startPolling();
            else this.attachListener();
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
        }
    }
    // Update local cache on base operations:
    async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
    }
    async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
    }
    async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
    }
}
BrowserLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserLocalPersistence = BrowserLocalPersistence;
/**
 * @license
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const POLLING_INTERVAL_MS = 1000;
// Pull a cookie value from document.cookie
function getDocumentCookie(name) {
    const escapedName = name.replace(/[\\^$.*+?()[\]{}|]/g, '\\$&');
    const matcher = RegExp(`${escapedName}=([^;]+)`);
    return document.cookie.match(matcher)?.[1] ?? null;
}
// Produce a sanitized cookie name from the persistence key
function getCookieName(key) {
    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has
    // desirable security properties, so lets use a different cookie name while in dev-mode.
    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.
    const isDevMode = window.location.protocol === 'http:';
    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;
}
class CookiePersistence {
    constructor(){
        this.type = "COOKIE" /* PersistenceType.COOKIE */ ;
        this.listenerUnsubscribes = new Map();
    }
    // used to get the URL to the backend to proxy to
    _getFinalTarget(originalUrl) {
        const url = new URL(`${window.location.origin}/__cookies__`);
        url.searchParams.set('finalTarget', originalUrl);
        return url;
    }
    // To be a usable persistence method in a chain browserCookiePersistence ensures that
    // prerequisites have been met, namely that we're in a secureContext, navigator and document are
    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.
    async _isAvailable() {
        if (typeof isSecureContext === 'boolean' && !isSecureContext) return false;
        if (typeof navigator === 'undefined' || typeof document === 'undefined') return false;
        return navigator.cookieEnabled ?? true;
    }
    // Set should be a noop as we expect middleware to handle this
    async _set(_key, _value) {
        return;
    }
    // Attempt to get the cookie from cookieStore, fallback to document.cookie
    async _get(key) {
        if (!this._isAvailable()) return null;
        const name = getCookieName(key);
        if (window.cookieStore) {
            const cookie = await window.cookieStore.get(name);
            return cookie?.value;
        }
        return getDocumentCookie(name);
    }
    // Log out by overriding the idToken with a sentinel value of ""
    async _remove(key) {
        if (!this._isAvailable()) return;
        // To make sure we don't hit signout over and over again, only do this operation if we need to
        // with the logout sentinel value of "" this can cause race conditions. Unnecessary set-cookie
        // headers will reduce CDN hit rates too.
        const existingValue = await this._get(key);
        if (!existingValue) return;
        const name = getCookieName(key);
        document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;
        await fetch(`/__cookies__`, {
            method: 'DELETE'
        }).catch(()=>undefined);
    }
    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie
    _addListener(key, listener) {
        if (!this._isAvailable()) return;
        const name = getCookieName(key);
        if (window.cookieStore) {
            const cb = (event)=>{
                const changedCookie = event.changed.find((change)=>change.name === name);
                if (changedCookie) listener(changedCookie.value);
                const deletedCookie = event.deleted.find((change)=>change.name === name);
                if (deletedCookie) listener(null);
            };
            const unsubscribe = ()=>window.cookieStore.removeEventListener('change', cb);
            this.listenerUnsubscribes.set(listener, unsubscribe);
            return window.cookieStore.addEventListener('change', cb);
        }
        let lastValue = getDocumentCookie(name);
        const interval = setInterval(()=>{
            const currentValue = getDocumentCookie(name);
            if (currentValue !== lastValue) {
                listener(currentValue);
                lastValue = currentValue;
            }
        }, POLLING_INTERVAL_MS);
        const unsubscribe = ()=>clearInterval(interval);
        this.listenerUnsubscribes.set(listener, unsubscribe);
    }
    _removeListener(_key, listener) {
        const unsubscribe = this.listenerUnsubscribes.get(listener);
        if (!unsubscribe) return;
        unsubscribe();
        this.listenerUnsubscribes.delete(listener);
    }
}
CookiePersistence.type = 'COOKIE';
/**
 * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in
 * applications leveraging hybrid rendering and middleware.
 *
 * @remarks This persistence method requires companion middleware to function, such as that provided
 * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for
 * NextJS.
 * @beta
 */ const browserCookiePersistence = CookiePersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class BrowserSessionPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.sessionStorage, "SESSION" /* PersistenceType.SESSION */ );
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
}
BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserSessionPersistence = BrowserSessionPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */ function _allSettled(promises) {
    return Promise.all(promises.map(async (promise)=>{
        try {
            const value = await promise;
            return {
                fulfilled: true,
                value
            };
        } catch (reason) {
            return {
                fulfilled: false,
                reason
            };
        }
    }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface class for receiving messages.
 *
 */ class Receiver {
    constructor(eventTarget){
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
    }
    /**
     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
     *
     * @param eventTarget - An event target (such as window or self) through which the underlying
     * messages will be received.
     */ static _getInstance(eventTarget) {
        // The results are stored in an array since objects can't be keys for other
        // objects. In addition, setting a unique property on an event target as a
        // hash map key may not be allowed due to CORS restrictions.
        const existingInstance = this.receivers.find((receiver)=>receiver.isListeningto(eventTarget));
        if (existingInstance) return existingInstance;
        const newInstance = new Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
    }
    isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
    }
    /**
     * Fans out a MessageEvent to the appropriate listeners.
     *
     * @remarks
     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
     * finished processing.
     *
     * @param event - The MessageEvent.
     *
     */ async handleEvent(event) {
        const messageEvent = event;
        const { eventId, eventType, data } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!handlers?.size) return;
        messageEvent.ports[0].postMessage({
            status: "ack" /* _Status.ACK */ ,
            eventId,
            eventType
        });
        const promises = Array.from(handlers).map(async (handler)=>handler(messageEvent.origin, data));
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
            status: "done" /* _Status.DONE */ ,
            eventId,
            eventType,
            response
        });
    }
    /**
     * Subscribe an event handler for a particular event.
     *
     * @param eventType - Event name to subscribe to.
     * @param eventHandler - The event handler which should receive the events.
     *
     */ _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.addEventListener('message', this.boundEventHandler);
        if (!this.handlersMap[eventType]) this.handlersMap[eventType] = new Set();
        this.handlersMap[eventType].add(eventHandler);
    }
    /**
     * Unsubscribe an event handler from a particular event.
     *
     * @param eventType - Event name to unsubscribe from.
     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
     *
     */ _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) this.handlersMap[eventType].delete(eventHandler);
        if (!eventHandler || this.handlersMap[eventType].size === 0) delete this.handlersMap[eventType];
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.removeEventListener('message', this.boundEventHandler);
    }
}
Receiver.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _generateEventId(prefix = '', digits = 10) {
    let random = '';
    for(let i = 0; i < digits; i++)random += Math.floor(Math.random() * 10);
    return prefix + random;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface for sending messages and waiting for a completion response.
 *
 */ class Sender {
    constructor(target){
        this.target = target;
        this.handlers = new Set();
    }
    /**
     * Unsubscribe the handler and remove it from our tracking Set.
     *
     * @param handler - The handler to unsubscribe.
     */ removeMessageHandler(handler) {
        if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
            handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
    }
    /**
     * Send a message to the Receiver located at {@link target}.
     *
     * @remarks
     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
     * receiver has had a chance to fully process the event.
     *
     * @param eventType - Type of event to send.
     * @param data - The payload of the event.
     * @param timeout - Timeout for waiting on an ACK from the receiver.
     *
     * @returns An array of settled promises from all the handlers that were listening on the receiver.
     */ async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */ ) {
        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
        if (!messageChannel) throw new Error("connection_unavailable" /* _MessageError.CONNECTION_UNAVAILABLE */ );
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let completionTimer;
        let handler;
        return new Promise((resolve, reject)=>{
            const eventId = _generateEventId('', 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(()=>{
                reject(new Error("unsupported_event" /* _MessageError.UNSUPPORTED_EVENT */ ));
            }, timeout);
            handler = {
                messageChannel,
                onMessage (event) {
                    const messageEvent = event;
                    if (messageEvent.data.eventId !== eventId) return;
                    switch(messageEvent.data.status){
                        case "ack" /* _Status.ACK */ :
                            // The receiver should ACK first.
                            clearTimeout(ackTimer);
                            completionTimer = setTimeout(()=>{
                                reject(new Error("timeout" /* _MessageError.TIMEOUT */ ));
                            }, 3000 /* _TimeoutDuration.COMPLETION */ );
                            break;
                        case "done" /* _Status.DONE */ :
                            // Once the receiver's handlers are finished we will get the results.
                            clearTimeout(completionTimer);
                            resolve(messageEvent.data.response);
                            break;
                        default:
                            clearTimeout(ackTimer);
                            clearTimeout(completionTimer);
                            reject(new Error("invalid_response" /* _MessageError.INVALID_RESPONSE */ ));
                            break;
                    }
                }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener('message', handler.onMessage);
            this.target.postMessage({
                eventType,
                eventId,
                data
            }, [
                messageChannel.port2
            ]);
        }).finally(()=>{
            if (handler) this.removeMessageHandler(handler);
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */ function _window() {
    return window;
}
function _setWindowLocation(url) {
    _window().location.href = url;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _isWorker() {
    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';
}
async function _getActiveServiceWorker() {
    if (!navigator?.serviceWorker) return null;
    try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
    } catch  {
        return null;
    }
}
function _getServiceWorkerController() {
    return navigator?.serviceWorker?.controller || null;
}
function _getWorkerGlobalScope() {
    return _isWorker() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = 'firebaseLocalStorageDb';
const DB_VERSION = 1;
const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
const DB_DATA_KEYPATH = 'fbase_key';
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */ class DBPromise {
    constructor(request){
        this.request = request;
    }
    toPromise() {
        return new Promise((resolve, reject)=>{
            this.request.addEventListener('success', ()=>{
                resolve(this.request.result);
            });
            this.request.addEventListener('error', ()=>{
                reject(this.request.error);
            });
        });
    }
}
function getObjectStore(db, isReadWrite) {
    return db.transaction([
        DB_OBJECTSTORE_NAME
    ], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);
}
function _deleteDatabase() {
    const request = indexedDB.deleteDatabase(DB_NAME);
    return new DBPromise(request).toPromise();
}
function _openDatabase() {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    return new Promise((resolve, reject)=>{
        request.addEventListener('error', ()=>{
            reject(request.error);
        });
        request.addEventListener('upgradeneeded', ()=>{
            const db = request.result;
            try {
                db.createObjectStore(DB_OBJECTSTORE_NAME, {
                    keyPath: DB_DATA_KEYPATH
                });
            } catch (e) {
                reject(e);
            }
        });
        request.addEventListener('success', async ()=>{
            const db = request.result;
            // Strange bug that occurs in Firefox when multiple tabs are opened at the
            // same time. The only way to recover seems to be deleting the database
            // and re-initializing it.
            // https://github.com/firebase/firebase-js-sdk/issues/634
            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                // Need to close the database or else you get a `blocked` event
                db.close();
                await _deleteDatabase();
                resolve(await _openDatabase());
            } else resolve(db);
        });
    });
}
async function _putObject(db, key, value) {
    const request = getObjectStore(db, true).put({
        [DB_DATA_KEYPATH]: key,
        value
    });
    return new DBPromise(request).toPromise();
}
async function getObject(db, key) {
    const request = getObjectStore(db, false).get(key);
    const data = await new DBPromise(request).toPromise();
    return data === undefined ? null : data.value;
}
function _deleteObject(db, key) {
    const request = getObjectStore(db, true).delete(key);
    return new DBPromise(request).toPromise();
}
const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;
class IndexedDBLocalPersistence {
    constructor(){
        this.type = "LOCAL" /* PersistenceType.LOCAL */ ;
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        // Fire & forget the service worker registration as it may never resolve
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(()=>{}, ()=>{});
    }
    async _openDb() {
        if (this.db) return this.db;
        this.db = await _openDatabase();
        return this.db;
    }
    async _withRetries(op) {
        let numAttempts = 0;
        while(true)try {
            const db = await this._openDb();
            return await op(db);
        } catch (e) {
            if (numAttempts++ > _TRANSACTION_RETRY_COUNT) throw e;
            if (this.db) {
                this.db.close();
                this.db = undefined;
            }
        // TODO: consider adding exponential backoff
        }
    }
    /**
     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
     * postMessage interface to send these events to the worker ourselves.
     */ async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
    }
    /**
     * As the worker we should listen to events from the main window.
     */ async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        // Refresh from persistence if we receive a KeyChanged message.
        this.receiver._subscribe("keyChanged" /* _EventType.KEY_CHANGED */ , async (_origin, data)=>{
            const keys = await this._poll();
            return {
                keyProcessed: keys.includes(data.key)
            };
        });
        // Let the sender know that we are listening so they give us more timeout.
        this.receiver._subscribe("ping" /* _EventType.PING */ , async (_origin, _data)=>{
            return [
                "keyChanged" /* _EventType.KEY_CHANGED */ 
            ];
        });
    }
    /**
     * As the main window, we should let the worker know when keys change (set and remove).
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
     * may not resolve.
     */ async initializeSender() {
        // Check to see if there's an active service worker.
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) return;
        this.sender = new Sender(this.activeServiceWorker);
        // Ping the service worker to check what events they can handle.
        const results = await this.sender._send("ping" /* _EventType.PING */ , {}, 800 /* _TimeoutDuration.LONG_ACK */ );
        if (!results) return;
        if (results[0]?.fulfilled && results[0]?.value.includes("keyChanged" /* _EventType.KEY_CHANGED */ )) this.serviceWorkerReceiverAvailable = true;
    }
    /**
     * Let the worker know about a changed key, the exact key doesn't technically matter since the
     * worker will just trigger a full sync anyway.
     *
     * @remarks
     * For now, we only support one service worker per page.
     *
     * @param key - Storage key which changed.
     */ async notifyServiceWorker(key) {
        if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) return;
        try {
            await this.sender._send("keyChanged" /* _EventType.KEY_CHANGED */ , {
                key
            }, // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */  : 50 /* _TimeoutDuration.ACK */ );
        } catch  {
        // This is a best effort approach. Ignore errors.
        }
    }
    async _isAvailable() {
        try {
            if (!indexedDB) return false;
            const db = await _openDatabase();
            await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
            await _deleteObject(db, STORAGE_AVAILABLE_KEY);
            return true;
        } catch  {}
        return false;
    }
    async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
            await write();
        } finally{
            this.pendingWrites--;
        }
    }
    async _set(key, value) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_putObject(db, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
        });
    }
    async _get(key) {
        const obj = await this._withRetries((db)=>getObject(db, key));
        this.localCache[key] = obj;
        return obj;
    }
    async _remove(key) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_deleteObject(db, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
        });
    }
    async _poll() {
        // TODO: check if we need to fallback if getAll is not supported
        const result = await this._withRetries((db)=>{
            const getAllRequest = getObjectStore(db, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) return [];
        // If we have pending writes in progress abort, we'll get picked up on the next poll
        if (this.pendingWrites !== 0) return [];
        const keys = [];
        const keysInResult = new Set();
        if (result.length !== 0) for (const { fbase_key: key, value } of result){
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
            }
        }
        for (const localKey of Object.keys(this.localCache))if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            // Deleted
            this.notifyListeners(localKey, null);
            keys.push(localKey);
        }
        return keys;
    }
    notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(newValue);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async ()=>this._poll(), _POLLING_INTERVAL_MS);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) this.startPolling();
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this._get(key); // This can happen in the background async and we can return immediately.
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) this.stopPolling();
    }
}
IndexedDBLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */ const indexedDBLocalPersistence = IndexedDBLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:start" /* Endpoint.START_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
function finalizeSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
function finalizeSignInTotpMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // ReCaptcha will load using the same callback, so the callback function needs
// to be kept around
const _JSLOAD_CALLBACK = _generateCallbackName('rcb');
const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */ class ReCaptchaLoaderImpl {
    constructor(){
        this.hostLanguage = '';
        this.counter = 0;
        /**
         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise
         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but
         * `window.grecaptcha.render()` will not. Another load will add it.
         */ this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;
    }
    load(auth, hl = '') {
        _assert(isHostLanguageValid(hl), auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) return Promise.resolve(_window().grecaptcha);
        return new Promise((resolve, reject)=>{
            const networkTimeout = _window().setTimeout(()=>{
                reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            }, NETWORK_TIMEOUT_DELAY.get());
            _window()[_JSLOAD_CALLBACK] = ()=>{
                _window().clearTimeout(networkTimeout);
                delete _window()[_JSLOAD_CALLBACK];
                const recaptcha = _window().grecaptcha;
                if (!recaptcha || !isV2(recaptcha)) {
                    reject(_createError(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ));
                    return;
                }
                // Wrap the recaptcha render function so that we know if the developer has
                // called it separately
                const render = recaptcha.render;
                recaptcha.render = (container, params)=>{
                    const widgetId = render(container, params);
                    this.counter++;
                    return widgetId;
                };
                this.hostLanguage = hl;
                resolve(recaptcha);
            };
            const url = `${_recaptchaV2ScriptUrl()}?${(0, _util.querystring)({
                onload: _JSLOAD_CALLBACK,
                render: 'explicit',
                hl
            })}`;
            _loadJS(url).catch(()=>{
                clearTimeout(networkTimeout);
                reject(_createError(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ));
            });
        });
    }
    clearedOneInstance() {
        this.counter--;
    }
    shouldResolveImmediately(hl) {
        // We can resolve immediately if:
        //   • grecaptcha is already defined AND (
        //     1. the requested language codes are the same OR
        //     2. there exists already a ReCaptcha on the page
        //     3. the library was already loaded by the app
        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
        // that are already in the page
        return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
    }
}
function isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}
class MockReCaptchaLoaderImpl {
    async load(auth) {
        return new MockReCaptcha(auth);
    }
    clearedOneInstance() {}
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
const DEFAULT_PARAMS = {
    theme: 'light',
    type: 'image'
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @remarks
 * `RecaptchaVerifier` does not work in a Node.js environment.
 *
 * @public
 */ class RecaptchaVerifier {
    /**
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     * @param containerOrId - The reCAPTCHA container parameter.
     *
     * @remarks
     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
     * an element ID. The corresponding element must also must be in the DOM at the time of
     * initialization.
     *
     * @param parameters - The optional reCAPTCHA parameters.
     *
     * @remarks
     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
     * 'invisible'.
     */ constructor(authExtern, containerOrId, parameters = {
        ...DEFAULT_PARAMS
    }){
        this.parameters = parameters;
        /**
         * The application verifier type.
         *
         * @remarks
         * For a reCAPTCHA verifier, this is 'recaptcha'.
         */ this.type = RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = _castAuth(authExtern);
        this.isInvisible = this.parameters.size === 'invisible';
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
        this.validateStartingState();
    // TODO: Figure out if sdk version is needed
    }
    /**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
     *
     * @returns A Promise for the reCAPTCHA token.
     */ async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) return response;
        return new Promise((resolve)=>{
            const tokenChange = (token)=>{
                if (!token) return; // Ignore token expirations.
                this.tokenChangeListeners.delete(tokenChange);
                resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) recaptcha.execute(id);
        });
    }
    /**
     * Renders the reCAPTCHA widget on the page.
     *
     * @returns A Promise that resolves with the reCAPTCHA widget ID.
     */ render() {
        try {
            this.assertNotDestroyed();
        } catch (e) {
            // This method returns a promise. Since it's not async (we want to return the
            // _same_ promise if rendering is still occurring), the API surface should
            // reject with the error rather than just throw
            return Promise.reject(e);
        }
        if (this.renderPromise) return this.renderPromise;
        this.renderPromise = this.makeRenderPromise().catch((e)=>{
            this.renderPromise = null;
            throw e;
        });
        return this.renderPromise;
    }
    /** @internal */ _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) this.getAssertedRecaptcha().reset(this.widgetId);
    }
    /**
     * Clears the reCAPTCHA widget from the page and destroys the instance.
     */ clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) this.container.childNodes.forEach((node)=>{
            this.container.removeChild(node);
        });
    }
    validateStartingState() {
        _assert(!this.parameters.sitekey, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );
    }
    makeTokenCallback(existing) {
        return (token)=>{
            this.tokenChangeListeners.forEach((listener)=>listener(token));
            if (typeof existing === 'function') existing(token);
            else if (typeof existing === 'string') {
                const globalFunc = _window()[existing];
                if (typeof globalFunc === 'function') globalFunc(token);
            }
        };
    }
    assertNotDestroyed() {
        _assert(!this.destroyed, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
    async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
                const guaranteedEmpty = document.createElement('div');
                container.appendChild(guaranteedEmpty);
                container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
    }
    async init() {
        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        await domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
        const siteKey = await getRecaptchaParams(this.auth);
        _assert(siteKey, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.parameters.sitekey = siteKey;
    }
    getAssertedRecaptcha() {
        _assert(this.recaptcha, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.recaptcha;
    }
}
function domReady() {
    let resolver = null;
    return new Promise((resolve)=>{
        if (document.readyState === 'complete') {
            resolve();
            return;
        }
        // Document not ready, wait for load before resolving.
        // Save resolver, so we can remove listener in case it was externally
        // cancelled.
        resolver = ()=>resolve();
        window.addEventListener('load', resolver);
    }).catch((e)=>{
        if (resolver) window.removeEventListener('load', resolver);
        throw e;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ConfirmationResultImpl {
    constructor(verificationId, onConfirmation){
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
    }
    confirm(verificationCode) {
        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
    }
}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method requires a {@link ApplicationVerifier}.
 * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.
 * This function can work on other platforms that do not support the
 * {@link RecaptchaVerifier} (like React Native), but you need to use a
 * third-party {@link ApplicationVerifier} implementation.
 *
 * If you've enabled project-level reCAPTCHA Enterprise bot protection in
 * Enforce mode, you can omit the {@link ApplicationVerifier}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>signInWithCredential(authInternal, cred));
}
/**
 * Links the user account with the given phone number.
 *
 * @remarks
 * This method does not work in a Node.js environment.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(false, userInternal, "phone" /* ProviderId.PHONE */ );
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>linkWithCredential(userInternal, cred));
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = (0, _util.getModularInstance)(user);
    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>reauthenticateWithCredential(userInternal, cred));
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */ async function _verifyPhoneNumber(auth, options, verifier) {
    if (!auth._getRecaptchaConfig()) try {
        await _initializeRecaptchaConfig(auth);
    } catch (error) {
        // If an error occurs while fetching the config, there is no way to know the enablement state
        // of Phone provider, so we proceed with recaptcha V2 verification.
        // The error is likely "recaptchaKey undefined", as reCAPTCHA Enterprise is not
        // enabled for any provider.
        console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');
    }
    try {
        let phoneInfoOptions;
        if (typeof options === 'string') phoneInfoOptions = {
            phoneNumber: options
        };
        else phoneInfoOptions = options;
        if ('session' in phoneInfoOptions) {
            const session = phoneInfoOptions.session;
            if ('phoneNumber' in phoneInfoOptions) {
                _assert(session.type === "enroll" /* MultiFactorSessionType.ENROLL */ , auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                const startPhoneMfaEnrollmentRequest = {
                    idToken: session.credential,
                    phoneEnrollmentInfo: {
                        phoneNumber: phoneInfoOptions.phoneNumber,
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                    }
                };
                const startEnrollPhoneMfaActionCallback = async (authInstance, request)=>{
                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                    if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {
                        _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                        const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
                        return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);
                    }
                    return startEnrollPhoneMfa(authInstance, request);
                };
                const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ , startEnrollPhoneMfaActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
                const response = await startPhoneMfaEnrollmentResponse.catch((error)=>{
                    return Promise.reject(error);
                });
                return response.phoneSessionInfo.sessionInfo;
            } else {
                _assert(session.type === "signin" /* MultiFactorSessionType.SIGN_IN */ , auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                const mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;
                _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ );
                const startPhoneMfaSignInRequest = {
                    mfaPendingCredential: session.credential,
                    mfaEnrollmentId,
                    phoneSignInInfo: {
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                    }
                };
                const startSignInPhoneMfaActionCallback = async (authInstance, request)=>{
                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                    if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {
                        _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                        const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
                        return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);
                    }
                    return startSignInPhoneMfa(authInstance, request);
                };
                const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */ , startSignInPhoneMfaActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
                const response = await startPhoneMfaSignInResponse.catch((error)=>{
                    return Promise.reject(error);
                });
                return response.phoneResponseInfo.sessionInfo;
            }
        } else {
            const sendPhoneVerificationCodeRequest = {
                phoneNumber: phoneInfoOptions.phoneNumber,
                clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
            };
            const sendPhoneVerificationCodeActionCallback = async (authInstance, request)=>{
                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                if (request.captchaResponse === FAKE_TOKEN) {
                    _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                    const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);
                    return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);
                }
                return sendPhoneVerificationCode(authInstance, request);
            };
            const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, "sendVerificationCode" /* RecaptchaActionName.SEND_VERIFICATION_CODE */ , sendPhoneVerificationCodeActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
            const response = await sendPhoneVerificationCodeResponse.catch((error)=>{
                return Promise.reject(error);
            });
            return response.sessionInfo;
        }
    } finally{
        verifier?._reset();
    }
}
/**
 * Updates the user's phone number.
 *
 * @remarks
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */ async function updatePhoneNumber(user, credential) {
    const userInternal = (0, _util.getModularInstance)(user);
    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    await _link$1(userInternal, credential);
}
// Helper function that fetches and injects a reCAPTCHA v2 token into the request.
async function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {
    _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    const recaptchaV2Token = await recaptchaV2Verifier.verify();
    _assert(typeof recaptchaV2Token === 'string', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    const newRequest = {
        ...request
    };
    if ('phoneEnrollmentInfo' in newRequest) {
        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
        const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;
        const clientType = newRequest.phoneEnrollmentInfo.clientType;
        const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;
        Object.assign(newRequest, {
            'phoneEnrollmentInfo': {
                phoneNumber,
                recaptchaToken: recaptchaV2Token,
                captchaResponse,
                clientType,
                recaptchaVersion
            }
        });
        return newRequest;
    } else if ('phoneSignInInfo' in newRequest) {
        const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;
        const clientType = newRequest.phoneSignInInfo.clientType;
        const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;
        Object.assign(newRequest, {
            'phoneSignInInfo': {
                recaptchaToken: recaptchaV2Token,
                captchaResponse,
                clientType,
                recaptchaVersion
            }
        });
        return newRequest;
    } else {
        Object.assign(newRequest, {
            'recaptchaToken': recaptchaV2Token
        });
        return newRequest;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @remarks
 * `PhoneAuthProvider` does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */ class PhoneAuthProvider {
    /**
     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
     *
     */ constructor(auth){
        /** Always set to {@link ProviderId}.PHONE. */ this.providerId = PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth);
    }
    /**
     *
     * Starts a phone number authentication flow by sending a verification code to the given phone
     * number.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
     * E.164 format (e.g. +16505550101).
     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents
     * requests from unauthorized clients. This SDK includes an implementation
     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled
     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is
     * optional; in all other configurations, the parameter is required.
     *
     * @returns A Promise for a verification ID that can be passed to
     * {@link PhoneAuthProvider.credential} to identify this flow.
     */ verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, (0, _util.getModularInstance)(applicationVerifier));
    }
    /**
     * Creates a phone auth credential, given the verification ID from
     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
     * mobile device.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode - The verification code sent to the user's mobile device.
     *
     * @returns The auth provider credential.
     */ static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential}.
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        const credential = userCredential;
        return PhoneAuthProvider.credentialFromTaggedObject(credential);
    }
    /**
     * Returns an {@link AuthCredential} when passed an error.
     *
     * @remarks
     *
     * This method works for errors like
     * `auth/account-exists-with-different-credentials`. This is useful for
     * recovering when attempting to set a user's phone number but the number
     * in question is already tied to another account. For example, the following
     * code tries to update the current user's phone number, and if that
     * fails, links the user with the account associated with that number:
     *
     * ```js
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(number, verifier);
     * try {
     *   const code = ''; // Prompt the user for the verification code
     *   await updatePhoneNumber(
     *       auth.currentUser,
     *       PhoneAuthProvider.credential(verificationId, code));
     * } catch (e) {
     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
     *     const cred = PhoneAuthProvider.credentialFromError(e);
     *     await linkWithCredential(auth.currentUser, cred);
     *   }
     * }
     *
     * // At this point, auth.currentUser.phoneNumber === number.
     * ```
     *
     * @param error - The error to generate a credential from.
     */ static credentialFromError(error) {
        return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { phoneNumber, temporaryProof } = tokenResponse;
        if (phoneNumber && temporaryProof) return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        return null;
    }
}
/** Always set to {@link ProviderId}.PHONE. */ PhoneAuthProvider.PROVIDER_ID = "phone" /* ProviderId.PHONE */ ;
/** Always set to {@link SignInMethod}.PHONE. */ PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* SignInMethod.PHONE */ ;
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */ function _withDefaultResolver(auth, resolverOverride) {
    if (resolverOverride) return _getInstance(resolverOverride);
    _assert(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    return auth._popupRedirectResolver;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class IdpCredential extends AuthCredential {
    constructor(params){
        super("custom" /* ProviderId.CUSTOM */ , "custom" /* ProviderId.CUSTOM */ );
        this.params = params;
    }
    _getIdTokenResponse(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _linkToIdToken(auth, idToken) {
        return signInWithIdp(auth, this._buildIdpRequest(idToken));
    }
    _getReauthenticationResolver(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _buildIdpRequest(idToken) {
        const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
        };
        if (idToken) request.idToken = idToken;
        return request;
    }
}
function _signIn(params) {
    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
    const { auth, user } = params;
    _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
    const { auth, user } = params;
    _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */ class AbstractPopupRedirectOperation {
    constructor(auth, filter, resolver, user, bypassAuthState = false){
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [
            filter
        ];
    }
    execute() {
        return new Promise(async (resolve, reject)=>{
            this.pendingPromise = {
                resolve,
                reject
            };
            try {
                this.eventManager = await this.resolver._initialize(this.auth);
                await this.onExecution();
                this.eventManager.registerConsumer(this);
            } catch (e) {
                this.reject(e);
            }
        });
    }
    async onAuthEvent(event) {
        const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
        if (error) {
            this.reject(error);
            return;
        }
        const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId: sessionId,
            tenantId: tenantId || undefined,
            postBody: postBody || undefined,
            user: this.user,
            bypassAuthState: this.bypassAuthState
        };
        try {
            this.resolve(await this.getIdpTask(type)(params));
        } catch (e) {
            this.reject(e);
        }
    }
    onError(error) {
        this.reject(error);
    }
    getIdpTask(type) {
        switch(type){
            case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */ :
            case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :
                return _signIn;
            case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */ :
            case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ :
                return _link;
            case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */ :
            case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ :
                return _reauth;
            default:
                _fail(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    resolve(cred) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
    }
    reject(error) {
        debugAssert(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
    }
    unregisterAndCleanUp() {
        if (this.eventManager) this.eventManager.unregisterConsumer(this);
        this.pendingPromise = null;
        this.cleanUp();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function signInWithPopup(auth, provider, resolver) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_createError(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ));
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    const action = new PopupOperation(authInternal, "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */ , provider, resolverInternal);
    return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function reauthenticateWithPopup(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) return Promise.reject(_createError(userInternal.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ));
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 * This method does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function linkWithPopup(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */ class PopupOperation extends AbstractPopupRedirectOperation {
    constructor(auth, filter, provider, resolver, user){
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (PopupOperation.currentPopupAction) PopupOperation.currentPopupAction.cancel();
        PopupOperation.currentPopupAction = this;
    }
    async executeNotNull() {
        const result = await this.execute();
        _assert(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return result;
    }
    async onExecution() {
        debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], eventId);
        this.authWindow.associatedEvent = eventId;
        // Check for web storage support and origin validation _after_ the popup is
        // loaded. These operations are slow (~1 second or so) Rather than
        // waiting on them before opening the window, optimistically open the popup
        // and check for storage support at the same time. If storage support is
        // not available, this will cause the whole thing to reject properly. It
        // will also close the popup, but since the promise has already rejected,
        // the popup closed by user poll will reject into the void.
        this.resolver._originValidation(this.auth).catch((e)=>{
            this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported)=>{
            if (!isSupported) this.reject(_createError(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ ));
        });
        // Handle user closure. Notice this does *not* use await
        this.pollUserCancellation();
    }
    get eventId() {
        return this.authWindow?.associatedEvent || null;
    }
    cancel() {
        this.reject(_createError(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ ));
    }
    cleanUp() {
        if (this.authWindow) this.authWindow.close();
        if (this.pollId) window.clearTimeout(this.pollId);
        this.authWindow = null;
        this.pollId = null;
        PopupOperation.currentPopupAction = null;
    }
    pollUserCancellation() {
        const poll = ()=>{
            if (this.authWindow?.window?.closed) {
                // Make sure that there is sufficient time for whatever action to
                // complete. The window could have closed but the sign in network
                // call could still be in flight. This is specifically true for
                // Firefox or if the opener is in an iframe, in which case the oauth
                // helper closes the popup.
                this.pollId = window.setTimeout(()=>{
                    this.pollId = null;
                    this.reject(_createError(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ ));
                }, 8000 /* _Timeout.AUTH_EVENT */ );
                return;
            }
            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
    }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
PopupOperation.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PENDING_REDIRECT_KEY = 'pendingRedirect';
// We only get one redirect outcome for any one auth, so just store it
// in here.
const redirectOutcomeMap = new Map();
class RedirectAction extends AbstractPopupRedirectOperation {
    constructor(auth, resolver, bypassAuthState = false){
        super(auth, [
            "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ,
            "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ ,
            "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ ,
            "unknown" /* AuthEventType.UNKNOWN */ 
        ], resolver, undefined, bypassAuthState);
        this.eventId = null;
    }
    /**
     * Override the execute function; if we already have a redirect result, then
     * just return it.
     */ async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
            try {
                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                const result = hasPendingRedirect ? await super.execute() : null;
                readyOutcome = ()=>Promise.resolve(result);
            } catch (e) {
                readyOutcome = ()=>Promise.reject(e);
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        // If we're not bypassing auth state, the ready outcome should be set to
        // null.
        if (!this.bypassAuthState) redirectOutcomeMap.set(this.auth._key(), ()=>Promise.resolve(null));
        return readyOutcome();
    }
    async onAuthEvent(event) {
        if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ) return super.onAuthEvent(event);
        else if (event.type === "unknown" /* AuthEventType.UNKNOWN */ ) {
            // This is a sentinel value indicating there's no pending redirect
            this.resolve(null);
            return;
        }
        if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
                this.user = user;
                return super.onAuthEvent(event);
            } else this.resolve(null);
        }
    }
    async onExecution() {}
    cleanUp() {}
}
async function _getAndClearPendingRedirectStatus(resolver, auth) {
    const key = pendingRedirectKey(auth);
    const persistence = resolverPersistence(resolver);
    if (!await persistence._isAvailable()) return false;
    const hasPendingRedirect = await persistence._get(key) === 'true';
    await persistence._remove(key);
    return hasPendingRedirect;
}
async function _setPendingRedirectStatus(resolver, auth) {
    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');
}
function _clearRedirectOutcomes() {
    redirectOutcomeMap.clear();
}
function _overrideRedirectResult(auth, result) {
    redirectOutcomeMap.set(auth._key(), result);
}
function resolverPersistence(resolver) {
    return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth) {
    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link signInWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function signInWithRedirect(auth, provider, resolver) {
    return _signInWithRedirect(auth, provider, resolver);
}
async function _signInWithRedirect(auth, provider, resolver) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await authInternal._initializationPromise;
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    await _setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ );
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link reauthenticateWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Reauthenticate using a redirect.
 * await reauthenticateWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
}
async function _reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ , eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link linkWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
}
async function _linkWithRedirect(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _assertLinkedStatus(false, userInternal, provider.providerId);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ , eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns `null`.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function getRedirectResult(auth, resolver) {
    await _castAuth(auth)._initializationPromise;
    return _getRedirectResult(auth, resolver, false);
}
async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
    if ((0, _app._isFirebaseServerApp)(auth.app)) return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = _castAuth(auth);
    const resolver = _withDefaultResolver(authInternal, resolverExtern);
    const action = new RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
}
async function prepareUserForRedirect(user) {
    const eventId = _generateEventId(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const EVENT_DUPLICATION_CACHE_DURATION_MS = 600000;
class AuthEventManager {
    constructor(auth){
        this.auth = auth;
        this.cachedEventUids = new Set();
        this.consumers = new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
    }
    registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
        }
    }
    unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
    }
    onEvent(event) {
        // Check if the event has already been handled
        if (this.hasEventBeenHandled(event)) return false;
        let handled = false;
        this.consumers.forEach((consumer)=>{
            if (this.isEventForConsumer(event, consumer)) {
                handled = true;
                this.sendToConsumer(event, consumer);
                this.saveEventToCache(event);
            }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) // If we've already seen a redirect before, or this is a popup event,
        // bail now
        return handled;
        this.hasHandledPotentialRedirect = true;
        // If the redirect wasn't handled, hang on to it
        if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
        }
        return handled;
    }
    sendToConsumer(event, consumer) {
        if (event.error && !isNullRedirectEvent(event)) {
            const code = event.error.code?.split('auth/')[1] || "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ;
            consumer.onError(_createError(this.auth, code));
        } else consumer.onAuthEvent(event);
    }
    isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
    }
    hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) this.cachedEventUids.clear();
        return this.cachedEventUids.has(eventUid(event));
    }
    saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
    }
}
function eventUid(e) {
    return [
        e.type,
        e.eventId,
        e.sessionId,
        e.tenantId
    ].filter((v)=>v).join('-');
}
function isNullRedirectEvent({ type, error }) {
    return type === "unknown" /* AuthEventType.UNKNOWN */  && error?.code === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */ }`;
}
function isRedirectEvent(event) {
    switch(event.type){
        case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :
        case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ :
        case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ :
            return true;
        case "unknown" /* AuthEventType.UNKNOWN */ :
            return isNullRedirectEvent(event);
        default:
            return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _getProjectConfig(auth, request = {}) {
    return _performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;
async function _validateOrigin(auth) {
    // Skip origin validation if we are in an emulated environment
    if (auth.config.emulator) return;
    const { authorizedDomains } = await _getProjectConfig(auth);
    for (const domain of authorizedDomains)try {
        if (matchDomain(domain)) return;
    } catch  {
    // Do nothing if there's a URL error; just continue searching
    }
    // In the old SDK, this error also provides helpful messages.
    _fail(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */ );
}
function matchDomain(expected) {
    const currentUrl = _getCurrentUrl();
    const { protocol, hostname } = new URL(currentUrl);
    if (expected.startsWith('chrome-extension://')) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === '' && hostname === '') // For some reason we're not parsing chrome URLs properly
        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');
        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
    }
    if (!HTTP_REGEX.test(protocol)) return false;
    if (IP_ADDRESS_REGEX.test(expected)) // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
    // Dots in pattern should be escaped.
    const escapedDomainPattern = expected.replace(/\./g, '\\.');
    // Non ip address domains.
    // domain.com = *.domain.com OR domain.com
    const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
    return re.test(hostname);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unloaded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */ function resetUnloadedGapiModules() {
    // Clear last failed gapi.load state to force next gapi.load to first
    // load the failed gapi.iframes module.
    // Get gapix.beacon context.
    const beacon = _window().___jsl;
    // Get current hint.
    if (beacon?.H) // Get gapi hint.
    for (const hint of Object.keys(beacon.H)){
        // Requested modules.
        beacon.H[hint].r = beacon.H[hint].r || [];
        // Loaded modules.
        beacon.H[hint].L = beacon.H[hint].L || [];
        // Set requested modules to a copy of the loaded modules.
        beacon.H[hint].r = [
            ...beacon.H[hint].L
        ];
        // Clear pending callbacks.
        if (beacon.CP) for(let i = 0; i < beacon.CP.length; i++)// Remove all failed pending callbacks.
        beacon.CP[i] = null;
    }
}
function loadGapi(auth) {
    return new Promise((resolve, reject)=>{
        // Function to run when gapi.load is ready.
        function loadGapiIframe() {
            // The developer may have tried to previously run gapi.load and failed.
            // Run this to fix that.
            resetUnloadedGapiModules();
            gapi.load('gapi.iframes', {
                callback: ()=>{
                    resolve(gapi.iframes.getContext());
                },
                ontimeout: ()=>{
                    // The above reset may be sufficient, but having this reset after
                    // failure ensures that if the developer calls gapi.load after the
                    // connection is re-established and before another attempt to embed
                    // the iframe, it would work and would not be broken because of our
                    // failed attempt.
                    // Timeout when gapi.iframes.Iframe not loaded.
                    resetUnloadedGapiModules();
                    reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
                },
                timeout: NETWORK_TIMEOUT.get()
            });
        }
        if (_window().gapi?.iframes?.Iframe) // If gapi.iframes.Iframe available, resolve.
        resolve(gapi.iframes.getContext());
        else if (!!_window().gapi?.load) // Gapi loader ready, load gapi.iframes.
        loadGapiIframe();
        else {
            // Create a new iframe callback when this is called so as not to overwrite
            // any previous defined callback. This happens if this method is called
            // multiple times in parallel and could result in the later callback
            // overwriting the previous one. This would end up with a iframe
            // timeout.
            const cbName = _generateCallbackName('iframefcb');
            // GApi loader not available, dynamically load platform.js.
            _window()[cbName] = ()=>{
                // GApi loader should be ready.
                if (!!gapi.load) loadGapiIframe();
                else // Gapi loader failed, throw error.
                reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            };
            // Load GApi loader.
            return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch((e)=>reject(e));
        }
    }).catch((error)=>{
        // Reset cached promise to allow for retrial.
        cachedGApiLoader = null;
        throw error;
    });
}
let cachedGApiLoader = null;
function _loadGapi(auth) {
    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
    return cachedGApiLoader;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = '__/auth/iframe';
const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const IFRAME_ATTRIBUTES = {
    style: {
        position: 'absolute',
        top: '-100px',
        width: '1px',
        height: '1px'
    },
    'aria-hidden': 'true',
    tabindex: '-1'
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const EID_FROM_APIHOST = new Map([
    [
        "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */ ,
        'p'
    ],
    [
        'staging-identitytoolkit.sandbox.googleapis.com',
        's'
    ],
    [
        'test-identitytoolkit.sandbox.googleapis.com',
        't'
    ] // test
]);
function getIframeUrl(auth) {
    const config = auth.config;
    _assert(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );
    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
    const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: (0, _app.SDK_VERSION)
    };
    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
    if (eid) params.eid = eid;
    const frameworks = auth._getFrameworks();
    if (frameworks.length) params.fw = frameworks.join(',');
    return `${url}?${(0, _util.querystring)(params).slice(1)}`;
}
async function _openIframe(auth) {
    const context = await _loadGapi(auth);
    const gapi1 = _window().gapi;
    _assert(gapi1, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return context.open({
        where: document.body,
        url: getIframeUrl(auth),
        messageHandlersFilter: gapi1.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: IFRAME_ATTRIBUTES,
        dontclear: true
    }, (iframe)=>new Promise(async (resolve, reject)=>{
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = _createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ );
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = _window().setTimeout(()=>{
                reject(networkError);
            }, PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                _window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, ()=>{
                reject(networkError);
            });
        }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const BASE_POPUP_OPTIONS = {
    location: 'yes',
    resizable: 'yes',
    statusbar: 'yes',
    toolbar: 'no'
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = '_blank';
const FIREFOX_EMPTY_URL = 'http://localhost';
class AuthPopup {
    constructor(window1){
        this.window = window1;
        this.associatedEvent = null;
    }
    close() {
        if (this.window) try {
            this.window.close();
        } catch (e) {}
    }
}
function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = '';
    const options = {
        ...BASE_POPUP_OPTIONS,
        width: width.toString(),
        height: height.toString(),
        top,
        left
    };
    // Chrome iOS 7 and 8 is returning an undefined popup win when target is
    // specified, even though the popup is not necessarily blocked.
    const ua = (0, _util.getUA)().toLowerCase();
    if (name) target = _isChromeIOS(ua) ? TARGET_BLANK : name;
    if (_isFirefox(ua)) {
        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
        url = url || FIREFOX_EMPTY_URL;
        // Firefox disables by default scrolling on popup windows, which can create
        // issues when the user has many Google accounts, for instance.
        options.scrollbars = 'yes';
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value])=>`${accum}${key}=${value},`, '');
    if (_isIOSStandalone(ua) && target !== '_self') {
        openAsNewWindowIOS(url || '', target);
        return new AuthPopup(null);
    }
    // about:blank getting sanitized causing browsers like IE/Edge to display
    // brief error message before redirecting to handler.
    const newWin = window.open(url || '', target, optionsString);
    _assert(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */ );
    // Flaky on IE edge, encapsulate with a try and catch.
    try {
        newWin.focus();
    } catch (e) {}
    return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
    const el = document.createElement('a');
    el.href = url;
    el.target = target;
    const click = document.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */ const WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */ const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
/**
 * Fragment name for the App Check token that gets passed to the widget
 *
 * @internal
 */ const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
    _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );
    _assert(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ );
    const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType,
        redirectUrl,
        v: (0, _app.SDK_VERSION),
        eventId
    };
    if (provider instanceof FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || '';
        if (!(0, _util.isEmpty)(provider.getCustomParameters())) params.customParameters = JSON.stringify(provider.getCustomParameters());
        // TODO set additionalParams from the provider as well?
        for (const [key, value] of Object.entries(additionalParams || {}))params[key] = value;
    }
    if (provider instanceof BaseOAuthProvider) {
        const scopes = provider.getScopes().filter((scope)=>scope !== '');
        if (scopes.length > 0) params.scopes = scopes.join(',');
    }
    if (auth.tenantId) params.tid = auth.tenantId;
    // TODO: maybe set eid as endpointId
    // TODO: maybe set fw as Frameworks.join(",")
    const paramsDict = params;
    for (const key of Object.keys(paramsDict))if (paramsDict[key] === undefined) delete paramsDict[key];
    // Sets the App Check token to pass to the widget
    const appCheckToken = await auth._getAppCheckToken();
    const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';
    // Start at index 1 to skip the leading '&' in the query string
    return `${getHandlerBase(auth)}?${(0, _util.querystring)(paramsDict).slice(1)}${appCheckTokenFragment}`;
}
function getHandlerBase({ config }) {
    if (!config.emulator) return `https://${config.authDomain}/${WIDGET_PATH}`;
    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The special web storage event
 *
 */ const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
class BrowserPopupRedirectResolver {
    constructor(){
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
    }
    // Wrapping in async even though we don't await anywhere in order
    // to make sure errors are raised as promise rejections
    async _openPopup(auth, provider, authType, eventId) {
        debugAssert(this.eventManagers[auth._key()]?.manager, '_initialize() not called before _openPopup()');
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth, url, _generateEventId());
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        _setWindowLocation(url);
        return new Promise(()=>{});
    }
    _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
            const { manager, promise } = this.eventManagers[key];
            if (manager) return Promise.resolve(manager);
            else {
                debugAssert(promise, 'If manager is not set, promise should be');
                return promise;
            }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = {
            promise
        };
        // If the promise is rejected, the key should be removed so that the
        // operation can be retried later.
        promise.catch(()=>{
            delete this.eventManagers[key];
        });
        return promise;
    }
    async initAndGetManager(auth) {
        const iframe = await _openIframe(auth);
        const manager = new AuthEventManager(auth);
        iframe.register('authEvent', (iframeEvent)=>{
            _assert(iframeEvent?.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */ );
            // TODO: Consider splitting redirect and popup events earlier on
            const handled = manager.onEvent(iframeEvent.authEvent);
            return {
                status: handled ? "ACK" /* GapiOutcome.ACK */  : "ERROR" /* GapiOutcome.ERROR */ 
            };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = {
            manager
        };
        this.iframes[auth._key()] = iframe;
        return manager;
    }
    _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, {
            type: WEB_STORAGE_SUPPORT_KEY
        }, (result)=>{
            const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== undefined) cb(!!isSupported);
            _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) this.originValidationPromises[key] = _validateOrigin(auth);
        return this.originValidationPromises[key];
    }
    get _shouldInitProactively() {
        // Mobile browsers and Safari need to optimistically initialize
        return _isMobileBrowser() || _isSafari() || _isIOS();
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @remarks
 * This method does not work in a Node.js environment.
 *
 * @public
 */ const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
class MultiFactorAssertionImpl {
    constructor(factorId){
        this.factorId = factorId;
    }
    _process(auth, session, displayName) {
        switch(session.type){
            case "enroll" /* MultiFactorSessionType.ENROLL */ :
                return this._finalizeEnroll(auth, session.credential, displayName);
            case "signin" /* MultiFactorSessionType.SIGN_IN */ :
                return this._finalizeSignIn(auth, session.credential);
            default:
                return debugFail('unexpected MultiFactorSessionType');
        }
    }
}
/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */ class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(credential){
        super("phone" /* FactorId.PHONE */ );
        this.credential = credential;
    }
    /** @internal */ static _fromCredential(credential) {
        return new PhoneMultiFactorAssertionImpl(credential);
    }
    /** @internal */ _finalizeEnroll(auth, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth, {
            idToken,
            displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
    /** @internal */ _finalizeSignIn(auth, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth, {
            mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */ class PhoneMultiFactorGenerator {
    constructor(){}
    /**
     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
     *
     * @remarks
     * This method does not work in a Node.js environment.
     *
     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
     * @returns A {@link PhoneMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}
     */ static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
    }
}
/**
 * The identifier of the phone second factor: `phone`.
 */ PhoneMultiFactorGenerator.FACTOR_ID = 'phone';
/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * @public
 */ class TotpMultiFactorGenerator {
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of
     * the TOTP (time-based one-time password) second factor.
     * This assertion is used to complete enrollment in TOTP second factor.
     *
     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorUser.enroll}.
     */ static assertionForEnrollment(secret, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
    }
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.
     * This assertion is used to complete signIn with TOTP as the second factor.
     *
     * @param enrollmentId identifies the enrolled TOTP second factor.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}.
     */ static assertionForSignIn(enrollmentId, oneTimePassword) {
        return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
    }
    /**
     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.
     * Creates a TOTP secret as part of enrolling a TOTP second factor.
     * Used for generating a QR code URL or inputting into a TOTP app.
     * This method uses the auth instance corresponding to the user in the multiFactorSession.
     *
     * @param session The {@link MultiFactorSession} that the user is part of.
     * @returns A promise to {@link TotpSecret}.
     */ static async generateSecret(session) {
        const mfaSession = session;
        _assert(typeof mfaSession.user?.auth !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const response = await startEnrollTotpMfa(mfaSession.user.auth, {
            idToken: mfaSession.credential,
            totpEnrollmentInfo: {}
        });
        return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);
    }
}
/**
 * The identifier of the TOTP second factor: `totp`.
 */ TotpMultiFactorGenerator.FACTOR_ID = "totp" /* FactorId.TOTP */ ;
class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(otp, enrollmentId, secret){
        super("totp" /* FactorId.TOTP */ );
        this.otp = otp;
        this.enrollmentId = enrollmentId;
        this.secret = secret;
    }
    /** @internal */ static _fromSecret(secret, otp) {
        return new TotpMultiFactorAssertionImpl(otp, undefined, secret);
    }
    /** @internal */ static _fromEnrollmentId(enrollmentId, otp) {
        return new TotpMultiFactorAssertionImpl(otp, enrollmentId);
    }
    /** @internal */ async _finalizeEnroll(auth, idToken, displayName) {
        _assert(typeof this.secret !== 'undefined', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return finalizeEnrollTotpMfa(auth, {
            idToken,
            displayName,
            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        });
    }
    /** @internal */ async _finalizeSignIn(auth, mfaPendingCredential) {
        _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        const totpVerificationInfo = {
            verificationCode: this.otp
        };
        return finalizeSignInTotpMfa(auth, {
            mfaPendingCredential,
            mfaEnrollmentId: this.enrollmentId,
            totpVerificationInfo
        });
    }
}
/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * Stores the shared secret key and other parameters to generate time-based OTPs.
 * Implements methods to retrieve the shared secret key and generate a QR code URL.
 * @public
 */ class TotpSecret {
    // The public members are declared outside the constructor so the docs can be generated.
    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth){
        this.sessionInfo = sessionInfo;
        this.auth = auth;
        this.secretKey = secretKey;
        this.hashingAlgorithm = hashingAlgorithm;
        this.codeLength = codeLength;
        this.codeIntervalSeconds = codeIntervalSeconds;
        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
    }
    /** @internal */ static _fromStartTotpMfaEnrollmentResponse(response, auth) {
        return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);
    }
    /** @internal */ _makeTotpVerificationInfo(otp) {
        return {
            sessionInfo: this.sessionInfo,
            verificationCode: otp
        };
    }
    /**
     * Returns a QR code URL as described in
     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format
     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.
     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.
     *
     * @param accountName the name of the account/app along with a user identifier.
     * @param issuer issuer of the TOTP (likely the app name).
     * @returns A QR code URL string.
     */ generateQrCodeUrl(accountName, issuer) {
        let useDefaults = false;
        if (_isEmptyString(accountName) || _isEmptyString(issuer)) useDefaults = true;
        if (useDefaults) {
            if (_isEmptyString(accountName)) accountName = this.auth.currentUser?.email || 'unknownuser';
            if (_isEmptyString(issuer)) issuer = this.auth.name;
        }
        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;
    }
}
/** @internal */ function _isEmptyString(input) {
    return typeof input === 'undefined' || input?.length === 0;
}
var name = "@firebase/auth";
var version = "1.11.0";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthInterop {
    constructor(auth){
        this.auth = auth;
        this.internalListeners = new Map();
    }
    getUid() {
        this.assertAuthConfigured();
        return this.auth.currentUser?.uid || null;
    }
    async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) return null;
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return {
            accessToken
        };
    }
    addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) return;
        const unsubscribe = this.auth.onIdTokenChanged((user)=>{
            listener(user?.stsTokenManager.accessToken || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
    }
    removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) return;
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
    }
    assertAuthConfigured() {
        _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ );
    }
    updateProactiveRefresh() {
        if (this.internalListeners.size > 0) this.auth._startProactiveRefresh();
        else this.auth._stopProactiveRefresh();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getVersionForPlatform(clientPlatform) {
    switch(clientPlatform){
        case "Node" /* ClientPlatform.NODE */ :
            return 'node';
        case "ReactNative" /* ClientPlatform.REACT_NATIVE */ :
            return 'rn';
        case "Worker" /* ClientPlatform.WORKER */ :
            return 'webworker';
        case "Cordova" /* ClientPlatform.CORDOVA */ :
            return 'cordova';
        case "WebExtension" /* ClientPlatform.WEB_EXTENSION */ :
            return 'web-extension';
        default:
            return undefined;
    }
}
/** @internal */ function registerAuth(clientPlatform) {
    (0, _app._registerComponent)(new (0, _component.Component)("auth" /* _ComponentName.AUTH */ , (container, { options: deps })=>{
        const app = container.getProvider('app').getImmediate();
        const heartbeatServiceProvider = container.getProvider('heartbeat');
        const appCheckServiceProvider = container.getProvider('app-check-internal');
        const { apiKey, authDomain } = app.options;
        _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ , {
            appName: app.name
        });
        const config = {
            apiKey,
            authDomain,
            clientPlatform,
            apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */ ,
            tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */ ,
            apiScheme: "https" /* DefaultConfig.API_SCHEME */ ,
            sdkClientVersion: _getClientVersion(clientPlatform)
        };
        const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
        _initializeAuthInstance(authInstance, deps);
        return authInstance;
    }, "PUBLIC" /* ComponentType.PUBLIC */ )/**
         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
         * For why we do this, See go/firebase-next-auth-init
         */ .setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */ )/**
         * Because all firebase products that depend on auth depend on auth-internal directly,
         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
         */ .setInstanceCreatedCallback((container, _instanceIdentifier, _instance)=>{
        const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */ );
        authInternalProvider.initialize();
    }));
    (0, _app._registerComponent)(new (0, _component.Component)("auth-internal" /* _ComponentName.AUTH_INTERNAL */ , (container)=>{
        const auth = _castAuth(container.getProvider("auth" /* _ComponentName.AUTH */ ).getImmediate());
        return ((auth)=>new AuthInterop(auth))(auth);
    }, "PRIVATE" /* ComponentType.PRIVATE */ ).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */ ));
    (0, _app.registerVersion)(name, version, getVersionForPlatform(clientPlatform));
    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation
    (0, _app.registerVersion)(name, version, 'esm2020');
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_ID_TOKEN_MAX_AGE = 300;
const authIdTokenMaxAge = (0, _util.getExperimentalSetting)('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;
let lastPostedIdToken = null;
const mintCookieFactory = (url)=>async (user)=>{
        const idTokenResult = user && await user.getIdTokenResult();
        const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
        if (idTokenAge && idTokenAge > authIdTokenMaxAge) return;
        // Specifically trip null => undefined when logged out, to delete any existing cookie
        const idToken = idTokenResult?.token;
        if (lastPostedIdToken === idToken) return;
        lastPostedIdToken = idToken;
        await fetch(url, {
            method: idToken ? 'POST' : 'DELETE',
            headers: idToken ? {
                'Authorization': `Bearer ${idToken}`
            } : {}
        });
    };
/**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */ function getAuth(app = (0, _app.getApp)()) {
    const provider = (0, _app._getProvider)(app, 'auth');
    if (provider.isInitialized()) return provider.getImmediate();
    const auth = initializeAuth(app, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
            indexedDBLocalPersistence,
            browserLocalPersistence,
            browserSessionPersistence
        ]
    });
    const authTokenSyncPath = (0, _util.getExperimentalSetting)('authTokenSyncURL');
    // Only do the Cookie exchange in a secure context
    if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {
        // Don't allow urls (XSS possibility), only paths on the same domain
        const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
        if (location.origin === authTokenSyncUrl.origin) {
            const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());
            beforeAuthStateChanged(auth, mintCookie, ()=>mintCookie(auth.currentUser));
            onIdTokenChanged(auth, (user)=>mintCookie(user));
        }
    }
    const authEmulatorHost = (0, _util.getDefaultEmulatorHost)('auth');
    if (authEmulatorHost) connectAuthEmulator(auth, `http://${authEmulatorHost}`);
    return auth;
}
function getScriptParentElement() {
    return document.getElementsByTagName('head')?.[0] ?? document;
}
_setExternalJSProvider({
    loadJS (url) {
        // TODO: consider adding timeout support & cancellation
        return new Promise((resolve, reject)=>{
            const el = document.createElement('script');
            el.setAttribute('src', url);
            el.onload = resolve;
            el.onerror = (e)=>{
                const error = _createError("internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                error.customData = e;
                reject(error);
            };
            el.type = 'text/javascript';
            el.charset = 'UTF-8';
            getScriptParentElement().appendChild(el);
        });
    },
    gapiScript: 'https://apis.google.com/js/api.js',
    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',
    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='
});
registerAuth("Browser" /* ClientPlatform.BROWSER */ );

},{"@firebase/app":"clWgn","@firebase/util":"jy04l","@firebase/logger":"9cikG","@firebase/component":"d6O5O","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ehlZb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderCadastroPage", ()=>renderCadastroPage);
var _cadastroTemplate = require("../templates/CadastroTemplate");
var _cadastroService = require("../services/CadastroService");
var _toast = require("../components/Toast");
var _firebase = require("../firebase");
var _auth = require("firebase/auth");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function renderCadastroPage(root) {
    return __awaiter(this, void 0, void 0, function*() {
        root.innerHTML = (0, _cadastroTemplate.CadastroTemplate).render();
        setupCadastroHandler();
    });
}
function setupCadastroHandler() {
    const form = document.getElementById('form-cadastro');
    if (form) form.onsubmit = handleCadastroSubmit;
    window.handleCadastroSubmit = handleCadastroSubmit;
    const btnGoogle = document.getElementById('btnGoogleCadastro');
    if (btnGoogle) btnGoogle.addEventListener('click', (e)=>__awaiter(this, void 0, void 0, function*() {
            e.preventDefault();
            yield handleCadastroComGoogle();
        }));
}
function handleCadastroComGoogle() {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const cred = yield (0, _auth.signInWithPopup)((0, _firebase.auth), (0, _firebase.provider));
            const user = cred.user;
            if (!user) throw new Error('Falha ao autenticar com Google.');
            const uid = user.uid;
            const email = user.email || '';
            const nome = user.displayName || '';
            // Sincroniza/cria usuário no backend
            try {
                yield fetch('http://localhost:3000/api/auth/sincronizar-usuario', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        uid,
                        email,
                        nome
                    })
                });
            } catch (e) {
                console.warn('Sync backend falhou (continuando):', e);
            }
            // Cria sessão no backend
            const sess = yield fetch('http://localhost:3000/api/auth/firebase-login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    uid
                })
            });
            if (!sess.ok) {
                let msg = "Falha ao criar sess\xe3o no backend.";
                try {
                    const j = yield sess.json();
                    msg = j.error || msg;
                } catch (_a) {}
                throw new Error(msg);
            }
            (0, _toast.mostrarToast)('Cadastro com Google realizado!', 'success');
            setTimeout(()=>{
                window.location.href = '/dashboard';
            }, 900);
        } catch (err) {
            console.error('[CadastroGoogle] erro:', err);
            (0, _toast.mostrarToast)((err === null || err === void 0 ? void 0 : err.message) || 'Erro no cadastro com Google', 'danger');
        }
    });
}
function handleCadastroSubmit(event) {
    return __awaiter(this, void 0, void 0, function*() {
        event.preventDefault();
        const form = event.target;
        const formData = {
            nome: form.nome.value,
            email: form.email.value,
            senha: form.senha.value,
            confirmarSenha: form.confirmarSenha.value
        };
        const validation = (0, _cadastroService.CadastroService).validate(formData);
        if (!validation.isValid) {
            validation.errors.forEach((e)=>(0, _toast.mostrarToast)(e, 'danger'));
            return;
        }
        const result = yield (0, _cadastroService.CadastroService).cadastrar(formData);
        if (result.success) setTimeout(()=>{
            window.history.pushState({}, '', '/login');
            window.dispatchEvent(new PopStateEvent('popstate'));
        }, 1200);
        else (0, _toast.mostrarToast)(result.error || 'Erro ao cadastrar', 'danger');
    });
}

},{"../templates/CadastroTemplate":"iaUR7","../services/CadastroService":"4eAyM","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT","../firebase":"eXCoT","firebase/auth":"4ZBbi"}],"iaUR7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CadastroTemplate", ()=>CadastroTemplate);
class CadastroTemplate {
    static render(params = {}) {
        return `
      <div class="container py-5">
        <div class="row justify-content-center">
          <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
              <div class="card-body p-4">
                <h2 class="mb-4 fw-bold text-center">Criar Conta</h2>
                ${params.errorMessage ? `<div class='alert alert-danger'>${params.errorMessage}</div>` : ''}
                <form id="form-cadastro" onsubmit="${params.onSubmit || 'handleCadastroSubmit'}(event)">
                  <div class="mb-3">
                    <label for="nome" class="form-label">Nome</label>
                    <input type="text" class="form-control" id="nome" name="nome" required>
                  </div>
                  <div class="mb-3">
                    <label for="email" class="form-label">E-mail</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                  </div>
                  <div class="mb-3">
                    <label for="senha" class="form-label">Senha</label>
                    <input type="password" class="form-control" id="senha" name="senha" required minlength="6">
                  </div>
                  <div class="mb-3">
                    <label for="confirmarSenha" class="form-label">Confirmar Senha</label>
                    <input type="password" class="form-control" id="confirmarSenha" name="confirmarSenha" required minlength="6">
                  </div>
                  <button type="submit" class="btn btn-primary w-100">Cadastrar</button>
                </form>
                <div class="mt-3">
                  <button id="btnGoogleCadastro" class="btn btn-outline-danger w-100">
                    <i class="bi bi-google me-1"></i> Cadastrar com Google
                  </button>
                </div>
                <div class="mt-3 text-center">
                  <a href="/login">J\xe1 tem conta? Entrar</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4eAyM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CadastroService", ()=>CadastroService);
var _toast = require("../components/Toast");
var _validators = require("../utils/validators");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let _authProvider;
class CadastroService {
    static setAuthProvider(provider) {
        _authProvider = provider;
    }
    static validate(data) {
        return (0, _validators.Validators).validateCadastro(data);
    }
    static cadastrar(data) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                if (!_authProvider) throw new Error("Auth provider n\xe3o foi configurado.");
                // Primeiro, criar usuário no Firebase
                const usuario = yield _authProvider.registrar({
                    nome: data.nome,
                    email: data.email,
                    senha: data.senha
                });
                // Depois, notificar o backend para criar o professor no repositório
                try {
                    const response = yield fetch('http://localhost:3000/api/professores/cadastro', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            nome: data.nome,
                            email: data.email,
                            senha: data.senha,
                            descricao: data.descricao,
                            conteudosDominio: data.conteudosDominio || []
                        })
                    });
                    if (!response.ok) {
                        const errorData = yield response.json();
                        console.warn("Erro no backend, mas usu\xe1rio criado no Firebase:", errorData);
                    // Não vamos falhar se o backend não responder, pois o usuário já foi criado no Firebase
                    }
                } catch (backendError) {
                    console.warn('Erro ao conectar com o backend:', backendError);
                // Não vamos falhar se o backend não estiver disponível
                }
                (0, _toast.mostrarToast)('Cadastro realizado com sucesso!', 'success');
                return {
                    success: true,
                    data: {
                        id: usuario.id,
                        nome: usuario.nome,
                        email: usuario.email
                    }
                };
            } catch (error) {
                console.error('Erro no cadastro:', error);
                // Verificar se é um erro específico do Firebase
                if (error.message.includes("email j\xe1 est\xe1 sendo usado") || error.message.includes("email j\xe1 est\xe1 cadastrado")) {
                    (0, _toast.mostrarToast)("Este email j\xe1 est\xe1 cadastrado. Tente fazer login.", 'warning');
                    // Redirecionar para login após 2 segundos
                    setTimeout(()=>{
                        window.location.href = '/login';
                    }, 2000);
                } else if (error.message.includes('senha deve ter pelo menos 6 caracteres')) (0, _toast.mostrarToast)('A senha deve ter pelo menos 6 caracteres.', 'danger');
                else if (error.message.includes("Email inv\xe1lido")) (0, _toast.mostrarToast)("Por favor, insira um email v\xe1lido.", 'danger');
                else if (error.message.includes("Cadastro com email/senha n\xe3o est\xe1 habilitado")) (0, _toast.mostrarToast)("Erro na configura\xe7\xe3o do sistema. Entre em contato com o suporte.", 'danger');
                else (0, _toast.mostrarToast)(error.message || 'Erro ao cadastrar. Tente novamente.', 'danger');
                return {
                    success: false,
                    error: error.message || 'Erro desconhecido'
                };
            }
        });
    }
}

},{"../components/Toast":"4e6Xy","../utils/validators":"k7iGK","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"j9ewb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DashboardProfessorPage", ()=>DashboardProfessorPage);
parcelHelpers.export(exports, "renderDashboardProfessorPage", ()=>renderDashboardProfessorPage);
var _dashboardTemplate = require("../templates/DashboardTemplate");
var _dashboardService = require("../services/DashboardService");
var _toast = require("../components/Toast");
var _calendarService = require("../services/calendarService");
var _aulaDetailModal = require("../components/modals/AulaDetailModal");
var _perfomance = require("../utils/perfomance");
var _aulaCard = require("../components/ui/AulaCard");
var _logger = require("../utils/logger");
var _api = require("../services/api");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class DashboardProfessorPage {
    static render() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const data = yield (0, _dashboardService.DashboardService).loadDashboardData();
                return (0, _dashboardTemplate.DashboardTemplate).render(data);
            } catch (error) {
                return this.renderErrorState();
            }
        });
    }
    static init() {
        return __awaiter(this, void 0, void 0, function*() {
            // Aplicar otimizações de performance
            (0, _perfomance.PerformanceOptimizer).applyOptimizations();
            this.setupEventListeners();
            this.setupGlobalFunctions();
            this.setupCalendar();
            yield this.refreshDashboard();
        });
    }
    static setupEventListeners() {
        setTimeout(()=>{
            // Botão de logout
            const btnLogout = document.getElementById('btn-logout');
            if (btnLogout) btnLogout.addEventListener('click', this.handleLogout.bind(this));
            // Botão nova aula
            const btnNovaAula = document.getElementById('nova-aula-btn');
            if (btnNovaAula) btnNovaAula.addEventListener('click', ()=>{
                this.showNovaAulaModal();
            });
            // Botão copiar link
            const btnCopiarLink = document.getElementById('btn-copiar-link');
            if (btnCopiarLink) btnCopiarLink.addEventListener('click', this.handleCopyLink.bind(this));
            // Botão editar perfil
            const btnEditarPerfil = document.getElementById('btn-editar-perfil');
            if (btnEditarPerfil) btnEditarPerfil.addEventListener('click', (e)=>{
                e.preventDefault();
                this.handleEditarPerfil();
            });
            // Formulário nova aula
            const formNovaAula = document.getElementById('formNovaAula');
            if (formNovaAula) formNovaAula.addEventListener('submit', this.handleSubmitNovaAula.bind(this));
            // Formulário editar aula
            const formEditarAula = document.getElementById('formEditarAula');
            if (formEditarAula) formEditarAula.addEventListener('submit', this.handleSubmitEditarAula.bind(this));
            // Botões de fechar modal e cancelar
            const closeButtons = document.querySelectorAll('[data-bs-dismiss="modal"], .modal-footer .btn-secondary');
            closeButtons.forEach((button)=>{
                button.addEventListener('click', ()=>{
                    // Fechar modal manualmente se não for data-bs-dismiss
                    const modalEl = button.closest('.modal');
                    if (modalEl && window.bootstrap) {
                        const modalInstance = window.bootstrap.Modal.getInstance(modalEl);
                        if (modalInstance) modalInstance.hide();
                    }
                    this.resetForms();
                });
            });
        }, 100);
    }
    static setupGlobalFunctions() {
        // Funções globais para serem chamadas pelos cards
        window.editarAula = this.handleEditarAula.bind(this);
        window.excluirAula = this.handleExcluirAula.bind(this);
        window.navegarMes = this.handleNavegarMes.bind(this);
    }
    static setupCalendar() {
        // Inicializar calendário quando a aba for ativada
        const calendarioTab = document.getElementById('calendario-tab');
        if (calendarioTab) calendarioTab.addEventListener('shown.bs.tab', (0, _perfomance.PerformanceOptimizer).debounce(()=>{
            this.initializeCalendar();
        }, 100));
        // Listener para cliques em eventos do calendário
        document.addEventListener('aulaCalendarClick', (event)=>{
            this.handleCalendarEventClick(event.detail);
        });
        // Inicialização imediata se o container já estiver no DOM
        // (Melhora UX: permite clique em eventos sem precisar alternar a aba)
        setTimeout(()=>__awaiter(this, void 0, void 0, function*() {
                const container = document.getElementById('calendario-container');
                if (container) try {
                    const data = yield (0, _dashboardService.DashboardService).loadDashboardData();
                    (0, _calendarService.CalendarService).initializeCalendar('calendario-container', data.aulas);
                    // Inicializar tooltips do Bootstrap
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    tooltipTriggerList.map(function(tooltipTriggerEl) {
                        return new window.bootstrap.Tooltip(tooltipTriggerEl);
                    });
                } catch (e) {
                    console.error("Falha na inicializa\xe7\xe3o imediata do calend\xe1rio:", e);
                }
            }), 150);
    }
    static initializeCalendar() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const data = yield (0, _dashboardService.DashboardService).loadDashboardData();
                const calendarContainer = document.getElementById('calendario-container');
                if (calendarContainer) {
                    (0, _calendarService.CalendarService).initializeCalendar('calendario-container', data.aulas);
                    // Inicializar tooltips do Bootstrap
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                    tooltipTriggerList.map(function(tooltipTriggerEl) {
                        return new window.bootstrap.Tooltip(tooltipTriggerEl);
                    });
                }
            } catch (error) {
                console.error("Erro ao inicializar calend\xe1rio:", error);
                (0, _toast.mostrarToast)("Erro ao carregar calend\xe1rio.", 'danger');
            }
        });
    }
    static handleCalendarEventClick(detail) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const { aulaId, event } = detail;
                const ext = event.extendedProps || {};
                const startIso = event.start ? new Date(event.start).toISOString() : new Date().toISOString();
                const duracaoMin = event.end && event.start ? Math.max(0, Math.round((new Date(event.end).getTime() - new Date(event.start).getTime()) / 60000)) : 0;
                const aulaDetail = {
                    id: String(aulaId),
                    titulo: event.title || 'Aula',
                    conteudo: ext.conteudo || '',
                    dataHora: startIso,
                    duracao: duracaoMin,
                    valor: typeof ext.valor === 'number' ? ext.valor : 0,
                    maxAlunos: typeof ext.maxAlunos === 'number' ? ext.maxAlunos : Array.isArray(ext.reservas) ? ext.reservas.length : 0,
                    status: ext.status || 'disponivel',
                    observacoes: ext.observacoes || '',
                    reservas: Array.isArray(ext.reservas) ? ext.reservas : []
                };
                // Atualizar conteúdo do modal de detalhes
                const modalEl = document.getElementById('modalAulaDetail');
                const modalBody = modalEl ? modalEl.querySelector('.modal-body') : null;
                if (modalBody) {
                    modalBody.innerHTML = (0, _aulaDetailModal.AulaDetailModal).renderContent(aulaDetail);
                    // Configurar botões do modal
                    this.setupDetailModalButtons(String(aulaId));
                    // Mostrar modal
                    const modal = new window.bootstrap.Modal(modalEl);
                    modal.show();
                }
            } catch (error) {
                console.error('Erro ao abrir detalhes da aula:', error);
                (0, _toast.mostrarToast)('Erro ao abrir detalhes da aula.', 'danger');
            }
        });
    }
    static setupDetailModalButtons(aulaId) {
        // Botão editar
        const btnEditar = document.getElementById('btn-editar-aula-detail');
        if (btnEditar) btnEditar.addEventListener('click', ()=>{
            // Fechar modal de detalhes
            const modalDetail = window.bootstrap.Modal.getInstance(document.getElementById('modalAulaDetail'));
            if (modalDetail) modalDetail.hide();
            // Abrir modal de edição
            this.handleEditarAula(aulaId);
        });
        // Botão fechar
        const btnFechar = document.getElementById('btn-fechar-detail');
        if (btnFechar) btnFechar.addEventListener('click', ()=>{
            const modalDetail = window.bootstrap.Modal.getInstance(document.getElementById('modalAulaDetail'));
            if (modalDetail) modalDetail.hide();
        });
        // Botão Reagendar (garante footer e cria se não existir)
        const modalEl = document.getElementById('modalAulaDetail');
        let footer = modalEl ? modalEl.querySelector('.modal-footer') : null;
        if (!footer && modalEl) {
            const modalContent = modalEl.querySelector('.modal-content');
            if (modalContent) {
                footer = document.createElement('div');
                footer.className = 'modal-footer';
                modalContent.appendChild(footer);
            }
        }
        let btnReagendar = document.getElementById('btn-reagendar-aula');
        if (!btnReagendar && footer) {
            btnReagendar = document.createElement('button');
            btnReagendar.id = 'btn-reagendar-aula';
            btnReagendar.type = 'button';
            btnReagendar.className = 'btn btn-warning me-2';
            btnReagendar.textContent = 'Reagendar';
            footer.insertBefore(btnReagendar, footer.firstChild);
        }
        if (btnReagendar) btnReagendar.onclick = ()=>__awaiter(this, void 0, void 0, function*() {
                try {
                    // Lê o valor do input datetime-local (opcional)
                    const inputEl = document.getElementById('input-nova-data-hora');
                    let novaIso = undefined;
                    if (inputEl && inputEl.value) {
                        // datetime-local retorna em formato local (e.g. 2025-08-20T15:00), converter para ISO
                        const local = inputEl.value;
                        const dt = new Date(local);
                        if (isNaN(dt.getTime())) {
                            (0, _toast.mostrarToast)("Data/hora inv\xe1lida.", 'danger');
                            return;
                        }
                        novaIso = dt.toISOString();
                    }
                    const resp = yield (0, _api.reagendarAulaAPI)(aulaId, novaIso);
                    if (!resp.ok) {
                        const err = yield resp.json().catch(()=>({}));
                        (0, _toast.mostrarToast)(err.error || 'Erro ao reagendar aula.', 'danger');
                        return;
                    }
                    (0, _toast.mostrarToast)('Aula reagendada com sucesso.', 'success');
                    // Fechar modal e atualizar dashboard
                    const modalDetail = window.bootstrap.Modal.getInstance(document.getElementById('modalAulaDetail'));
                    if (modalDetail) modalDetail.hide();
                    yield this.refreshDashboard();
                } catch (e) {
                    (0, _toast.mostrarToast)('Erro ao reagendar aula.', 'danger');
                }
            });
    }
    static handleLogout() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const response = yield fetch(`${(0, _api.API_BASE)}/auth/logout`, {
                    method: 'GET',
                    credentials: 'include'
                });
                if (response.ok) {
                    (0, _toast.mostrarToast)('Logout realizado com sucesso!', 'success');
                    setTimeout(()=>{
                        window.location.href = '/login';
                    }, 1000);
                } else (0, _toast.mostrarToast)('Erro ao fazer logout.', 'danger');
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao conectar com o servidor.', 'danger');
            }
        });
    }
    static handleCopyLink() {
        return __awaiter(this, void 0, void 0, function*() {
            const input = document.getElementById('input-link-publico');
            if (input) {
                const success = yield (0, _dashboardService.DashboardService).copyToClipboard(input.value);
                if (success) (0, _toast.mostrarToast)("Link copiado para a \xe1rea de transfer\xeancia!", 'success');
                else (0, _toast.mostrarToast)('Erro ao copiar link.', 'danger');
            }
        });
    }
    static handleEditarPerfil() {
        window.location.href = '/editar-perfil';
    }
    static showNovaAulaModal() {
        this.currentAulaId = null;
        const modal = new window.bootstrap.Modal(document.getElementById('modalNovaAula'));
        modal.show();
    }
    static handleEditarAula(aulaId) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const response = yield (0, _api.getAula)(aulaId);
                if (response.ok) {
                    const aula = yield response.json();
                    this.populateEditForm(aula);
                    this.currentAulaId = aulaId;
                    const modal = new window.bootstrap.Modal(document.getElementById('modalEditarAula'));
                    modal.show();
                } else {
                    let errorMsg = 'Erro ao carregar dados da aula.';
                    try {
                        const err = yield response.json();
                        errorMsg = err.error || errorMsg;
                        // Se erro de autenticação, forçar logout
                        if (response.status === 401) {
                            (0, _toast.mostrarToast)("Sess\xe3o expirada. Fa\xe7a login novamente.", 'danger');
                            setTimeout(()=>window.location.href = '/login', 1500);
                            return;
                        }
                    } catch (_a) {}
                    (0, _toast.mostrarToast)(errorMsg, 'danger');
                }
            } catch (error) {
                console.error('Erro ao editar aula:', error);
                (0, _toast.mostrarToast)((error === null || error === void 0 ? void 0 : error.message) || 'Erro ao conectar com o servidor.', 'danger');
            }
        });
    }
    // Adicionar modal de confirmação de exclusão
    static showExcluirAulaModal(aulaId) {
        let modalDiv = document.getElementById('modalExcluirAulaContainer');
        if (!modalDiv) {
            modalDiv = document.createElement('div');
            modalDiv.id = 'modalExcluirAulaContainer';
            document.body.appendChild(modalDiv);
        }
        modalDiv.innerHTML = `
      <div class="modal fade" id="modalExcluirAula" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirmar Exclus\xe3o</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              Tem certeza que deseja excluir esta aula? Esta a\xe7\xe3o n\xe3o poder\xe1 ser desfeita.
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
              <button type="button" class="btn btn-danger" id="btnConfirmarExcluirAula">Excluir</button>
            </div>
          </div>
        </div>
      </div>
    `;
        const modal = new window.bootstrap.Modal(document.getElementById('modalExcluirAula'));
        modal.show();
        const btnConfirmar = document.getElementById('btnConfirmarExcluirAula');
        if (btnConfirmar) btnConfirmar.onclick = ()=>__awaiter(this, void 0, void 0, function*() {
                yield this.confirmarExcluirAula(aulaId, modal);
            });
    }
    static confirmarExcluirAula(aulaId, modal) {
        return __awaiter(this, void 0, void 0, function*() {
            const success = yield (0, _dashboardService.DashboardService).excluirAula(aulaId);
            if (success) {
                (0, _toast.mostrarToast)("Aula exclu\xedda com sucesso!", 'success');
                modal.hide();
                try {
                    yield this.refreshDashboard();
                } catch (_a) {
                    window.location.reload();
                }
            } else (0, _toast.mostrarToast)('Erro ao excluir aula.', 'danger');
        });
    }
    static handleExcluirAula(aulaId) {
        return __awaiter(this, void 0, void 0, function*() {
            this.showExcluirAulaModal(aulaId);
        });
    }
    static handleNavegarMes(direction) {
        // Re-renderiza o calendário ao navegar entre meses
        (0, _logger.logger).debug("Navegar m\xeas:", direction);
        // Por simplicidade, recarregamos os dados e reinicializamos
        this.initializeCalendar();
    }
    static handleSubmitNovaAula(event) {
        return __awaiter(this, void 0, void 0, function*() {
            event.preventDefault();
            const formData = this.getFormData(event.target);
            // Garantir status 'disponivel' se não informado
            if (!formData.status) formData.status = 'disponivel';
            const validation = (0, _dashboardService.DashboardService).validateAulaData(formData);
            if (!validation.isValid) {
                validation.errors.forEach((error)=>(0, _toast.mostrarToast)(error, 'danger'));
                return;
            }
            try {
                const success = yield (0, _dashboardService.DashboardService).criarAula(formData);
                if (success) {
                    const modal = window.bootstrap.Modal.getInstance(document.getElementById('modalNovaAula'));
                    if (modal) modal.hide();
                    this.resetForms();
                    try {
                        yield this.refreshDashboard();
                    } catch (_a) {
                        window.location.reload();
                    }
                }
            } catch (error) {
                (0, _toast.mostrarToast)((error === null || error === void 0 ? void 0 : error.message) || 'Erro ao criar aula', 'danger');
            }
        });
    }
    static handleSubmitEditarAula(event) {
        return __awaiter(this, void 0, void 0, function*() {
            var _a;
            event.preventDefault();
            if (!this.currentAulaId) return;
            const formData = this.getFormData(event.target);
            if (!formData.status) formData.status = 'disponivel';
            const validation = (0, _dashboardService.DashboardService).validateAulaData(formData);
            if (!validation.isValid) {
                validation.errors.forEach((error)=>(0, _toast.mostrarToast)(error, 'danger'));
                return;
            }
            try {
                const success = yield (0, _dashboardService.DashboardService).editarAula(this.currentAulaId, formData);
                if (success) {
                    const modalElement = document.getElementById('modalEditarAula');
                    if (modalElement) {
                        const modal = window.bootstrap.Modal.getInstance(modalElement);
                        if (modal) modal.hide();
                    }
                    this.resetForms();
                    // Feedback e recarregamento automático para refletir as alterações
                    (0, _toast.mostrarToast)('Aula editada com sucesso!', 'success');
                    setTimeout(()=>window.location.reload(), 600);
                }
            } catch (error) {
                if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === 401) {
                    (0, _toast.mostrarToast)("Sess\xe3o expirada. Fa\xe7a login novamente.", 'danger');
                    setTimeout(()=>window.location.href = '/login', 1500);
                    return;
                }
                (0, _toast.mostrarToast)((error === null || error === void 0 ? void 0 : error.message) || 'Erro ao editar aula', 'danger');
            }
        });
    }
    static getFormData(form) {
        var _a;
        const formData = new FormData(form);
        // Converter dataHora para ISO 8601 se não estiver
        let dataHora = formData.get('dataHora');
        if (dataHora && !dataHora.endsWith('Z') && !dataHora.includes('T')) dataHora = dataHora.replace(' ', 'T');
        return {
            titulo: formData.get('titulo'),
            conteudo: formData.get('conteudo'),
            valor: parseFloat(formData.get('valor')),
            duracao: parseInt(formData.get('duracao'), 10),
            maxAlunos: Math.max(1, parseInt((_a = formData.get('maxAlunos')) !== null && _a !== void 0 ? _a : '1', 10)),
            dataHora: dataHora,
            status: formData.get('status') || 'disponivel',
            observacoes: formData.get('observacoes') || undefined
        };
    }
    static populateEditForm(aula) {
        const form = document.getElementById('formEditarAula');
        if (form) {
            form.querySelector('[name="titulo"]').value = aula.titulo;
            form.querySelector('[name="conteudo"]').value = aula.conteudo;
            form.querySelector('[name="valor"]').value = aula.valor;
            form.querySelector('[name="duracao"]').value = aula.duracao;
            form.querySelector('[name="maxAlunos"]').value = aula.maxAlunos;
            // Só atualizar se o campo estiver vazio ou diferente
            const inputDataHora = form.querySelector('[name="dataHora"]');
            // Corrigir: garantir valor válido para datetime-local
            let dataIso = '';
            if (aula.dataHora) {
                const dt = new Date(aula.dataHora);
                if (!isNaN(dt.getTime())) dataIso = dt.toISOString().slice(0, 16);
            }
            inputDataHora.value = dataIso;
            inputDataHora.setAttribute('data-original', dataIso); // Para comparar depois
            form.querySelector('[name="status"]').value = aula.status;
            form.querySelector('[name="observacoes"]').value = aula.observacoes || '';
        }
    }
    static resetForms() {
        const forms = [
            'formNovaAula',
            'formEditarAula'
        ];
        forms.forEach((formId)=>{
            const form = document.getElementById(formId);
            if (form) form.reset();
        });
        this.currentAulaId = null;
    }
    static refreshDashboard() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const data = yield (0, _dashboardService.DashboardService).loadDashboardData();
                const contentContainer = document.querySelector('.tab-content');
                if (contentContainer) {
                    const aulasContainer = contentContainer.querySelector('#aulas .row');
                    if (aulasContainer) {
                        const aulasHtml = data.aulas.length > 0 ? data.aulas.map((aula)=>`
                <div class="col-12 col-md-6 col-lg-4">
                  ${this.renderAulaCard(aula)}
                </div>
              `).join('') : `
                <div class="col-12">
                  <div class="text-center py-5">
                    <i class="bi bi-calendar3 display-1 text-muted"></i>
                    <h4 class="mt-3 text-muted">Nenhuma aula cadastrada</h4>
                    <p class="text-muted">Clique em "Nova Aula" para come\xe7ar a criar suas aulas.</p>
                  </div>
                </div>
              `;
                        aulasContainer.innerHTML = aulasHtml;
                    }
                    // Atualizar a aba de Agendamentos, incluindo Aulas Reagendadas
                    const agTab = contentContainer.querySelector('#agendamentos');
                    if (agTab) {
                        const cardBodies = agTab.querySelectorAll('.card .card-body');
                        // Pela estrutura do template: [0] Agendamentos Realizados, [1] Aulas Reagendadas
                        if (cardBodies.length >= 2) {
                            const aulasReagendadas = data.aulas.filter((a)=>(a.status || '').toLowerCase() === 'reagendada');
                            const aulasNormais = data.aulas.filter((a)=>(a.status || '').toLowerCase() !== 'reagendada');
                            const renderReserva = (reserva)=>{
                                const statusBadge = reserva.status === 'cancelado' ? '<span class="badge bg-danger ms-2">Cancelado</span>' : '<span class="badge bg-success ms-2">Agendado</span>';
                                const pagamentoBadge = reserva.pagamentoEfetivado ? '<span class="badge bg-info ms-2">Pagamento Efetivado</span>' : '';
                                return `<li class="list-group-item d-flex justify-content-between align-items-center">
                <span><b>${reserva.nome}</b> <span class="text-muted">${reserva.email || ''}</span><br><span class="text-muted">${reserva.telefone || ''}</span></span>
                <span>${statusBadge} ${pagamentoBadge}</span>
              </li>`;
                            };
                            const renderAulaAgendamento = (aula)=>{
                                const badgeClass = (aula.status || '').toLowerCase() === 'reagendada' ? 'warning text-dark' : 'primary';
                                const titulo = aula.titulo || 'Aula';
                                let dataHoraStr = '';
                                try {
                                    const d = new Date(aula.dataHora);
                                    dataHoraStr = isNaN(d.getTime()) ? String(aula.dataHora || '-') : d.toLocaleString();
                                } catch (_a) {
                                    dataHoraStr = String(aula.dataHora || '-');
                                }
                                const reservasHtml = Array.isArray(aula.reservas) && aula.reservas.length > 0 ? aula.reservas.map((r)=>renderReserva(r)).join('') : '<li class="list-group-item text-muted">Nenhuma reserva</li>';
                                return `
                <div class="mb-4">
                  <div class="fw-bold mb-2">${titulo} <span class="badge bg-${badgeClass} ms-2">${(aula.status || '').charAt(0).toUpperCase() + (aula.status || '').slice(1)}</span></div>
                  <div class="mb-1 text-muted"><b>Data/Hora:</b> ${dataHoraStr}</div>
                  <div class="mb-2"><b>Reservas:</b></div>
                  <ul class="list-group mb-2">${reservasHtml}</ul>
                </div>
              `;
                            };
                            // Preenche Agendamentos Realizados
                            cardBodies[0].innerHTML = aulasNormais.length === 0 ? '<div class="text-muted">Nenhum agendamento realizado.</div>' : aulasNormais.map(renderAulaAgendamento).join('');
                            // Preenche Aulas Reagendadas
                            cardBodies[1].innerHTML = aulasReagendadas.length === 0 ? '<div class="text-muted">Nenhuma aula reagendada.</div>' : aulasReagendadas.map(renderAulaAgendamento).join('');
                        }
                    }
                }
                // Atualizar calendário se estiver ativo
                const calendar = (0, _calendarService.CalendarService).getCalendar();
                if (calendar) (0, _calendarService.CalendarService).updateEvents(data.aulas);
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao atualizar dashboard.', 'danger');
            }
        });
    }
    static renderAulaCard(aula) {
        return (0, _aulaCard.AulaCard).render(aula);
    }
    static renderErrorState() {
        return `
      <div class="container mt-5">
        <div class="row justify-content-center">
          <div class="col-md-8">
            <div class="card">
              <div class="card-body text-center">
                <i class="bi bi-exclamation-triangle text-danger display-1"></i>
                <h4 class="mt-3 text-danger">Erro ao carregar dashboard</h4>
                <p class="text-muted">N\xe3o foi poss\xedvel carregar os dados do dashboard.</p>
                <button class="btn btn-primary" onclick="location.reload()">
                  <i class="bi bi-arrow-clockwise"></i> Tentar novamente
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}
DashboardProfessorPage.currentAulaId = null;
function renderDashboardProfessorPage(root) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const html = yield DashboardProfessorPage.render();
            root.innerHTML = html;
            yield DashboardProfessorPage.init();
        } catch (error) {
            console.error('Erro ao renderizar dashboard:', error);
            root.innerHTML = `
      <div class="container mt-5">
        <div class="row justify-content-center">
          <div class="col-md-8">
            <div class="card">
              <div class="card-body text-center">
                <i class="bi bi-exclamation-triangle text-danger display-1"></i>
                <h4 class="mt-3 text-danger">Erro ao carregar dashboard</h4>
                <p class="text-muted">N\xe3o foi poss\xedvel carregar os dados do dashboard.</p>
                <button class="btn btn-primary" onclick="location.reload()">
                  <i class="bi bi-arrow-clockwise"></i> Tentar novamente
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
        }
    });
}

},{"../templates/DashboardTemplate":"gI1PX","../services/DashboardService":"1USUh","../components/Toast":"4e6Xy","../services/calendarService":"caVG3","../components/modals/AulaDetailModal":"4vNXe","../utils/perfomance":"43l4d","../components/ui/AulaCard":"22vsH","../utils/logger":"9hvW2","../services/api":"kfpAV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gI1PX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DashboardTemplate", ()=>DashboardTemplate);
var _baseTemplate = require("./BaseTemplate");
var _button = require("../components/ui/Button");
var _aulaCard = require("../components/ui/AulaCard");
var _aulaModal = require("../components/modals/AulaModal");
var _aulaDetailModal = require("client/components/modals/AulaDetailModal");
class DashboardTemplate {
    static render(data) {
        const header = this.renderHeader(data.usuario);
        const content = this.renderContent(data.aulas);
        const modals = this.renderModals();
        return `
      ${(0, _baseTemplate.BaseTemplate).render({
            title: 'Dashboard do Professor',
            content,
            header
        })}
      ${modals}
    `;
    }
    static renderHeader(usuario) {
        const logoutButton = (0, _button.Button).render({
            text: 'Sair',
            variant: 'outline-danger',
            size: 'sm',
            className: 'ms-2',
            id: 'btn-logout'
        });
        const novaAulaButton = (0, _button.Button).render({
            text: 'Nova Aula',
            variant: 'primary',
            size: 'sm',
            className: 'ms-2',
            id: 'nova-aula-btn',
            icon: 'bi bi-plus-circle'
        });
        const editarPerfilButton = (0, _button.Button).render({
            text: 'Editar Perfil',
            variant: 'outline-secondary',
            size: 'sm',
            icon: 'bi bi-gear',
            id: 'btn-editar-perfil'
        });
        return `
      <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4 gap-3">
        <div>
          <h2 class="fw-bold mb-2 d-flex align-items-center gap-2">
            Dashboard do Professor
            ${logoutButton}
          </h2>
          <div class="d-flex align-items-center gap-3">
            <div class="d-flex align-items-center">
              <span class="fw-semibold me-2">Link p\xfablico:</span>
              <input type="text" id="input-link-publico" class="form-control form-control-sm" style="width: 300px;" readonly value="${location.origin}/professor/${usuario.linkUnico || usuario.id}">
              <button class="btn btn-outline-primary btn-sm ms-2" id="btn-copiar-link">Copiar</button>
            </div>
            ${editarPerfilButton}
            ${novaAulaButton}
          </div>
        </div>
      </div>
    `;
    }
    static renderContent(aulas) {
        // Separar aulas reagendadas e normais
        const aulasReagendadas = aulas.filter((a)=>a.status === 'reagendada');
        const aulasNormais = aulas.filter((a)=>a.status !== 'reagendada');
        const aulasHtml = aulas.length > 0 ? aulas.map((aula)=>`
          <div class="col-12 col-md-6 col-lg-4">
            ${(0, _aulaCard.AulaCard).render(aula)}
          </div>
        `).join('') : `
          <div class="col-12">
            <div class="text-center py-5">
              <i class="bi bi-calendar3 display-1 text-muted"></i>
              <h4 class="mt-3 text-muted">Nenhuma aula cadastrada</h4>
              <p class="text-muted">Clique em "Nova Aula" para come\xe7ar a criar suas aulas.</p>
            </div>
          </div>
        `;
        return `
      <!-- Navega\xe7\xe3o por abas -->
      <ul class="nav nav-tabs mb-4" id="dashboardTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link active" id="aulas-tab" data-bs-toggle="tab" data-bs-target="#aulas" type="button" role="tab">
            <i class="bi bi-calendar3"></i> Minhas Aulas
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="calendario-tab" data-bs-toggle="tab" data-bs-target="#calendario" type="button" role="tab">
            <i class="bi bi-calendar-month"></i> Calend\xe1rio
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="agendamentos-tab" data-bs-toggle="tab" data-bs-target="#agendamentos" type="button" role="tab">
            <i class="bi bi-people"></i> Agendamentos
          </button>
        </li>
      </ul>

      <!-- Conte\xfado das abas -->
      <div class="tab-content" id="dashboardTabContent">
        <!-- Aba: Minhas Aulas -->
        <div class="tab-pane fade show active" id="aulas" role="tabpanel">
          <div class="row g-4">
            ${aulasHtml}
          </div>
        </div>

        <!-- Aba: Calend\xe1rio -->
        <div class="tab-pane fade" id="calendario" role="tabpanel">
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">Calend\xe1rio de Aulas</h5>
              <div class="btn-group">
                <button class="btn btn-outline-secondary btn-sm" onclick="navegarMes(-1)">
                  <i class="bi bi-chevron-left"></i>
                </button>
                <button class="btn btn-outline-secondary btn-sm" onclick="navegarMes(1)">
                  <i class="bi bi-chevron-right"></i>
                </button>
              </div>
            </div>
            <div class="card-body">
              <div id="calendario-container">
                <!-- Calend\xe1rio ser\xe1 renderizado aqui -->
              </div>
            </div>
          </div>
        </div>

        <!-- Aba: Agendamentos -->
        <div class="tab-pane fade" id="agendamentos" role="tabpanel">
          <div class="card mb-4">
            <div class="card-header bg-primary text-white">
              <h5 class="mb-0"><i class="bi bi-list-check me-2"></i>Agendamentos Realizados</h5>
            </div>
            <div class="card-body">
              ${aulasNormais.length === 0 ? '<div class="text-muted">Nenhum agendamento realizado.</div>' : aulasNormais.map((aula)=>renderAulaAgendamento(aula)).join('')}
            </div>
          </div>
          <div class="card">
            <div class="card-header bg-warning text-dark">
              <h5 class="mb-0"><i class="bi bi-arrow-repeat me-2"></i>Aulas Reagendadas</h5>
            </div>
            <div class="card-body">
              ${aulasReagendadas.length === 0 ? '<div class="text-muted">Nenhuma aula reagendada.</div>' : aulasReagendadas.map((aula)=>renderAulaAgendamento(aula)).join('')}
            </div>
          </div>
        </div>
      </div>
    `;
        // Função auxiliar para exibir reservas de cada aula
        function renderAulaAgendamento(aula) {
            return `
        <div class="mb-4">
          <div class="fw-bold mb-2">${aula.titulo} <span class="badge bg-${aula.status === 'reagendada' ? 'warning text-dark' : 'primary'} ms-2">${aula.status.charAt(0).toUpperCase() + aula.status.slice(1)}</span></div>
          <div class="mb-1 text-muted"><b>Data/Hora:</b> ${new Date(aula.dataHora).toLocaleString()}</div>
          <div class="mb-2"><b>Reservas:</b></div>
          <ul class="list-group mb-2">
            ${aula.reservas && aula.reservas.length > 0 ? aula.reservas.map((r)=>renderReserva(r)).join('') : '<li class="list-group-item text-muted">Nenhuma reserva</li>'}
          </ul>
        </div>
      `;
        }
        function renderReserva(reserva) {
            let statusBadge = '';
            if (reserva.status === 'cancelado') statusBadge = '<span class="badge bg-danger ms-2">Cancelado</span>';
            else statusBadge = '<span class="badge bg-success ms-2">Agendado</span>';
            let pagamentoBadge = reserva.pagamentoEfetivado ? '<span class="badge bg-info ms-2">Pagamento Efetivado</span>' : '';
            return `<li class="list-group-item d-flex justify-content-between align-items-center">
        <span><b>${reserva.nome}</b> <span class="text-muted">${reserva.email}</span><br><span class="text-muted">${reserva.telefone || ''}</span></span>
        <span>${statusBadge} ${pagamentoBadge}</span>
      </li>`;
        }
    }
    static renderModals() {
        return `
      ${(0, _aulaModal.AulaModal).renderNovaAula()}
      ${(0, _aulaModal.AulaModal).renderEditarAula({})}
      ${(0, _aulaDetailModal.AulaDetailModal).render({
            id: '',
            titulo: '',
            conteudo: '',
            dataHora: '',
            duracao: 0,
            valor: 0,
            maxAlunos: 0,
            status: '',
            reservas: []
        })}
    `;
    }
}

},{"./BaseTemplate":"g6D83","../components/ui/Button":"90wAd","../components/ui/AulaCard":"22vsH","../components/modals/AulaModal":"59Ubm","client/components/modals/AulaDetailModal":"4vNXe","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"g6D83":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseTemplate", ()=>BaseTemplate);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class BaseTemplate {
    static render(props) {
        const { title, content, header = '', footer = '', containerClass = 'container-fluid bg-light min-vh-100', bodyClass = 'container py-4' } = props;
        return `
      <div class="${containerClass}">
        ${header}
        <div class="${bodyClass}">
          ${content}
        </div>
        ${footer}
      </div>
    `;
    }
    static renderWithTitle(props) {
        const { title } = props, templateProps = __rest(props, [
            "title"
        ]);
        const titleContent = `
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">${title}</h2>
      </div>
    `;
        return this.render(Object.assign(Object.assign({}, templateProps), {
            title,
            content: titleContent + templateProps.content
        }));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"90wAd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Button", ()=>Button);
class Button {
    static render(props) {
        const { text, type = 'button', variant = 'primary', size = 'md', disabled = false, icon, className = '', id = '' } = props;
        const sizeClass = size === 'sm' ? 'btn-sm' : size === 'lg' ? 'btn-lg' : '';
        const disabledAttr = disabled ? 'disabled' : '';
        const iconHtml = icon ? `<i class="${icon}"></i> ` : '';
        const idAttr = id ? `id="${id}"` : '';
        return `
      <button 
        type="${type}" 
        class="btn btn-${variant} ${sizeClass} ${className}" 
        ${disabledAttr}
        ${idAttr}
      >
        ${iconHtml}${text}
      </button>
    `;
    }
    static renderWithClick(props) {
        const buttonHtml = this.render(props);
        if (props.onClick) return buttonHtml.replace('<button', `<button onclick="(${props.onClick.toString()})()"`);
        return buttonHtml;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"22vsH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AulaCard", ()=>AulaCard);
var _card = require("./Card");
class AulaCard {
    static render(aula) {
        var _a, _b, _c, _d;
        const headerActions = `
      <div class="dropdown">
        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
          <i class="bi bi-three-dots"></i>
        </button>
        <ul class="dropdown-menu">
          <li><a class="dropdown-item" href="#" onclick="editarAula('${aula.id}')">
            <i class="bi bi-pencil"></i> Editar
          </a></li>
          <li><a class="dropdown-item" href="#" onclick="excluirAula('${aula.id}')">
            <i class="bi bi-trash"></i> Excluir
          </a></li>
        </ul>
      </div>
    `;
        const content = `
      <div class="row mb-3">
        <div class="col-6">
          <small class="text-muted">Conte\xfado</small>
          <div class="fw-semibold">${aula.conteudo}</div>
        </div>
        <div class="col-6">
          <small class="text-muted">Data/Hora</small>
          <div class="fw-semibold">${new Date(aula.dataHora).toLocaleString()}</div>
        </div>
      </div>
      <div class="row mb-3">
        <div class="col-6">
          <small class="text-muted">Dura\xe7\xe3o</small>
          <div class="fw-semibold">${aula.duracaoFormatada || aula.duracao + ' min'}</div>
        </div>
        <div class="col-6">
          <small class="text-muted">Valor</small>
          <div class="fw-semibold text-success">R$ ${((_a = aula.valor) === null || _a === void 0 ? void 0 : _a.toFixed(2)) || '-'}</div>
        </div>
      </div>
      <div class="row mb-3">
        <div class="col-6">
          <small class="text-muted">Vagas</small>
          <div class="fw-semibold">${(_b = aula.vagasRestantes) !== null && _b !== void 0 ? _b : aula.maxAlunos - (((_c = aula.reservas) === null || _c === void 0 ? void 0 : _c.length) || 0)} / ${aula.maxAlunos}</div>
        </div>
        <div class="col-6">
          <small class="text-muted">Status</small>
          <div><span class="badge bg-${this.getStatusColor(aula.status)}">${aula.status}</span></div>
        </div>
      </div>
      ${aula.observacoes ? `
        <div class="mb-3">
          <small class="text-muted">Observa\xe7\xf5es</small>
          <div class="fw-semibold">${aula.observacoes}</div>
        </div>
      ` : ''}
      <!-- Informa\xe7\xe3o de vagas -->
      <div class="mt-3">
        <small class="text-muted">
          <i class="bi bi-people"></i> Vagas: ${((_d = aula.reservas) === null || _d === void 0 ? void 0 : _d.length) || 0}/${aula.maxAlunos}
        </small>
      </div>
    `;
        return (0, _card.Card).render({
            title: aula.titulo,
            content,
            headerActions,
            className: 'h-100'
        });
    }
    static getStatusColor(status) {
        switch(status){
            case 'disponivel':
                return 'success';
            case 'lotada':
                return 'warning';
            case 'cancelada':
                return 'danger';
            case 'reagendada':
                return 'info'; // Adicionado para reagendada
            default:
                return 'secondary';
        }
    }
}

},{"./Card":"lrAOV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lrAOV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Card", ()=>Card);
class Card {
    static render(props) {
        const { title, content, footer, className = '', id = '', headerActions = '' } = props;
        const idAttr = id ? `id="${id}"` : '';
        const titleHtml = title ? `
      <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="card-title mb-0">${title}</h6>
        ${headerActions}
      </div>
    ` : '';
        const footerHtml = footer ? `<div class="card-footer">${footer}</div>` : '';
        return `
      <div class="card h-100 shadow-sm ${className}" ${idAttr}>
        ${titleHtml}
        <div class="card-body">
          ${content}
        </div>
        ${footerHtml}
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"59Ubm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AulaModal", ()=>AulaModal);
var _modal = require("./Modal");
var _formField = require("../forms/FormField");
var _button = require("../ui/Button");
class AulaModal {
    static renderNovaAula() {
        const content = `
      <input type="hidden" name="aulaId">
      <div class="row">
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: "T\xedtulo",
            name: 'titulo',
            type: 'text',
            required: true
        })}
        </div>
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: "Conte\xfado",
            name: 'conteudo',
            type: 'text',
            required: true
        })}
        </div>
      </div>
      <div class="row">
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: 'Valor (R$)',
            name: 'valor',
            type: 'number',
            step: '0.01',
            required: true
        })}
        </div>
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: "Dura\xe7\xe3o (minutos)",
            name: 'duracao',
            type: 'number',
            required: true
        })}
        </div>
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: 'Vagas',
            name: 'maxAlunos',
            type: 'number',
            min: '1',
            value: '1',
            required: true
        })}
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: 'Data/Hora',
            name: 'dataHora',
            type: 'datetime-local',
            required: true
        })}
        </div>
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: 'Status',
            name: 'status',
            type: 'select',
            options: [
                {
                    value: 'disponivel',
                    label: "Dispon\xedvel"
                },
                {
                    value: 'lotada',
                    label: 'Lotada'
                },
                {
                    value: 'cancelada',
                    label: 'Cancelada'
                }
            ]
        })}
        </div>
      </div>
      ${(0, _formField.FormField).render({
            label: "Observa\xe7\xf5es",
            name: 'observacoes',
            type: 'textarea',
            rows: 3
        })}
    `;
        const footer = `
      ${(0, _button.Button).render({
            text: 'Cancelar',
            type: 'button',
            variant: 'secondary',
            className: 'me-2'
        })}
      ${(0, _button.Button).render({
            text: 'Salvar',
            type: 'submit',
            variant: 'primary'
        })}
    `;
        return (0, _modal.Modal).renderFormModal({
            id: 'modalNovaAula',
            title: 'Nova Aula',
            content,
            footer,
            formId: 'formNovaAula',
            size: 'lg'
        });
    }
    static renderEditarAula(aulaData) {
        const content = `
      <input type="hidden" name="aulaId" id="editAulaId" value="${aulaData.titulo || ''}">
      <div class="row">
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: "T\xedtulo",
            name: 'titulo',
            type: 'text',
            value: aulaData.titulo || '',
            required: true,
            id: 'editTitulo'
        })}
        </div>
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: "Conte\xfado",
            name: 'conteudo',
            type: 'text',
            value: aulaData.conteudo || '',
            required: true,
            id: 'editConteudo'
        })}
        </div>
      </div>
      <div class="row">
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: 'Valor (R$)',
            name: 'valor',
            type: 'number',
            value: aulaData.valor || '',
            step: '0.01',
            required: true,
            id: 'editValor'
        })}
        </div>
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: "Dura\xe7\xe3o (minutos)",
            name: 'duracao',
            type: 'number',
            value: aulaData.duracao || '',
            required: true,
            id: 'editDuracao'
        })}
        </div>
        <div class="col-md-4">
          ${(0, _formField.FormField).render({
            label: 'Vagas',
            name: 'maxAlunos',
            type: 'number',
            value: aulaData.maxAlunos || '',
            min: '1',
            required: true,
            id: 'editMaxAlunos'
        })}
        </div>
      </div>
      <div class="row">
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: 'Data/Hora',
            name: 'dataHora',
            type: 'datetime-local',
            value: aulaData.dataHora || '',
            required: true,
            id: 'editDataHora'
        })}
        </div>
        <div class="col-md-6">
          ${(0, _formField.FormField).render({
            label: 'Status',
            name: 'status',
            type: 'select',
            value: aulaData.status || 'disponivel',
            options: [
                {
                    value: 'disponivel',
                    label: "Dispon\xedvel"
                },
                {
                    value: 'lotada',
                    label: 'Lotada'
                },
                {
                    value: 'cancelada',
                    label: 'Cancelada'
                }
            ],
            id: 'editStatus'
        })}
        </div>
      </div>
      ${(0, _formField.FormField).render({
            label: "Observa\xe7\xf5es",
            name: 'observacoes',
            type: 'textarea',
            value: aulaData.observacoes || '',
            rows: 3,
            id: 'editObservacoes'
        })}
    `;
        const footer = `
      ${(0, _button.Button).render({
            text: 'Cancelar',
            type: 'button',
            variant: 'secondary',
            className: 'me-2'
        })}
      ${(0, _button.Button).render({
            text: "Salvar Altera\xe7\xf5es",
            type: 'submit',
            variant: 'primary'
        })}
    `;
        return (0, _modal.Modal).renderFormModal({
            id: 'modalEditarAula',
            title: 'Editar Aula',
            content,
            footer,
            formId: 'formEditarAula',
            size: 'lg'
        });
    }
}

},{"./Modal":"ipcs0","../forms/FormField":"7F0nZ","../ui/Button":"90wAd","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ipcs0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Modal", ()=>Modal);
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
class Modal {
    static render(props) {
        const { id, title, content, footer = '', size = 'md', closeButton = true } = props;
        const sizeClass = size === 'sm' ? 'modal-sm' : size === 'lg' ? 'modal-lg' : size === 'xl' ? 'modal-xl' : '';
        const closeButtonHtml = closeButton ? '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>' : '';
        return `
      <div class="modal fade" id="${id}" tabindex="-1" aria-labelledby="${id}Label" aria-hidden="true">
        <div class="modal-dialog ${sizeClass}">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="${id}Label">${title}</h5>
              ${closeButtonHtml}
            </div>
            <div class="modal-body">
              ${content}
            </div>
            ${footer ? `<div class="modal-footer">${footer}</div>` : ''}
          </div>
        </div>
      </div>
    `;
    }
    static renderFormModal(props) {
        const { formId, footer = '' } = props, modalProps = __rest(props, [
            "formId",
            "footer"
        ]);
        const formContent = `
      <form id="${formId}">
        ${modalProps.content}
        ${footer ? `<div class='modal-footer'>${footer}</div>` : ''}
      </form>
    `;
        return this.render(Object.assign(Object.assign({}, modalProps), {
            content: formContent,
            footer: '' // Não renderizar footer fora do form
        }));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7F0nZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormField", ()=>FormField);
class FormField {
    static render(props) {
        const { label, name, type, value = '', required = false, placeholder = '', className = '', id = '', options = [], rows = 3, step, min, max, disabled = false } = props;
        const idAttr = id ? `id="${id}"` : '';
        const requiredAttr = required ? 'required' : '';
        const disabledAttr = disabled ? 'disabled' : '';
        const stepAttr = step ? `step="${step}"` : '';
        const minAttr = min ? `min="${min}"` : '';
        const maxAttr = max ? `max="${max}"` : '';
        let inputHtml = '';
        if (type === 'textarea') inputHtml = `
        <textarea 
          class="form-control ${className}" 
          name="${name}" 
          ${idAttr}
          ${requiredAttr}
          ${disabledAttr}
          placeholder="${placeholder}"
          rows="${rows}"
        >${value}</textarea>
      `;
        else if (type === 'select') {
            const optionsHtml = options.map((option)=>`<option value="${option.value}" ${value === option.value ? 'selected' : ''}>${option.label}</option>`).join('');
            inputHtml = `
        <select 
          class="form-control ${className}" 
          name="${name}" 
          ${idAttr}
          ${requiredAttr}
          ${disabledAttr}
        >
          ${optionsHtml}
        </select>
      `;
        } else inputHtml = `
        <input 
          type="${type}" 
          class="form-control ${className}" 
          name="${name}" 
          value="${value}"
          ${idAttr}
          ${requiredAttr}
          ${disabledAttr}
          ${stepAttr}
          ${minAttr}
          ${maxAttr}
          placeholder="${placeholder}"
        >
      `;
        return `
      <div class="mb-3">
        <label class="form-label">${label}</label>
        ${inputHtml}
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4vNXe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AulaDetailModal", ()=>AulaDetailModal);
var _modal = require("./Modal");
var _button = require("../ui/Button");
class AulaDetailModal {
    static render(aula) {
        const dataHora = new Date(aula.dataHora);
        const duracaoFormatada = this.formatDuracao(aula.duracao);
        const statusBadge = this.getStatusBadge(aula.status);
        const content = `
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">T\xedtulo</label>
            <div class="form-control-plaintext">${aula.titulo}</div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Status</label>
            <div class="form-control-plaintext">${statusBadge}</div>
          </div>
        </div>
      </div>
      
      <div class="mb-3">
        <label class="form-label fw-bold">Conte\xfado</label>
        <div class="form-control-plaintext">${aula.conteudo}</div>
      </div>
      
      <div class="row">
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Data/Hora</label>
            <div class="form-control-plaintext">${dataHora.toLocaleString()}</div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Dura\xe7\xe3o</label>
            <div class="form-control-plaintext">${duracaoFormatada}</div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Valor</label>
            <div class="form-control-plaintext text-success fw-bold">R$ ${aula.valor.toFixed(2)}</div>
          </div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Vagas</label>
            <div class="form-control-plaintext">${aula.reservas.length} / ${aula.maxAlunos}</div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Vagas Restantes</label>
            <div class="form-control-plaintext">${aula.maxAlunos - aula.reservas.length}</div>
          </div>
        </div>
      </div>
      
      ${aula.observacoes ? `
        <div class="mb-3">
          <label class="form-label fw-bold">Observa\xe7\xf5es</label>
          <div class="form-control-plaintext">${aula.observacoes}</div>
        </div>
      ` : ''}
      
      <div class="mb-3">
        <label class="form-label fw-bold">Reservas (${aula.reservas.length})</label>
        <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
          ${aula.reservas.length > 0 ? aula.reservas.map((reserva)=>this.renderReserva(reserva)).join('') : '<div class="text-muted">Nenhuma reserva realizada.</div>'}
        </div>
      </div>
    `;
        const footer = `
      ${(0, _button.Button).render({
            text: 'Reagendar',
            type: 'button',
            variant: 'warning',
            className: 'me-2',
            id: 'btn-reagendar-aula'
        })}
      ${(0, _button.Button).render({
            text: 'Editar Aula',
            type: 'button',
            variant: 'primary',
            className: 'me-2',
            id: 'btn-editar-aula-detail'
        })}
      ${(0, _button.Button).render({
            text: 'Fechar',
            type: 'button',
            variant: 'secondary',
            id: 'btn-fechar-detail'
        })}
    `;
        return (0, _modal.Modal).renderFormModal({
            id: 'modalAulaDetail',
            title: 'Detalhes da Aula',
            content,
            footer,
            formId: 'formAulaDetail',
            size: 'lg'
        });
    }
    static renderContent(aula) {
        const dataHora = new Date(aula.dataHora);
        const duracaoFormatada = this.formatDuracao(aula.duracao);
        const statusBadge = this.getStatusBadge(aula.status);
        return `
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">T\xedtulo</label>
            <div class="form-control-plaintext">${aula.titulo}</div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Status</label>
            <div class="form-control-plaintext">${statusBadge}</div>
          </div>
        </div>
      </div>
      
      <div class="mb-3">
        <label class="form-label fw-bold">Conte\xfado</label>
        <div class="form-control-plaintext">${aula.conteudo}</div>
      </div>
      
      <div class="row">
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Data/Hora</label>
            <div class="form-control-plaintext">${dataHora.toLocaleString()}</div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Dura\xe7\xe3o</label>
            <div class="form-control-plaintext">${duracaoFormatada}</div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold">Valor</label>
            <div class="form-control-plaintext text-success fw-bold">R$ ${aula.valor.toFixed(2)}</div>
          </div>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Vagas</label>
            <div class="form-control-plaintext">${aula.reservas.length} / ${aula.maxAlunos}</div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="mb-3">
            <label class="form-label fw-bold">Vagas Restantes</label>
            <div class="form-control-plaintext">${aula.maxAlunos - aula.reservas.length}</div>
          </div>
        </div>
      </div>
      
      ${aula.observacoes ? `
        <div class="mb-3">
          <label class="form-label fw-bold">Observa\xe7\xf5es</label>
          <div class="form-control-plaintext">${aula.observacoes}</div>
        </div>
      ` : ''}
      
      <div class="mb-3">
        <label class="form-label fw-bold">Reservas (${aula.reservas.length})</label>
        <div class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
          ${aula.reservas.length > 0 ? aula.reservas.map((reserva)=>this.renderReserva(reserva)).join('') : '<div class="text-muted">Nenhuma reserva realizada.</div>'}
        </div>
      </div>

      <div class="mt-4">
        <div class="border rounded-3 p-3 bg-light" id="container-reagendar-aula">
          <div class="d-flex align-items-center mb-2">
            <i class="bi bi-arrow-repeat me-2 text-warning"></i>
            <h6 class="mb-0">Reagendar Aula</h6>
          </div>
          <div class="row g-3 align-items-end">
            <div class="col-sm-6 col-md-5 col-lg-4">
              <label for="input-nova-data-hora" class="form-label">Nova data/hora (opcional)</label>
              <input type="datetime-local" id="input-nova-data-hora" class="form-control" />
            </div>
            <div class="col-12">
              <small class="text-muted">Preencha a nova data/hora ou deixe em branco para somente marcar como reagendada.</small>
            </div>
          </div>
        </div>
      </div>
    `;
    }
    static formatDuracao(minutos) {
        const horas = Math.floor(minutos / 60);
        const mins = minutos % 60;
        if (horas > 0) return `${horas}h ${mins > 0 ? `${mins}min` : ''}`.trim();
        return `${mins}min`;
    }
    static getStatusBadge(status) {
        const statusMap = {
            'disponivel': {
                class: 'bg-success',
                label: "Dispon\xedvel"
            },
            'lotada': {
                class: 'bg-primary',
                label: 'Lotada'
            },
            'cancelada': {
                class: 'bg-danger',
                label: 'Cancelada'
            },
            'reagendada': {
                class: 'bg-warning text-dark',
                label: 'Reagendada'
            }
        };
        const statusInfo = statusMap[status] || {
            class: 'bg-secondary',
            label: status
        };
        return `<span class="badge ${statusInfo.class}">${statusInfo.label}</span>`;
    }
    static renderReserva(reserva) {
        const statusBadge = reserva.status === 'cancelado' ? '<span class="badge bg-danger">Cancelado</span>' : '<span class="badge bg-success">Agendado</span>';
        const pagamentoBadge = reserva.pagamentoEfetivado ? '<span class="badge bg-info ms-1">Pagamento Efetivado</span>' : '';
        return `
      <div class="d-flex justify-content-between align-items-center mb-2 p-2 border-bottom">
        <div>
          <strong>${reserva.nome}</strong><br>
          <small class="text-muted">${reserva.email} | ${reserva.telefone}</small>
        </div>
        <div>
          ${statusBadge} ${pagamentoBadge}
        </div>
      </div>
    `;
    }
}

},{"./Modal":"ipcs0","../ui/Button":"90wAd","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1USUh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DashboardService", ()=>DashboardService);
var _api = require("./api");
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class DashboardService {
    static loadDashboardData() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const [aulasRes, perfilRes] = yield Promise.all([
                    (0, _api.getMinhasAulas)(),
                    (0, _api.getPerfilProfessor)()
                ]);
                const aulasRaw = aulasRes.ok ? yield aulasRes.json() : [];
                // Mapear campos do backend para o formato esperado pelo card
                const aulas = aulasRaw.map((aula)=>{
                    var _a, _b, _c, _d, _e, _f, _g;
                    return {
                        id: (_a = aula.id) !== null && _a !== void 0 ? _a : '',
                        titulo: (_b = aula.titulo) !== null && _b !== void 0 ? _b : '',
                        conteudo: (_c = aula.conteudo) !== null && _c !== void 0 ? _c : '',
                        valor: aula.valor != null ? Number(aula.valor) : 0,
                        duracao: aula.duracao != null ? Number(aula.duracao) : 0,
                        dataHora: (_e = (_d = aula.data_hora) !== null && _d !== void 0 ? _d : aula.dataHora) !== null && _e !== void 0 ? _e : '',
                        maxAlunos: aula.vagas_total != null ? Number(aula.vagas_total) : aula.maxAlunos != null ? Number(aula.maxAlunos) : 0,
                        status: (_f = aula.status) !== null && _f !== void 0 ? _f : '',
                        observacoes: (_g = aula.observacoes) !== null && _g !== void 0 ? _g : '',
                        reservas: Array.isArray(aula.reservas) ? aula.reservas : []
                    };
                });
                const usuario = perfilRes.ok ? yield perfilRes.json() : {};
                return {
                    usuario,
                    aulas
                };
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao carregar dados do dashboard.', 'danger');
                return {
                    usuario: {},
                    aulas: []
                };
            }
        });
    }
    static criarAula(aulaData) {
        return __awaiter(this, void 0, void 0, function*() {
            var _a, _b, _c, _d, _e, _f;
            try {
                const payload = Object.assign(Object.assign({}, aulaData), {
                    valor: parseFloat((_b = (_a = aulaData.valor) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '0'),
                    duracao: parseInt((_d = (_c = aulaData.duracao) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '0', 10),
                    vagas_total: Math.max(1, parseInt((_f = (_e = aulaData.maxAlunos) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : '1', 10)),
                    data_hora: aulaData.dataHora
                });
                const res = yield (0, _api.criarAula)(payload);
                if (res.ok) {
                    (0, _toast.mostrarToast)('Aula criada com sucesso!', 'success');
                    return true;
                } else {
                    const err = yield res.json();
                    (0, _toast.mostrarToast)('Erro ao criar aula: ' + (err.error || 'Erro desconhecido'), 'danger');
                    return false;
                }
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao conectar com o servidor.', 'danger');
                return false;
            }
        });
    }
    static editarAula(aulaId, aulaData) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const payload = {
                    titulo: aulaData.titulo,
                    conteudo: aulaData.conteudo,
                    valor: parseFloat(aulaData.valor.toString()),
                    duracao: parseInt(aulaData.duracao.toString(), 10),
                    vagas_total: parseInt(aulaData.maxAlunos.toString(), 10),
                    data_hora: aulaData.dataHora,
                    status: aulaData.status,
                    observacoes: aulaData.observacoes || ''
                };
                // @ts-ignore: o backend espera esses campos
                const res = yield (0, _api.editarAula)(aulaId, payload);
                if (res.ok) {
                    (0, _toast.mostrarToast)('Aula editada com sucesso!', 'success');
                    return true;
                } else {
                    const err = yield res.json();
                    (0, _toast.mostrarToast)('Erro ao editar aula: ' + (err.error || 'Erro desconhecido'), 'danger');
                    return false;
                }
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao conectar com o servidor.', 'danger');
                return false;
            }
        });
    }
    static excluirAula(aulaId) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield (0, _api.excluirAula)(aulaId);
                if (res.ok) {
                    (0, _toast.mostrarToast)("Aula exclu\xedda com sucesso!", 'success');
                    return true;
                } else {
                    (0, _toast.mostrarToast)('Erro ao excluir aula.', 'danger');
                    return false;
                }
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao conectar com o servidor.', 'danger');
                return false;
            }
        });
    }
    static copyToClipboard(text) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                yield navigator.clipboard.writeText(text);
                return true;
            } catch (error) {
                return false;
            }
        });
    }
    static validateAulaData(aulaData) {
        var _a, _b;
        const errors = [];
        if (!((_a = aulaData.titulo) === null || _a === void 0 ? void 0 : _a.trim())) errors.push("T\xedtulo \xe9 obrigat\xf3rio");
        if (!((_b = aulaData.conteudo) === null || _b === void 0 ? void 0 : _b.trim())) errors.push("Conte\xfado \xe9 obrigat\xf3rio");
        if (!aulaData.valor || aulaData.valor <= 0) errors.push('Valor deve ser maior que zero');
        if (!aulaData.duracao || aulaData.duracao <= 0) errors.push("Dura\xe7\xe3o deve ser maior que zero");
        if (!aulaData.maxAlunos || aulaData.maxAlunos <= 0) errors.push("N\xfamero de vagas deve ser maior que zero");
        if (!aulaData.dataHora) errors.push("Data e hora s\xe3o obrigat\xf3rios");
        const validStatuses = [
            'disponivel',
            'lotada',
            'cancelada',
            'reagendada'
        ];
        if (aulaData.status && !validStatuses.includes(aulaData.status)) errors.push("Status inv\xe1lido");
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}

},{"./api":"kfpAV","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kfpAV":[function(require,module,exports,__globalThis) {
// Serviço centralizado de API para o frontend EduClick
// Todas as funções retornam o resultado da chamada fetch (ou lançam erro)
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "API_BASE", ()=>API_BASE);
// Auth
parcelHelpers.export(exports, "loginProfessor", ()=>loginProfessor);
parcelHelpers.export(exports, "cadastroProfessor", ()=>cadastroProfessor);
parcelHelpers.export(exports, "logoutProfessor", ()=>logoutProfessor);
// Perfil
parcelHelpers.export(exports, "getPerfilProfessor", ()=>getPerfilProfessor);
parcelHelpers.export(exports, "editarPerfilProfessor", ()=>editarPerfilProfessor);
// Aulas (professor)
parcelHelpers.export(exports, "getMinhasAulas", ()=>getMinhasAulas);
parcelHelpers.export(exports, "criarAula", ()=>criarAula);
parcelHelpers.export(exports, "editarAula", ()=>editarAula);
parcelHelpers.export(exports, "excluirAula", ()=>excluirAula);
// Horários indisponíveis
parcelHelpers.export(exports, "getHorariosIndisponiveis", ()=>getHorariosIndisponiveis);
parcelHelpers.export(exports, "adicionarHorarioIndisponivel", ()=>adicionarHorarioIndisponivel);
parcelHelpers.export(exports, "removerHorarioIndisponivel", ()=>removerHorarioIndisponivel);
// Agendamentos (professor)
parcelHelpers.export(exports, "getAgendamentosRecebidos", ()=>getAgendamentosRecebidos);
parcelHelpers.export(exports, "atualizarStatusAgendamento", ()=>atualizarStatusAgendamento);
// Página pública do professor
parcelHelpers.export(exports, "getProfessorPublico", ()=>getProfessorPublico);
parcelHelpers.export(exports, "getAulasPublicas", ()=>getAulasPublicas);
parcelHelpers.export(exports, "reservarAulaPublica", ()=>reservarAulaPublica);
// Agendamentos públicos (aluno)
parcelHelpers.export(exports, "agendarComProfessor", ()=>agendarComProfessor);
parcelHelpers.export(exports, "getInfoProfessor", ()=>getInfoProfessor);
parcelHelpers.export(exports, "getAgendamentosAluno", ()=>getAgendamentosAluno);
// Aulas (detalhes e cancelamento)
parcelHelpers.export(exports, "getAula", ()=>getAula);
parcelHelpers.export(exports, "editarAulaAPI", ()=>editarAulaAPI);
parcelHelpers.export(exports, "excluirAulaAPI", ()=>excluirAulaAPI);
parcelHelpers.export(exports, "cancelarReservaAPI", ()=>cancelarReservaAPI);
// Reagendar aula (professor)
parcelHelpers.export(exports, "reagendarAulaAPI", ()=>reagendarAulaAPI);
// Página pública do professor (perfil + aulas)
parcelHelpers.export(exports, "getPerfilEAulasPublicas", ()=>getPerfilEAulasPublicas);
// Utilitário de tratamento
parcelHelpers.export(exports, "handleApiResponse", ()=>handleApiResponse);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const API_BASE = 'http://localhost:3000/api';
// Auth
function fetchComToken(url_1) {
    return __awaiter(this, arguments, void 0, function*(url, options = {}) {
        // Sempre envia o cookie de sessão
        return fetch(url, Object.assign(Object.assign({}, options), {
            headers: Object.assign(Object.assign({}, options.headers), {
                'Content-Type': 'application/json'
            }),
            credentials: 'include'
        }));
    });
}
function loginProfessor(email, senha) {
    return __awaiter(this, void 0, void 0, function*() {
        return fetch(`${API_BASE}/professores/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email,
                senha
            }),
            credentials: 'include'
        });
    });
}
function cadastroProfessor(data) {
    return __awaiter(this, void 0, void 0, function*() {
        return fetch(`${API_BASE}/professores/cadastro`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
    });
}
function logoutProfessor() {
    return __awaiter(this, void 0, void 0, function*() {
        return fetch(`${API_BASE}/professores/logout`, {
            method: 'POST',
            credentials: 'include'
        });
    });
}
function getPerfilProfessor() {
    return fetchComToken(`${API_BASE}/professores/me`);
}
function editarPerfilProfessor(data) {
    return fetchComToken(`${API_BASE}/professores/me`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}
function getMinhasAulas() {
    return fetchComToken(`${API_BASE}/aulas/minhas-aulas`);
}
function criarAula(data) {
    return fetchComToken(`${API_BASE}/aulas/criar`, {
        method: 'POST',
        body: JSON.stringify(data)
    });
}
function editarAula(aulaId, data) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}
function excluirAula(aulaId) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}`, {
        method: 'DELETE'
    });
}
function getHorariosIndisponiveis() {
    return fetchComToken(`${API_BASE}/professores/me/horarios-indisponiveis`);
}
function adicionarHorarioIndisponivel(data) {
    return fetchComToken(`${API_BASE}/professores/me/horarios-indisponiveis`, {
        method: 'POST',
        body: JSON.stringify(data)
    });
}
function removerHorarioIndisponivel(id) {
    return fetchComToken(`${API_BASE}/professores/me/horarios-indisponiveis/${id}`, {
        method: 'DELETE'
    });
}
function getAgendamentosRecebidos() {
    return fetchComToken(`${API_BASE}/professores/me/agendamentos`);
}
function atualizarStatusAgendamento(id, status) {
    return fetchComToken(`${API_BASE}/agendamentos/${id}/status`, {
        method: 'PUT',
        body: JSON.stringify({
            status
        })
    });
}
function getProfessorPublico(linkUnico) {
    const ts = Date.now();
    return fetch(`${API_BASE}/professor-publico/${encodeURIComponent(linkUnico)}?_ts=${ts}`, {
        cache: 'no-store'
    });
}
function getAulasPublicas(linkUnico) {
    const ts = Date.now();
    return fetch(`${API_BASE}/professor-publico/${encodeURIComponent(linkUnico)}/aulas?_ts=${ts}`, {
        cache: 'no-store'
    });
}
function reservarAulaPublica(linkUnico, aulaId, reserva) {
    return fetch(`${API_BASE}/professor-publico/${encodeURIComponent(linkUnico)}/reservar`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(reserva)
    });
}
function agendarComProfessor(professorId, agendamento) {
    return fetch(`${API_BASE}/professores/${professorId}/agendamentos`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(agendamento)
    });
}
function getInfoProfessor(professorId) {
    return fetch(`${API_BASE}/professores/${professorId}`);
}
function getAgendamentosAluno(professorId, telefone) {
    return fetch(`${API_BASE}/professores/${professorId}/agendamentos/aluno/${telefone}`);
}
function getAula(aulaId) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}`);
}
function editarAulaAPI(aulaId, data) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}`, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}
function excluirAulaAPI(aulaId) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}`, {
        method: 'DELETE'
    });
}
function cancelarReservaAPI(aulaId, nome, telefone) {
    return fetchComToken(`${API_BASE}/aulas/${aulaId}/cancelar-reserva`, {
        method: 'POST',
        body: JSON.stringify({
            nome,
            telefone
        })
    });
}
function reagendarAulaAPI(aulaId, novaDataHora) {
    const body = {};
    if (novaDataHora) body.nova_data_hora = novaDataHora;
    return fetchComToken(`${API_BASE}/aulas/${aulaId}/reagendar`, {
        method: 'PUT',
        body: JSON.stringify(body)
    });
}
function getPerfilEAulasPublicas(linkUnico) {
    const ts = Date.now();
    return fetch(`${API_BASE}/professor-publico/${encodeURIComponent(linkUnico)}?_ts=${ts}`, {
        cache: 'no-store'
    });
}
function handleApiResponse(response) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            if (!response.ok) {
                const errorData = yield response.json().catch(()=>({
                        error: 'Erro desconhecido'
                    }));
                return {
                    success: false,
                    error: errorData.error || `Erro ${response.status}`
                };
            }
            const data = yield response.json();
            return {
                success: true,
                data
            };
        } catch (error) {
            return {
                success: false,
                error: 'Erro ao processar resposta'
            };
        }
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"caVG3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CalendarService", ()=>CalendarService);
var _core = require("@fullcalendar/core");
var _daygrid = require("@fullcalendar/daygrid");
var _daygridDefault = parcelHelpers.interopDefault(_daygrid);
var _timegrid = require("@fullcalendar/timegrid");
var _timegridDefault = parcelHelpers.interopDefault(_timegrid);
var _interaction = require("@fullcalendar/interaction");
var _interactionDefault = parcelHelpers.interopDefault(_interaction);
var _list = require("@fullcalendar/list");
var _listDefault = parcelHelpers.interopDefault(_list);
var _calendarLocale = require("../utils/calendarLocale");
class CalendarService {
    static initializeCalendar(containerId, aulas) {
        // Carregamento lazy - só inicializar quando necessário
        if (this.isInitialized && this.calendar) {
            this.updateEvents(aulas);
            return this.calendar;
        }
        // Destruir calendário existente se houver
        if (this.calendar) this.calendar.destroy();
        const events = this.convertAulasToEvents(aulas);
        const options = {
            plugins: [
                (0, _daygridDefault.default),
                (0, _timegridDefault.default),
                (0, _interactionDefault.default),
                (0, _listDefault.default)
            ],
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            },
            initialView: 'dayGridMonth',
            locale: (0, _calendarLocale.calendarLocale),
            height: 'auto',
            events: events,
            eventClick: this.handleEventClick.bind(this),
            eventDidMount: this.handleEventDidMount.bind(this),
            dayMaxEvents: true,
            moreLinkClick: 'popover',
            eventTimeFormat: {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            },
            slotMinTime: '06:00:00',
            slotMaxTime: '22:00:00',
            slotDuration: '00:30:00',
            selectable: true,
            selectMirror: true,
            weekends: true,
            editable: false,
            selectConstraint: 'businessHours',
            businessHours: {
                daysOfWeek: [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0
                ],
                startTime: '06:00',
                endTime: '22:00'
            }
        };
        try {
            this.calendar = new (0, _core.Calendar)(document.getElementById(containerId), options);
            this.calendar.render();
            this.isInitialized = true;
            return this.calendar;
        } catch (error) {
            console.error("Erro ao inicializar calend\xe1rio:", error);
            throw error;
        }
    }
    static convertAulasToEvents(aulas) {
        return aulas.map((aula)=>{
            const startDate = new Date(aula.dataHora);
            const endDate = new Date(startDate.getTime() + aula.duracao * 60000); // duração em minutos
            const { backgroundColor, borderColor, textColor } = this.getEventColors(aula.status);
            return {
                id: aula.id,
                title: aula.titulo,
                start: startDate,
                end: endDate,
                backgroundColor,
                borderColor,
                textColor,
                extendedProps: {
                    aulaId: aula.id,
                    status: aula.status,
                    reservas: aula.reservas || [],
                    professorId: aula.professorId,
                    conteudo: aula.conteudo,
                    valor: aula.valor,
                    maxAlunos: aula.maxAlunos,
                    observacoes: aula.observacoes
                }
            };
        });
    }
    static getEventColors(status) {
        switch(status){
            case 'disponivel':
                return {
                    backgroundColor: '#28a745',
                    borderColor: '#1e7e34',
                    textColor: '#ffffff'
                };
            case 'lotada':
                return {
                    backgroundColor: '#007bff',
                    borderColor: '#0056b3',
                    textColor: '#ffffff'
                };
            case 'cancelada':
                return {
                    backgroundColor: '#dc3545',
                    borderColor: '#c82333',
                    textColor: '#ffffff'
                };
            case 'reagendada':
                return {
                    backgroundColor: '#ffc107',
                    borderColor: '#e0a800',
                    textColor: '#212529'
                };
            default:
                return {
                    backgroundColor: '#6c757d',
                    borderColor: '#545b62',
                    textColor: '#ffffff'
                };
        }
    }
    static handleEventClick(info) {
        try {
            const event = info.event;
            const aulaId = event.extendedProps.aulaId;
            // Disparar evento customizado com payload simplificado/estável
            const customEvent = new CustomEvent('aulaCalendarClick', {
                detail: {
                    aulaId,
                    event: {
                        title: event.title,
                        start: event.start ? event.start.toISOString() : null,
                        end: event.end ? event.end.toISOString() : null,
                        extendedProps: Object.assign({}, event.extendedProps)
                    }
                }
            });
            document.dispatchEvent(customEvent);
        } catch (error) {
            console.error('Erro ao lidar com clique no evento:', error);
        }
    }
    static handleEventDidMount(info) {
        var _a;
        try {
            const event = info.event;
            const reservas = event.extendedProps.reservas || [];
            if (info.el) {
                const tooltipContent = `
          <div class="calendar-tooltip">
            <strong>${event.title}</strong><br>
            <small>Status: ${event.extendedProps.status}</small><br>
            <small>Reservas: ${reservas.length}/${event.extendedProps.maxAlunos}</small><br>
            <small>Valor: R$ ${((_a = event.extendedProps.valor) === null || _a === void 0 ? void 0 : _a.toFixed(2)) || '0.00'}</small>
          </div>
        `;
                info.el.setAttribute('title', tooltipContent);
                info.el.setAttribute('data-bs-toggle', 'tooltip');
                info.el.setAttribute('data-bs-html', 'true');
                // Inicializar tooltip Bootstrap manualmente
                if (window.bootstrap && window.bootstrap.Tooltip) new window.bootstrap.Tooltip(info.el);
            }
        } catch (error) {
            console.error('Erro ao montar evento:', error);
        }
    }
    static updateEvents(aulas) {
        try {
            if (this.calendar) {
                const events = this.convertAulasToEvents(aulas);
                this.calendar.removeAllEvents();
                this.calendar.addEventSource(events);
            }
        } catch (error) {
            console.error('Erro ao atualizar eventos:', error);
        }
    }
    static destroy() {
        try {
            if (this.calendar) {
                this.calendar.destroy();
                this.calendar = null;
                this.isInitialized = false;
            }
        } catch (error) {
            console.error("Erro ao destruir calend\xe1rio:", error);
        }
    }
    static getCalendar() {
        return this.calendar;
    }
}
CalendarService.calendar = null;
CalendarService.isInitialized = false;

},{"@fullcalendar/core":"9u9jF","@fullcalendar/daygrid":"jiZAV","@fullcalendar/timegrid":"l0uCF","@fullcalendar/interaction":"b6rIQ","@fullcalendar/list":"l9dNA","../utils/calendarLocale":"3naQt","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9u9jF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JsonRequestError", ()=>(0, _internalCommonJs.ae));
parcelHelpers.export(exports, "Calendar", ()=>Calendar);
parcelHelpers.export(exports, "createPlugin", ()=>createPlugin);
parcelHelpers.export(exports, "formatDate", ()=>formatDate);
parcelHelpers.export(exports, "formatRange", ()=>formatRange);
parcelHelpers.export(exports, "globalLocales", ()=>globalLocales);
parcelHelpers.export(exports, "globalPlugins", ()=>globalPlugins);
parcelHelpers.export(exports, "sliceEvents", ()=>sliceEvents);
parcelHelpers.export(exports, "version", ()=>version);
var _internalCommonJs = require("./internal-common.js");
var _preact = require("preact");
var _compat = require("preact/compat");
const globalLocales = [];
const MINIMAL_RAW_EN_LOCALE = {
    code: 'en',
    week: {
        dow: 0,
        doy: 4
    },
    direction: 'ltr',
    buttonText: {
        prev: 'prev',
        next: 'next',
        prevYear: 'prev year',
        nextYear: 'next year',
        year: 'year',
        today: 'today',
        month: 'month',
        week: 'week',
        day: 'day',
        list: 'list'
    },
    weekText: 'W',
    weekTextLong: 'Week',
    closeHint: 'Close',
    timeHint: 'Time',
    eventHint: 'Event',
    allDayText: 'all-day',
    moreLinkText: 'more',
    noEventsText: 'No events to display'
};
const RAW_EN_LOCALE = Object.assign(Object.assign({}, MINIMAL_RAW_EN_LOCALE), {
    // Includes things we don't want other locales to inherit,
    // things that derive from other translatable strings.
    buttonHints: {
        prev: 'Previous $0',
        next: 'Next $0',
        today (buttonText, unit) {
            return unit === 'day' ? 'Today' : `This ${buttonText}`;
        }
    },
    viewHint: '$0 view',
    navLinkHint: 'Go to $0',
    moreLinkHint (eventCnt) {
        return `Show ${eventCnt} more event${eventCnt === 1 ? '' : 's'}`;
    }
});
function organizeRawLocales(explicitRawLocales) {
    let defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
    let allRawLocales = globalLocales.concat(explicitRawLocales);
    let rawLocaleMap = {
        en: RAW_EN_LOCALE
    };
    for (let rawLocale of allRawLocales)rawLocaleMap[rawLocale.code] = rawLocale;
    return {
        map: rawLocaleMap,
        defaultCode
    };
}
function buildLocale(inputSingular, available) {
    if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) return parseLocale(inputSingular.code, [
        inputSingular.code
    ], inputSingular);
    return queryLocale(inputSingular, available);
}
function queryLocale(codeArg, available) {
    let codes = [].concat(codeArg || []); // will convert to array
    let raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
    return parseLocale(codeArg, codes, raw);
}
function queryRawLocale(codes, available) {
    for(let i = 0; i < codes.length; i += 1){
        let parts = codes[i].toLocaleLowerCase().split('-');
        for(let j = parts.length; j > 0; j -= 1){
            let simpleId = parts.slice(0, j).join('-');
            if (available[simpleId]) return available[simpleId];
        }
    }
    return null;
}
function parseLocale(codeArg, codes, raw) {
    let merged = (0, _internalCommonJs.m)([
        MINIMAL_RAW_EN_LOCALE,
        raw
    ], [
        'buttonText'
    ]);
    delete merged.code; // don't want this part of the options
    let { week } = merged;
    delete merged.week;
    return {
        codeArg,
        codes,
        week,
        simpleNumberFormat: new Intl.NumberFormat(codeArg),
        options: merged
    };
}
// TODO: easier way to add new hooks? need to update a million things
function createPlugin(input) {
    return {
        id: (0, _internalCommonJs.g)(),
        name: input.name,
        premiumReleaseDate: input.premiumReleaseDate ? new Date(input.premiumReleaseDate) : undefined,
        deps: input.deps || [],
        reducers: input.reducers || [],
        isLoadingFuncs: input.isLoadingFuncs || [],
        contextInit: [].concat(input.contextInit || []),
        eventRefiners: input.eventRefiners || {},
        eventDefMemberAdders: input.eventDefMemberAdders || [],
        eventSourceRefiners: input.eventSourceRefiners || {},
        isDraggableTransformers: input.isDraggableTransformers || [],
        eventDragMutationMassagers: input.eventDragMutationMassagers || [],
        eventDefMutationAppliers: input.eventDefMutationAppliers || [],
        dateSelectionTransformers: input.dateSelectionTransformers || [],
        datePointTransforms: input.datePointTransforms || [],
        dateSpanTransforms: input.dateSpanTransforms || [],
        views: input.views || {},
        viewPropsTransformers: input.viewPropsTransformers || [],
        isPropsValid: input.isPropsValid || null,
        externalDefTransforms: input.externalDefTransforms || [],
        viewContainerAppends: input.viewContainerAppends || [],
        eventDropTransformers: input.eventDropTransformers || [],
        componentInteractions: input.componentInteractions || [],
        calendarInteractions: input.calendarInteractions || [],
        themeClasses: input.themeClasses || {},
        eventSourceDefs: input.eventSourceDefs || [],
        cmdFormatter: input.cmdFormatter,
        recurringTypes: input.recurringTypes || [],
        namedTimeZonedImpl: input.namedTimeZonedImpl,
        initialView: input.initialView || '',
        elementDraggingImpl: input.elementDraggingImpl,
        optionChangeHandlers: input.optionChangeHandlers || {},
        scrollGridImpl: input.scrollGridImpl || null,
        listenerRefiners: input.listenerRefiners || {},
        optionRefiners: input.optionRefiners || {},
        propSetHandlers: input.propSetHandlers || {}
    };
}
function buildPluginHooks(pluginDefs, globalDefs) {
    let currentPluginIds = {};
    let hooks = {
        premiumReleaseDate: undefined,
        reducers: [],
        isLoadingFuncs: [],
        contextInit: [],
        eventRefiners: {},
        eventDefMemberAdders: [],
        eventSourceRefiners: {},
        isDraggableTransformers: [],
        eventDragMutationMassagers: [],
        eventDefMutationAppliers: [],
        dateSelectionTransformers: [],
        datePointTransforms: [],
        dateSpanTransforms: [],
        views: {},
        viewPropsTransformers: [],
        isPropsValid: null,
        externalDefTransforms: [],
        viewContainerAppends: [],
        eventDropTransformers: [],
        componentInteractions: [],
        calendarInteractions: [],
        themeClasses: {},
        eventSourceDefs: [],
        cmdFormatter: null,
        recurringTypes: [],
        namedTimeZonedImpl: null,
        initialView: '',
        elementDraggingImpl: null,
        optionChangeHandlers: {},
        scrollGridImpl: null,
        listenerRefiners: {},
        optionRefiners: {},
        propSetHandlers: {}
    };
    function addDefs(defs) {
        for (let def of defs){
            const pluginName = def.name;
            const currentId = currentPluginIds[pluginName];
            if (currentId === undefined) {
                currentPluginIds[pluginName] = def.id;
                addDefs(def.deps);
                hooks = combineHooks(hooks, def);
            } else if (currentId !== def.id) // different ID than the one already added
            console.warn(`Duplicate plugin '${pluginName}'`);
        }
    }
    if (pluginDefs) addDefs(pluginDefs);
    addDefs(globalDefs);
    return hooks;
}
function buildBuildPluginHooks() {
    let currentOverrideDefs = [];
    let currentGlobalDefs = [];
    let currentHooks;
    return (overrideDefs, globalDefs)=>{
        if (!currentHooks || !(0, _internalCommonJs.i)(overrideDefs, currentOverrideDefs) || !(0, _internalCommonJs.i)(globalDefs, currentGlobalDefs)) currentHooks = buildPluginHooks(overrideDefs, globalDefs);
        currentOverrideDefs = overrideDefs;
        currentGlobalDefs = globalDefs;
        return currentHooks;
    };
}
function combineHooks(hooks0, hooks1) {
    return {
        premiumReleaseDate: compareOptionalDates(hooks0.premiumReleaseDate, hooks1.premiumReleaseDate),
        reducers: hooks0.reducers.concat(hooks1.reducers),
        isLoadingFuncs: hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),
        contextInit: hooks0.contextInit.concat(hooks1.contextInit),
        eventRefiners: Object.assign(Object.assign({}, hooks0.eventRefiners), hooks1.eventRefiners),
        eventDefMemberAdders: hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),
        eventSourceRefiners: Object.assign(Object.assign({}, hooks0.eventSourceRefiners), hooks1.eventSourceRefiners),
        isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
        eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
        eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
        dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
        datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
        dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
        views: Object.assign(Object.assign({}, hooks0.views), hooks1.views),
        viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
        isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
        externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
        viewContainerAppends: hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),
        eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
        calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
        componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
        themeClasses: Object.assign(Object.assign({}, hooks0.themeClasses), hooks1.themeClasses),
        eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
        cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
        recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
        namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
        initialView: hooks0.initialView || hooks1.initialView,
        elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
        optionChangeHandlers: Object.assign(Object.assign({}, hooks0.optionChangeHandlers), hooks1.optionChangeHandlers),
        scrollGridImpl: hooks1.scrollGridImpl || hooks0.scrollGridImpl,
        listenerRefiners: Object.assign(Object.assign({}, hooks0.listenerRefiners), hooks1.listenerRefiners),
        optionRefiners: Object.assign(Object.assign({}, hooks0.optionRefiners), hooks1.optionRefiners),
        propSetHandlers: Object.assign(Object.assign({}, hooks0.propSetHandlers), hooks1.propSetHandlers)
    };
}
function compareOptionalDates(date0, date1) {
    if (date0 === undefined) return date1;
    if (date1 === undefined) return date0;
    return new Date(Math.max(date0.valueOf(), date1.valueOf()));
}
class StandardTheme extends (0, _internalCommonJs.T) {
}
StandardTheme.prototype.classes = {
    root: 'fc-theme-standard',
    tableCellShaded: 'fc-cell-shaded',
    buttonGroup: 'fc-button-group',
    button: 'fc-button fc-button-primary',
    buttonActive: 'fc-button-active'
};
StandardTheme.prototype.baseIconClass = 'fc-icon';
StandardTheme.prototype.iconClasses = {
    close: 'fc-icon-x',
    prev: 'fc-icon-chevron-left',
    next: 'fc-icon-chevron-right',
    prevYear: 'fc-icon-chevrons-left',
    nextYear: 'fc-icon-chevrons-right'
};
StandardTheme.prototype.rtlIconClasses = {
    prev: 'fc-icon-chevron-right',
    next: 'fc-icon-chevron-left',
    prevYear: 'fc-icon-chevrons-right',
    nextYear: 'fc-icon-chevrons-left'
};
StandardTheme.prototype.iconOverrideOption = 'buttonIcons'; // TODO: make TS-friendly
StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';
function compileViewDefs(defaultConfigs, overrideConfigs) {
    let hash = {};
    let viewType;
    for(viewType in defaultConfigs)ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    for(viewType in overrideConfigs)ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    return hash;
}
function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
    if (hash[viewType]) return hash[viewType];
    let viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);
    if (viewDef) hash[viewType] = viewDef;
    return viewDef;
}
function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
    let defaultConfig = defaultConfigs[viewType];
    let overrideConfig = overrideConfigs[viewType];
    let queryProp = (name)=>defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
    let theComponent = queryProp('component');
    let superType = queryProp('superType');
    let superDef = null;
    if (superType) {
        if (superType === viewType) throw new Error('Can\'t have a custom view type that references itself');
        superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
    }
    if (!theComponent && superDef) theComponent = superDef.component;
    if (!theComponent) return null; // don't throw a warning, might be settings for a single-unit view
    return {
        type: viewType,
        component: theComponent,
        defaults: Object.assign(Object.assign({}, superDef ? superDef.defaults : {}), defaultConfig ? defaultConfig.rawOptions : {}),
        overrides: Object.assign(Object.assign({}, superDef ? superDef.overrides : {}), overrideConfig ? overrideConfig.rawOptions : {})
    };
}
function parseViewConfigs(inputs) {
    return (0, _internalCommonJs.a)(inputs, parseViewConfig);
}
function parseViewConfig(input) {
    let rawOptions = typeof input === 'function' ? {
        component: input
    } : input;
    let { component } = rawOptions;
    if (rawOptions.content) // TODO: remove content/classNames/didMount/etc from options?
    component = createViewHookComponent(rawOptions);
    else if (component && !(component.prototype instanceof (0, _internalCommonJs.B))) // WHY?: people were using `component` property for `content`
    // TODO: converge on one setting name
    component = createViewHookComponent(Object.assign(Object.assign({}, rawOptions), {
        content: component
    }));
    return {
        superType: rawOptions.type,
        component: component,
        rawOptions
    };
}
function createViewHookComponent(options) {
    return (viewProps)=>(0, _preact.createElement)((0, _internalCommonJs.V).Consumer, null, (context)=>(0, _preact.createElement)((0, _internalCommonJs.C), {
                elTag: "div",
                elClasses: (0, _internalCommonJs.b)(context.viewSpec),
                renderProps: Object.assign(Object.assign({}, viewProps), {
                    nextDayThreshold: context.options.nextDayThreshold
                }),
                generatorName: undefined,
                customGenerator: options.content,
                classNameGenerator: options.classNames,
                didMount: options.didMount,
                willUnmount: options.willUnmount
            }));
}
function buildViewSpecs(defaultInputs, optionOverrides, dynamicOptionOverrides, localeDefaults) {
    let defaultConfigs = parseViewConfigs(defaultInputs);
    let overrideConfigs = parseViewConfigs(optionOverrides.views);
    let viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
    return (0, _internalCommonJs.a)(viewDefs, (viewDef)=>buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults));
}
function buildViewSpec(viewDef, overrideConfigs, optionOverrides, dynamicOptionOverrides, localeDefaults) {
    let durationInput = viewDef.overrides.duration || viewDef.defaults.duration || dynamicOptionOverrides.duration || optionOverrides.duration;
    let duration = null;
    let durationUnit = '';
    let singleUnit = '';
    let singleUnitOverrides = {};
    if (durationInput) {
        duration = createDurationCached(durationInput);
        if (duration) {
            let denom = (0, _internalCommonJs.c)(duration);
            durationUnit = denom.unit;
            if (denom.value === 1) {
                singleUnit = durationUnit;
                singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].rawOptions : {};
            }
        }
    }
    let queryButtonText = (optionsSubset)=>{
        let buttonTextMap = optionsSubset.buttonText || {};
        let buttonTextKey = viewDef.defaults.buttonTextKey;
        if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) return buttonTextMap[buttonTextKey];
        if (buttonTextMap[viewDef.type] != null) return buttonTextMap[viewDef.type];
        if (buttonTextMap[singleUnit] != null) return buttonTextMap[singleUnit];
        return null;
    };
    let queryButtonTitle = (optionsSubset)=>{
        let buttonHints = optionsSubset.buttonHints || {};
        let buttonKey = viewDef.defaults.buttonTextKey; // use same key as text
        if (buttonKey != null && buttonHints[buttonKey] != null) return buttonHints[buttonKey];
        if (buttonHints[viewDef.type] != null) return buttonHints[viewDef.type];
        if (buttonHints[singleUnit] != null) return buttonHints[singleUnit];
        return null;
    };
    return {
        type: viewDef.type,
        component: viewDef.component,
        duration,
        durationUnit,
        singleUnit,
        optionDefaults: viewDef.defaults,
        optionOverrides: Object.assign(Object.assign({}, singleUnitOverrides), viewDef.overrides),
        buttonTextOverride: queryButtonText(dynamicOptionOverrides) || queryButtonText(optionOverrides) || // constructor-specified buttonText lookup hash takes precedence
        viewDef.overrides.buttonText,
        buttonTextDefault: queryButtonText(localeDefaults) || viewDef.defaults.buttonText || queryButtonText((0, _internalCommonJs.e)) || viewDef.type,
        // not DRY
        buttonTitleOverride: queryButtonTitle(dynamicOptionOverrides) || queryButtonTitle(optionOverrides) || viewDef.overrides.buttonHint,
        buttonTitleDefault: queryButtonTitle(localeDefaults) || viewDef.defaults.buttonHint || queryButtonTitle((0, _internalCommonJs.e))
    };
}
// hack to get memoization working
let durationInputMap = {};
function createDurationCached(durationInput) {
    let json = JSON.stringify(durationInput);
    let res = durationInputMap[json];
    if (res === undefined) {
        res = (0, _internalCommonJs.d)(durationInput);
        durationInputMap[json] = res;
    }
    return res;
}
function reduceViewType(viewType, action) {
    switch(action.type){
        case 'CHANGE_VIEW_TYPE':
            viewType = action.viewType;
    }
    return viewType;
}
function reduceCurrentDate(currentDate, action) {
    switch(action.type){
        case 'CHANGE_DATE':
            return action.dateMarker;
        default:
            return currentDate;
    }
}
// should be initialized once and stay constant
// this will change too
function getInitialDate(options, dateEnv, nowManager) {
    let initialDateInput = options.initialDate;
    // compute the initial ambig-timezone date
    if (initialDateInput != null) return dateEnv.createMarker(initialDateInput);
    return nowManager.getDateMarker();
}
function reduceDynamicOptionOverrides(dynamicOptionOverrides, action) {
    switch(action.type){
        case 'SET_OPTION':
            return Object.assign(Object.assign({}, dynamicOptionOverrides), {
                [action.optionName]: action.rawOptionValue
            });
        default:
            return dynamicOptionOverrides;
    }
}
function reduceDateProfile(currentDateProfile, action, currentDate, dateProfileGenerator) {
    let dp;
    switch(action.type){
        case 'CHANGE_VIEW_TYPE':
            return dateProfileGenerator.build(action.dateMarker || currentDate);
        case 'CHANGE_DATE':
            return dateProfileGenerator.build(action.dateMarker);
        case 'PREV':
            dp = dateProfileGenerator.buildPrev(currentDateProfile, currentDate);
            if (dp.isValid) return dp;
            break;
        case 'NEXT':
            dp = dateProfileGenerator.buildNext(currentDateProfile, currentDate);
            if (dp.isValid) return dp;
            break;
    }
    return currentDateProfile;
}
function initEventSources(calendarOptions, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null;
    return addSources({}, parseInitialSources(calendarOptions, context), activeRange, context);
}
function reduceEventSources(eventSources, action, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?
    switch(action.type){
        case 'ADD_EVENT_SOURCES':
            return addSources(eventSources, action.sources, activeRange, context);
        case 'REMOVE_EVENT_SOURCE':
            return removeSource(eventSources, action.sourceId);
        case 'PREV':
        case 'NEXT':
        case 'CHANGE_DATE':
        case 'CHANGE_VIEW_TYPE':
            if (dateProfile) return fetchDirtySources(eventSources, activeRange, context);
            return eventSources;
        case 'FETCH_EVENT_SOURCES':
            return fetchSourcesByIds(eventSources, action.sourceIds ? (0, _internalCommonJs.f)(action.sourceIds) : excludeStaticSources(eventSources, context), activeRange, action.isRefetch || false, context);
        case 'RECEIVE_EVENTS':
        case 'RECEIVE_EVENT_ERROR':
            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);
        case 'REMOVE_ALL_EVENT_SOURCES':
            return {};
        default:
            return eventSources;
    }
}
function reduceEventSourcesNewTimeZone(eventSources, dateProfile, context) {
    let activeRange = dateProfile ? dateProfile.activeRange : null; // need this check?
    return fetchSourcesByIds(eventSources, excludeStaticSources(eventSources, context), activeRange, true, context);
}
function computeEventSourcesLoading(eventSources) {
    for(let sourceId in eventSources){
        if (eventSources[sourceId].isFetching) return true;
    }
    return false;
}
function addSources(eventSourceHash, sources, fetchRange, context) {
    let hash = {};
    for (let source of sources)hash[source.sourceId] = source;
    if (fetchRange) hash = fetchDirtySources(hash, fetchRange, context);
    return Object.assign(Object.assign({}, eventSourceHash), hash);
}
function removeSource(eventSourceHash, sourceId) {
    return (0, _internalCommonJs.h)(eventSourceHash, (eventSource)=>eventSource.sourceId !== sourceId);
}
function fetchDirtySources(sourceHash, fetchRange, context) {
    return fetchSourcesByIds(sourceHash, (0, _internalCommonJs.h)(sourceHash, (eventSource)=>isSourceDirty(eventSource, fetchRange, context)), fetchRange, false, context);
}
function isSourceDirty(eventSource, fetchRange, context) {
    if (!doesSourceNeedRange(eventSource, context)) return !eventSource.latestFetchId;
    return !context.options.lazyFetching || !eventSource.fetchRange || eventSource.isFetching || // always cancel outdated in-progress fetches
    fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
}
function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, isRefetch, context) {
    let nextSources = {};
    for(let sourceId in prevSources){
        let source = prevSources[sourceId];
        if (sourceIdHash[sourceId]) nextSources[sourceId] = fetchSource(source, fetchRange, isRefetch, context);
        else nextSources[sourceId] = source;
    }
    return nextSources;
}
function fetchSource(eventSource, fetchRange, isRefetch, context) {
    let { options, calendarApi } = context;
    let sourceDef = context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];
    let fetchId = (0, _internalCommonJs.g)();
    sourceDef.fetch({
        eventSource,
        range: fetchRange,
        isRefetch,
        context
    }, (res)=>{
        let { rawEvents } = res;
        if (options.eventSourceSuccess) rawEvents = options.eventSourceSuccess.call(calendarApi, rawEvents, res.response) || rawEvents;
        if (eventSource.success) rawEvents = eventSource.success.call(calendarApi, rawEvents, res.response) || rawEvents;
        context.dispatch({
            type: 'RECEIVE_EVENTS',
            sourceId: eventSource.sourceId,
            fetchId,
            fetchRange,
            rawEvents
        });
    }, (error)=>{
        let errorHandled = false;
        if (options.eventSourceFailure) {
            options.eventSourceFailure.call(calendarApi, error);
            errorHandled = true;
        }
        if (eventSource.failure) {
            eventSource.failure(error);
            errorHandled = true;
        }
        if (!errorHandled) console.warn(error.message, error);
        context.dispatch({
            type: 'RECEIVE_EVENT_ERROR',
            sourceId: eventSource.sourceId,
            fetchId,
            fetchRange,
            error
        });
    });
    return Object.assign(Object.assign({}, eventSource), {
        isFetching: true,
        latestFetchId: fetchId
    });
}
function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
    let eventSource = sourceHash[sourceId];
    if (eventSource && // not already removed
    fetchId === eventSource.latestFetchId) return Object.assign(Object.assign({}, sourceHash), {
        [sourceId]: Object.assign(Object.assign({}, eventSource), {
            isFetching: false,
            fetchRange
        })
    });
    return sourceHash;
}
function excludeStaticSources(eventSources, context) {
    return (0, _internalCommonJs.h)(eventSources, (eventSource)=>doesSourceNeedRange(eventSource, context));
}
function parseInitialSources(rawOptions, context) {
    let refiners = (0, _internalCommonJs.j)(context);
    let rawSources = [].concat(rawOptions.eventSources || []);
    let sources = []; // parsed
    if (rawOptions.initialEvents) rawSources.unshift(rawOptions.initialEvents);
    if (rawOptions.events) rawSources.unshift(rawOptions.events);
    for (let rawSource of rawSources){
        let source = (0, _internalCommonJs.p)(rawSource, context, refiners);
        if (source) sources.push(source);
    }
    return sources;
}
function doesSourceNeedRange(eventSource, context) {
    let defs = context.pluginHooks.eventSourceDefs;
    return !defs[eventSource.sourceDefId].ignoreRange;
}
function reduceDateSelection(currentSelection, action) {
    switch(action.type){
        case 'UNSELECT_DATES':
            return null;
        case 'SELECT_DATES':
            return action.selection;
        default:
            return currentSelection;
    }
}
function reduceSelectedEvent(currentInstanceId, action) {
    switch(action.type){
        case 'UNSELECT_EVENT':
            return '';
        case 'SELECT_EVENT':
            return action.eventInstanceId;
        default:
            return currentInstanceId;
    }
}
function reduceEventDrag(currentDrag, action) {
    let newDrag;
    switch(action.type){
        case 'UNSET_EVENT_DRAG':
            return null;
        case 'SET_EVENT_DRAG':
            newDrag = action.state;
            return {
                affectedEvents: newDrag.affectedEvents,
                mutatedEvents: newDrag.mutatedEvents,
                isEvent: newDrag.isEvent
            };
        default:
            return currentDrag;
    }
}
function reduceEventResize(currentResize, action) {
    let newResize;
    switch(action.type){
        case 'UNSET_EVENT_RESIZE':
            return null;
        case 'SET_EVENT_RESIZE':
            newResize = action.state;
            return {
                affectedEvents: newResize.affectedEvents,
                mutatedEvents: newResize.mutatedEvents,
                isEvent: newResize.isEvent
            };
        default:
            return currentResize;
    }
}
function parseToolbars(calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let header = calendarOptions.headerToolbar ? parseToolbar(calendarOptions.headerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;
    let footer = calendarOptions.footerToolbar ? parseToolbar(calendarOptions.footerToolbar, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) : null;
    return {
        header,
        footer
    };
}
function parseToolbar(sectionStrHash, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let sectionWidgets = {};
    let viewsWithButtons = [];
    let hasTitle = false;
    for(let sectionName in sectionStrHash){
        let sectionStr = sectionStrHash[sectionName];
        let sectionRes = parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi);
        sectionWidgets[sectionName] = sectionRes.widgets;
        viewsWithButtons.push(...sectionRes.viewsWithButtons);
        hasTitle = hasTitle || sectionRes.hasTitle;
    }
    return {
        sectionWidgets,
        viewsWithButtons,
        hasTitle
    };
}
/*
BAD: querying icons and text here. should be done at render time
*/ function parseSection(sectionStr, calendarOptions, calendarOptionOverrides, theme, viewSpecs, calendarApi) {
    let isRtl = calendarOptions.direction === 'rtl';
    let calendarCustomButtons = calendarOptions.customButtons || {};
    let calendarButtonTextOverrides = calendarOptionOverrides.buttonText || {};
    let calendarButtonText = calendarOptions.buttonText || {};
    let calendarButtonHintOverrides = calendarOptionOverrides.buttonHints || {};
    let calendarButtonHints = calendarOptions.buttonHints || {};
    let sectionSubstrs = sectionStr ? sectionStr.split(' ') : [];
    let viewsWithButtons = [];
    let hasTitle = false;
    let widgets = sectionSubstrs.map((buttonGroupStr)=>buttonGroupStr.split(',').map((buttonName)=>{
            if (buttonName === 'title') {
                hasTitle = true;
                return {
                    buttonName
                };
            }
            let customButtonProps;
            let viewSpec;
            let buttonClick;
            let buttonIcon; // only one of these will be set
            let buttonText; // "
            let buttonHint;
            // ^ for the title="" attribute, for accessibility
            if (customButtonProps = calendarCustomButtons[buttonName]) {
                buttonClick = (ev)=>{
                    if (customButtonProps.click) customButtonProps.click.call(ev.target, ev, ev.target); // TODO: use Calendar this context?
                };
                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = customButtonProps.text);
                buttonHint = customButtonProps.hint || customButtonProps.text;
            } else if (viewSpec = viewSpecs[buttonName]) {
                viewsWithButtons.push(buttonName);
                buttonClick = ()=>{
                    calendarApi.changeView(buttonName);
                };
                (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = viewSpec.buttonTextDefault);
                let textFallback = viewSpec.buttonTextOverride || viewSpec.buttonTextDefault;
                buttonHint = (0, _internalCommonJs.k)(viewSpec.buttonTitleOverride || viewSpec.buttonTitleDefault || calendarOptions.viewHint, [
                    textFallback,
                    buttonName
                ], textFallback);
            } else if (calendarApi[buttonName]) {
                buttonClick = ()=>{
                    calendarApi[buttonName]();
                };
                (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName, isRtl)) || (buttonText = calendarButtonText[buttonName]); // everything else is considered default
                if (buttonName === 'prevYear' || buttonName === 'nextYear') {
                    let prevOrNext = buttonName === 'prevYear' ? 'prev' : 'next';
                    buttonHint = (0, _internalCommonJs.k)(calendarButtonHintOverrides[prevOrNext] || calendarButtonHints[prevOrNext], [
                        calendarButtonText.year || 'year',
                        'year'
                    ], calendarButtonText[buttonName]);
                } else buttonHint = (navUnit)=>(0, _internalCommonJs.k)(calendarButtonHintOverrides[buttonName] || calendarButtonHints[buttonName], [
                        calendarButtonText[navUnit] || navUnit,
                        navUnit
                    ], calendarButtonText[buttonName]);
            }
            return {
                buttonName,
                buttonClick,
                buttonIcon,
                buttonText,
                buttonHint
            };
        }));
    return {
        widgets,
        viewsWithButtons,
        hasTitle
    };
}
// always represents the current view. otherwise, it'd need to change value every time date changes
class ViewImpl {
    constructor(type, getCurrentData, dateEnv){
        this.type = type;
        this.getCurrentData = getCurrentData;
        this.dateEnv = dateEnv;
    }
    get calendar() {
        return this.getCurrentData().calendarApi;
    }
    get title() {
        return this.getCurrentData().viewTitle;
    }
    get activeStart() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);
    }
    get activeEnd() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);
    }
    get currentStart() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);
    }
    get currentEnd() {
        return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);
    }
    getOption(name) {
        return this.getCurrentData().options[name]; // are the view-specific options
    }
}
let eventSourceDef$2 = {
    ignoreRange: true,
    parseMeta (refined) {
        if (Array.isArray(refined.events)) return refined.events;
        return null;
    },
    fetch (arg, successCallback) {
        successCallback({
            rawEvents: arg.eventSource.meta
        });
    }
};
const arrayEventSourcePlugin = createPlugin({
    name: 'array-event-source',
    eventSourceDefs: [
        eventSourceDef$2
    ]
});
let eventSourceDef$1 = {
    parseMeta (refined) {
        if (typeof refined.events === 'function') return refined.events;
        return null;
    },
    fetch (arg, successCallback, errorCallback) {
        const { dateEnv } = arg.context;
        const func = arg.eventSource.meta;
        (0, _internalCommonJs.u)(func.bind(null, (0, _internalCommonJs.l)(arg.range, dateEnv)), (rawEvents)=>successCallback({
                rawEvents
            }), errorCallback);
    }
};
const funcEventSourcePlugin = createPlugin({
    name: 'func-event-source',
    eventSourceDefs: [
        eventSourceDef$1
    ]
});
const JSON_FEED_EVENT_SOURCE_REFINERS = {
    method: String,
    extraParams: (0, _internalCommonJs.n),
    startParam: String,
    endParam: String,
    timeZoneParam: String
};
let eventSourceDef = {
    parseMeta (refined) {
        if (refined.url && (refined.format === 'json' || !refined.format)) return {
            url: refined.url,
            format: 'json',
            method: (refined.method || 'GET').toUpperCase(),
            extraParams: refined.extraParams,
            startParam: refined.startParam,
            endParam: refined.endParam,
            timeZoneParam: refined.timeZoneParam
        };
        return null;
    },
    fetch (arg, successCallback, errorCallback) {
        const { meta } = arg.eventSource;
        const requestParams = buildRequestParams(meta, arg.range, arg.context);
        (0, _internalCommonJs.r)(meta.method, meta.url, requestParams).then(([rawEvents, response])=>{
            successCallback({
                rawEvents,
                response
            });
        }, errorCallback);
    }
};
const jsonFeedEventSourcePlugin = createPlugin({
    name: 'json-event-source',
    eventSourceRefiners: JSON_FEED_EVENT_SOURCE_REFINERS,
    eventSourceDefs: [
        eventSourceDef
    ]
});
function buildRequestParams(meta, range, context) {
    let { dateEnv, options } = context;
    let startParam;
    let endParam;
    let timeZoneParam;
    let customRequestParams;
    let params = {};
    startParam = meta.startParam;
    if (startParam == null) startParam = options.startParam;
    endParam = meta.endParam;
    if (endParam == null) endParam = options.endParam;
    timeZoneParam = meta.timeZoneParam;
    if (timeZoneParam == null) timeZoneParam = options.timeZoneParam;
    // retrieve any outbound GET/POST data from the options
    if (typeof meta.extraParams === 'function') // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
    else // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
    Object.assign(params, customRequestParams);
    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);
    if (dateEnv.timeZone !== 'local') params[timeZoneParam] = dateEnv.timeZone;
    return params;
}
const SIMPLE_RECURRING_REFINERS = {
    daysOfWeek: (0, _internalCommonJs.n),
    startTime: (0, _internalCommonJs.d),
    endTime: (0, _internalCommonJs.d),
    duration: (0, _internalCommonJs.d),
    startRecur: (0, _internalCommonJs.n),
    endRecur: (0, _internalCommonJs.n)
};
let recurring = {
    parse (refined, dateEnv) {
        if (refined.daysOfWeek || refined.startTime || refined.endTime || refined.startRecur || refined.endRecur) {
            let recurringData = {
                daysOfWeek: refined.daysOfWeek || null,
                startTime: refined.startTime || null,
                endTime: refined.endTime || null,
                startRecur: refined.startRecur ? dateEnv.createMarker(refined.startRecur) : null,
                endRecur: refined.endRecur ? dateEnv.createMarker(refined.endRecur) : null,
                dateEnv
            };
            let duration;
            if (refined.duration) duration = refined.duration;
            if (!duration && refined.startTime && refined.endTime) duration = (0, _internalCommonJs.s)(refined.endTime, refined.startTime);
            return {
                allDayGuess: Boolean(!refined.startTime && !refined.endTime),
                duration,
                typeData: recurringData
            };
        }
        return null;
    },
    expand (typeData, framingRange, dateEnv) {
        let clippedFramingRange = (0, _internalCommonJs.o)(framingRange, {
            start: typeData.startRecur,
            end: typeData.endRecur
        });
        if (clippedFramingRange) return expandRanges(typeData.daysOfWeek, typeData.startTime, typeData.dateEnv, dateEnv, clippedFramingRange);
        return [];
    }
};
const simpleRecurringEventsPlugin = createPlugin({
    name: 'simple-recurring-event',
    recurringTypes: [
        recurring
    ],
    eventRefiners: SIMPLE_RECURRING_REFINERS
});
function expandRanges(daysOfWeek, startTime, eventDateEnv, calendarDateEnv, framingRange) {
    let dowHash = daysOfWeek ? (0, _internalCommonJs.f)(daysOfWeek) : null;
    let dayMarker = (0, _internalCommonJs.q)(framingRange.start);
    let endMarker = framingRange.end;
    let instanceStarts = [];
    while(dayMarker < endMarker){
        let instanceStart;
        // if everyday, or this particular day-of-week
        if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
            if (startTime) instanceStart = calendarDateEnv.add(dayMarker, startTime);
            else instanceStart = dayMarker;
            instanceStarts.push(calendarDateEnv.createMarker(eventDateEnv.toDate(instanceStart)));
        }
        dayMarker = (0, _internalCommonJs.t)(dayMarker, 1);
    }
    return instanceStarts;
}
const changeHandlerPlugin = createPlugin({
    name: 'change-handler',
    optionChangeHandlers: {
        events (events, context) {
            handleEventSources([
                events
            ], context);
        },
        eventSources: handleEventSources
    }
});
/*
BUG: if `event` was supplied, all previously-given `eventSources` will be wiped out
*/ function handleEventSources(inputs, context) {
    let unfoundSources = (0, _internalCommonJs.v)(context.getCurrentData().eventSources);
    if (unfoundSources.length === 1 && inputs.length === 1 && Array.isArray(unfoundSources[0]._raw) && Array.isArray(inputs[0])) {
        context.dispatch({
            type: 'RESET_RAW_EVENTS',
            sourceId: unfoundSources[0].sourceId,
            rawEvents: inputs[0]
        });
        return;
    }
    let newInputs = [];
    for (let input of inputs){
        let inputFound = false;
        for(let i = 0; i < unfoundSources.length; i += 1)if (unfoundSources[i]._raw === input) {
            unfoundSources.splice(i, 1); // delete
            inputFound = true;
            break;
        }
        if (!inputFound) newInputs.push(input);
    }
    for (let unfoundSource of unfoundSources)context.dispatch({
        type: 'REMOVE_EVENT_SOURCE',
        sourceId: unfoundSource.sourceId
    });
    for (let newInput of newInputs)context.calendarApi.addEventSource(newInput);
}
function handleDateProfile(dateProfile, context) {
    context.emitter.trigger('datesSet', Object.assign(Object.assign({}, (0, _internalCommonJs.l)(dateProfile.activeRange, context.dateEnv)), {
        view: context.viewApi
    }));
}
function handleEventStore(eventStore, context) {
    let { emitter } = context;
    if (emitter.hasHandlers('eventsSet')) emitter.trigger('eventsSet', (0, _internalCommonJs.w)(eventStore, context));
}
/*
this array is exposed on the root namespace so that UMD plugins can add to it.
see the rollup-bundles script.
*/ const globalPlugins = [
    arrayEventSourcePlugin,
    funcEventSourcePlugin,
    jsonFeedEventSourcePlugin,
    simpleRecurringEventsPlugin,
    changeHandlerPlugin,
    createPlugin({
        name: 'misc',
        isLoadingFuncs: [
            (state)=>computeEventSourcesLoading(state.eventSources)
        ],
        propSetHandlers: {
            dateProfile: handleDateProfile,
            eventStore: handleEventStore
        }
    })
];
class TaskRunner {
    constructor(runTaskOption, drainedOption){
        this.runTaskOption = runTaskOption;
        this.drainedOption = drainedOption;
        this.queue = [];
        this.delayedRunner = new (0, _internalCommonJs.D)(this.drain.bind(this));
    }
    request(task, delay) {
        this.queue.push(task);
        this.delayedRunner.request(delay);
    }
    pause(scope) {
        this.delayedRunner.pause(scope);
    }
    resume(scope, force) {
        this.delayedRunner.resume(scope, force);
    }
    drain() {
        let { queue } = this;
        while(queue.length){
            let completedTasks = [];
            let task;
            while(task = queue.shift()){
                this.runTask(task);
                completedTasks.push(task);
            }
            this.drained(completedTasks);
        } // keep going, in case new tasks were added in the drained handler
    }
    runTask(task) {
        if (this.runTaskOption) this.runTaskOption(task);
    }
    drained(completedTasks) {
        if (this.drainedOption) this.drainedOption(completedTasks);
    }
}
// Computes what the title at the top of the calendarApi should be for this view
function buildTitle(dateProfile, viewOptions, dateEnv) {
    let range;
    // for views that span a large unit of time, show the proper interval, ignoring stray days before and after
    if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) range = dateProfile.currentRange;
    else range = dateProfile.activeRange;
    return dateEnv.formatRange(range.start, range.end, (0, _internalCommonJs.x)(viewOptions.titleFormat || buildTitleFormat(dateProfile)), {
        isEndExclusive: dateProfile.isRangeAllDay,
        defaultSeparator: viewOptions.titleRangeSeparator
    });
}
// Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
function buildTitleFormat(dateProfile) {
    let { currentRangeUnit } = dateProfile;
    if (currentRangeUnit === 'year') return {
        year: 'numeric'
    };
    if (currentRangeUnit === 'month') return {
        year: 'numeric',
        month: 'long'
    }; // like "September 2014"
    let days = (0, _internalCommonJs.y)(dateProfile.currentRange.start, dateProfile.currentRange.end);
    if (days !== null && days > 1) // multi-day range. shorter, like "Sep 9 - 10 2014"
    return {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    };
    // one day. longer, like "September 9 2014"
    return {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    };
}
/*
TODO: test switching timezones when NO timezone plugin
*/ class CalendarNowManager {
    constructor(){
        this.resetListeners = new Set();
    }
    handleInput(dateEnv, nowInput) {
        const oldDateEnv = this.dateEnv;
        if (dateEnv !== oldDateEnv) {
            if (typeof nowInput === 'function') this.nowFn = nowInput;
            else if (!oldDateEnv) {
                this.nowAnchorDate = dateEnv.toDate(nowInput ? dateEnv.createMarker(nowInput) : dateEnv.createNowMarker());
                this.nowAnchorQueried = Date.now();
            }
            this.dateEnv = dateEnv;
            // not first time? fire reset handlers
            if (oldDateEnv) for (const resetListener of this.resetListeners.values())resetListener();
        }
    }
    getDateMarker() {
        return this.nowAnchorDate ? this.dateEnv.timestampToMarker(this.nowAnchorDate.valueOf() + (Date.now() - this.nowAnchorQueried)) : this.dateEnv.createMarker(this.nowFn());
    }
    addResetListener(handler) {
        this.resetListeners.add(handler);
    }
    removeResetListener(handler) {
        this.resetListeners.delete(handler);
    }
}
// in future refactor, do the redux-style function(state=initial) for initial-state
// also, whatever is happening in constructor, have it happen in action queue too
class CalendarDataManager {
    constructor(props){
        this.computeCurrentViewData = (0, _internalCommonJs.z)(this._computeCurrentViewData);
        this.organizeRawLocales = (0, _internalCommonJs.z)(organizeRawLocales);
        this.buildLocale = (0, _internalCommonJs.z)(buildLocale);
        this.buildPluginHooks = buildBuildPluginHooks();
        this.buildDateEnv = (0, _internalCommonJs.z)(buildDateEnv$1);
        this.buildTheme = (0, _internalCommonJs.z)(buildTheme);
        this.parseToolbars = (0, _internalCommonJs.z)(parseToolbars);
        this.buildViewSpecs = (0, _internalCommonJs.z)(buildViewSpecs);
        this.buildDateProfileGenerator = (0, _internalCommonJs.A)(buildDateProfileGenerator);
        this.buildViewApi = (0, _internalCommonJs.z)(buildViewApi);
        this.buildViewUiProps = (0, _internalCommonJs.A)(buildViewUiProps);
        this.buildEventUiBySource = (0, _internalCommonJs.z)(buildEventUiBySource, (0, _internalCommonJs.E));
        this.buildEventUiBases = (0, _internalCommonJs.z)(buildEventUiBases);
        this.parseContextBusinessHours = (0, _internalCommonJs.A)(parseContextBusinessHours);
        this.buildTitle = (0, _internalCommonJs.z)(buildTitle);
        this.nowManager = new CalendarNowManager();
        this.emitter = new (0, _internalCommonJs.F)();
        this.actionRunner = new TaskRunner(this._handleAction.bind(this), this.updateData.bind(this));
        this.currentCalendarOptionsInput = {};
        this.currentCalendarOptionsRefined = {};
        this.currentViewOptionsInput = {};
        this.currentViewOptionsRefined = {};
        this.currentCalendarOptionsRefiners = {};
        this.optionsForRefining = [];
        this.optionsForHandling = [];
        this.getCurrentData = ()=>this.data;
        this.dispatch = (action)=>{
            this.actionRunner.request(action); // protects against recursive calls to _handleAction
        };
        this.props = props;
        this.actionRunner.pause();
        this.nowManager = new CalendarNowManager();
        let dynamicOptionOverrides = {};
        let optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);
        let currentViewType = optionsData.calendarOptions.initialView || optionsData.pluginHooks.initialView;
        let currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);
        // wire things up
        // TODO: not DRY
        props.calendarApi.currentDataManager = this;
        this.emitter.setThisContext(props.calendarApi);
        this.emitter.setOptions(currentViewData.options);
        let calendarContext = {
            nowManager: this.nowManager,
            dateEnv: optionsData.dateEnv,
            options: optionsData.calendarOptions,
            pluginHooks: optionsData.pluginHooks,
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter: this.emitter,
            getCurrentData: this.getCurrentData
        };
        let currentDate = getInitialDate(optionsData.calendarOptions, optionsData.dateEnv, this.nowManager);
        let dateProfile = currentViewData.dateProfileGenerator.build(currentDate);
        if (!(0, _internalCommonJs.G)(dateProfile.activeRange, currentDate)) currentDate = dateProfile.currentRange.start;
        // needs to be after setThisContext
        for (let callback of optionsData.pluginHooks.contextInit)callback(calendarContext);
        // NOT DRY
        let eventSources = initEventSources(optionsData.calendarOptions, dateProfile, calendarContext);
        let initialState = {
            dynamicOptionOverrides,
            currentViewType,
            currentDate,
            dateProfile,
            businessHours: this.parseContextBusinessHours(calendarContext),
            eventSources,
            eventUiBases: {},
            eventStore: (0, _internalCommonJs.H)(),
            renderableEventStore: (0, _internalCommonJs.H)(),
            dateSelection: null,
            eventSelection: '',
            eventDrag: null,
            eventResize: null,
            selectionConfig: this.buildViewUiProps(calendarContext).selectionConfig
        };
        let contextAndState = Object.assign(Object.assign({}, calendarContext), initialState);
        for (let reducer of optionsData.pluginHooks.reducers)Object.assign(initialState, reducer(null, null, contextAndState));
        if (computeIsLoading(initialState, calendarContext)) this.emitter.trigger('loading', true); // NOT DRY
        this.state = initialState;
        this.updateData();
        this.actionRunner.resume();
    }
    resetOptions(optionOverrides, changedOptionNames) {
        let { props } = this;
        if (changedOptionNames === undefined) props.optionOverrides = optionOverrides;
        else {
            props.optionOverrides = Object.assign(Object.assign({}, props.optionOverrides || {}), optionOverrides);
            this.optionsForRefining.push(...changedOptionNames);
        }
        if (changedOptionNames === undefined || changedOptionNames.length) this.actionRunner.request({
            type: 'NOTHING'
        });
    }
    _handleAction(action) {
        let { props, state, emitter } = this;
        let dynamicOptionOverrides = reduceDynamicOptionOverrides(state.dynamicOptionOverrides, action);
        let optionsData = this.computeOptionsData(props.optionOverrides, dynamicOptionOverrides, props.calendarApi);
        let currentViewType = reduceViewType(state.currentViewType, action);
        let currentViewData = this.computeCurrentViewData(currentViewType, optionsData, props.optionOverrides, dynamicOptionOverrides);
        // wire things up
        // TODO: not DRY
        props.calendarApi.currentDataManager = this;
        emitter.setThisContext(props.calendarApi);
        emitter.setOptions(currentViewData.options);
        let calendarContext = {
            nowManager: this.nowManager,
            dateEnv: optionsData.dateEnv,
            options: optionsData.calendarOptions,
            pluginHooks: optionsData.pluginHooks,
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter,
            getCurrentData: this.getCurrentData
        };
        let { currentDate, dateProfile } = state;
        if (this.data && this.data.dateProfileGenerator !== currentViewData.dateProfileGenerator) dateProfile = currentViewData.dateProfileGenerator.build(currentDate);
        currentDate = reduceCurrentDate(currentDate, action);
        dateProfile = reduceDateProfile(dateProfile, action, currentDate, currentViewData.dateProfileGenerator);
        if (action.type === 'PREV' || // TODO: move this logic into DateProfileGenerator
        action.type === 'NEXT' || // "
        !(0, _internalCommonJs.G)(dateProfile.currentRange, currentDate)) currentDate = dateProfile.currentRange.start;
        let eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendarContext);
        let eventStore = (0, _internalCommonJs.I)(state.eventStore, action, eventSources, dateProfile, calendarContext);
        let isEventsLoading = computeEventSourcesLoading(eventSources); // BAD. also called in this func in computeIsLoading
        let renderableEventStore = isEventsLoading && !currentViewData.options.progressiveEventRendering ? state.renderableEventStore || eventStore : eventStore;
        let { eventUiSingleBase, selectionConfig } = this.buildViewUiProps(calendarContext); // will memoize obj
        let eventUiBySource = this.buildEventUiBySource(eventSources);
        let eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);
        let newState = {
            dynamicOptionOverrides,
            currentViewType,
            currentDate,
            dateProfile,
            eventSources,
            eventStore,
            renderableEventStore,
            selectionConfig,
            eventUiBases,
            businessHours: this.parseContextBusinessHours(calendarContext),
            dateSelection: reduceDateSelection(state.dateSelection, action),
            eventSelection: reduceSelectedEvent(state.eventSelection, action),
            eventDrag: reduceEventDrag(state.eventDrag, action),
            eventResize: reduceEventResize(state.eventResize, action)
        };
        let contextAndState = Object.assign(Object.assign({}, calendarContext), newState);
        for (let reducer of optionsData.pluginHooks.reducers)Object.assign(newState, reducer(state, action, contextAndState)); // give the OLD state, for old value
        let wasLoading = computeIsLoading(state, calendarContext);
        let isLoading = computeIsLoading(newState, calendarContext);
        // TODO: use propSetHandlers in plugin system
        if (!wasLoading && isLoading) emitter.trigger('loading', true);
        else if (wasLoading && !isLoading) emitter.trigger('loading', false);
        this.state = newState;
        if (props.onAction) props.onAction(action);
    }
    updateData() {
        let { props, state } = this;
        let oldData = this.data;
        let optionsData = this.computeOptionsData(props.optionOverrides, state.dynamicOptionOverrides, props.calendarApi);
        let currentViewData = this.computeCurrentViewData(state.currentViewType, optionsData, props.optionOverrides, state.dynamicOptionOverrides);
        let data = this.data = Object.assign(Object.assign(Object.assign({
            nowManager: this.nowManager,
            viewTitle: this.buildTitle(state.dateProfile, currentViewData.options, optionsData.dateEnv),
            calendarApi: props.calendarApi,
            dispatch: this.dispatch,
            emitter: this.emitter,
            getCurrentData: this.getCurrentData
        }, optionsData), currentViewData), state);
        let changeHandlers = optionsData.pluginHooks.optionChangeHandlers;
        let oldCalendarOptions = oldData && oldData.calendarOptions;
        let newCalendarOptions = optionsData.calendarOptions;
        if (oldCalendarOptions && oldCalendarOptions !== newCalendarOptions) {
            if (oldCalendarOptions.timeZone !== newCalendarOptions.timeZone) {
                // hack
                state.eventSources = data.eventSources = reduceEventSourcesNewTimeZone(data.eventSources, state.dateProfile, data);
                state.eventStore = data.eventStore = (0, _internalCommonJs.J)(data.eventStore, oldData.dateEnv, data.dateEnv);
                state.renderableEventStore = data.renderableEventStore = (0, _internalCommonJs.J)(data.renderableEventStore, oldData.dateEnv, data.dateEnv);
            }
            for(let optionName in changeHandlers)if (this.optionsForHandling.indexOf(optionName) !== -1 || oldCalendarOptions[optionName] !== newCalendarOptions[optionName]) changeHandlers[optionName](newCalendarOptions[optionName], data);
        }
        this.optionsForHandling = [];
        if (props.onData) props.onData(data);
    }
    computeOptionsData(optionOverrides, dynamicOptionOverrides, calendarApi) {
        // TODO: blacklist options that are handled by optionChangeHandlers
        if (!this.optionsForRefining.length && optionOverrides === this.stableOptionOverrides && dynamicOptionOverrides === this.stableDynamicOptionOverrides) return this.stableCalendarOptionsData;
        let { refinedOptions, pluginHooks, localeDefaults, availableLocaleData, extra } = this.processRawCalendarOptions(optionOverrides, dynamicOptionOverrides);
        warnUnknownOptions(extra);
        let dateEnv = this.buildDateEnv(refinedOptions.timeZone, refinedOptions.locale, refinedOptions.weekNumberCalculation, refinedOptions.firstDay, refinedOptions.weekText, pluginHooks, availableLocaleData, refinedOptions.defaultRangeSeparator);
        let viewSpecs = this.buildViewSpecs(pluginHooks.views, this.stableOptionOverrides, this.stableDynamicOptionOverrides, localeDefaults);
        let theme = this.buildTheme(refinedOptions, pluginHooks);
        let toolbarConfig = this.parseToolbars(refinedOptions, this.stableOptionOverrides, theme, viewSpecs, calendarApi);
        return this.stableCalendarOptionsData = {
            calendarOptions: refinedOptions,
            pluginHooks,
            dateEnv,
            viewSpecs,
            theme,
            toolbarConfig,
            localeDefaults,
            availableRawLocales: availableLocaleData.map
        };
    }
    // always called from behind a memoizer
    processRawCalendarOptions(optionOverrides, dynamicOptionOverrides) {
        let { locales, locale } = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            optionOverrides,
            dynamicOptionOverrides
        ]);
        let availableLocaleData = this.organizeRawLocales(locales);
        let availableRawLocales = availableLocaleData.map;
        let localeDefaults = this.buildLocale(locale || availableLocaleData.defaultCode, availableRawLocales).options;
        let pluginHooks = this.buildPluginHooks(optionOverrides.plugins || [], globalPlugins);
        let refiners = this.currentCalendarOptionsRefiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0, _internalCommonJs.L)), (0, _internalCommonJs.M)), (0, _internalCommonJs.N)), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);
        let extra = {};
        let raw = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            localeDefaults,
            optionOverrides,
            dynamicOptionOverrides
        ]);
        let refined = {};
        let currentRaw = this.currentCalendarOptionsInput;
        let currentRefined = this.currentCalendarOptionsRefined;
        let anyChanges = false;
        for(let optionName in raw){
            if (this.optionsForRefining.indexOf(optionName) === -1 && (raw[optionName] === currentRaw[optionName] || (0, _internalCommonJs.O)[optionName] && optionName in currentRaw && (0, _internalCommonJs.O)[optionName](currentRaw[optionName], raw[optionName]))) refined[optionName] = currentRefined[optionName];
            else if (refiners[optionName]) {
                refined[optionName] = refiners[optionName](raw[optionName]);
                anyChanges = true;
            } else extra[optionName] = currentRaw[optionName];
        }
        if (anyChanges) {
            this.currentCalendarOptionsInput = raw;
            this.currentCalendarOptionsRefined = refined;
            this.stableOptionOverrides = optionOverrides;
            this.stableDynamicOptionOverrides = dynamicOptionOverrides;
        }
        this.optionsForHandling.push(...this.optionsForRefining);
        this.optionsForRefining = [];
        return {
            rawOptions: this.currentCalendarOptionsInput,
            refinedOptions: this.currentCalendarOptionsRefined,
            pluginHooks,
            availableLocaleData,
            localeDefaults,
            extra
        };
    }
    _computeCurrentViewData(viewType, optionsData, optionOverrides, dynamicOptionOverrides) {
        let viewSpec = optionsData.viewSpecs[viewType];
        if (!viewSpec) throw new Error(`viewType "${viewType}" is not available. Please make sure you've loaded all neccessary plugins`);
        let { refinedOptions, extra } = this.processRawViewOptions(viewSpec, optionsData.pluginHooks, optionsData.localeDefaults, optionOverrides, dynamicOptionOverrides);
        warnUnknownOptions(extra);
        this.nowManager.handleInput(optionsData.dateEnv, refinedOptions.now);
        let dateProfileGenerator = this.buildDateProfileGenerator({
            dateProfileGeneratorClass: viewSpec.optionDefaults.dateProfileGeneratorClass,
            nowManager: this.nowManager,
            duration: viewSpec.duration,
            durationUnit: viewSpec.durationUnit,
            usesMinMaxTime: viewSpec.optionDefaults.usesMinMaxTime,
            dateEnv: optionsData.dateEnv,
            calendarApi: this.props.calendarApi,
            slotMinTime: refinedOptions.slotMinTime,
            slotMaxTime: refinedOptions.slotMaxTime,
            showNonCurrentDates: refinedOptions.showNonCurrentDates,
            dayCount: refinedOptions.dayCount,
            dateAlignment: refinedOptions.dateAlignment,
            dateIncrement: refinedOptions.dateIncrement,
            hiddenDays: refinedOptions.hiddenDays,
            weekends: refinedOptions.weekends,
            validRangeInput: refinedOptions.validRange,
            visibleRangeInput: refinedOptions.visibleRange,
            fixedWeekCount: refinedOptions.fixedWeekCount
        });
        let viewApi = this.buildViewApi(viewType, this.getCurrentData, optionsData.dateEnv);
        return {
            viewSpec,
            options: refinedOptions,
            dateProfileGenerator,
            viewApi
        };
    }
    processRawViewOptions(viewSpec, pluginHooks, localeDefaults, optionOverrides, dynamicOptionOverrides) {
        let raw = (0, _internalCommonJs.K)([
            (0, _internalCommonJs.e),
            viewSpec.optionDefaults,
            localeDefaults,
            optionOverrides,
            viewSpec.optionOverrides,
            dynamicOptionOverrides
        ]);
        let refiners = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (0, _internalCommonJs.L)), (0, _internalCommonJs.M)), (0, _internalCommonJs.N)), (0, _internalCommonJs.P)), pluginHooks.listenerRefiners), pluginHooks.optionRefiners);
        let refined = {};
        let currentRaw = this.currentViewOptionsInput;
        let currentRefined = this.currentViewOptionsRefined;
        let anyChanges = false;
        let extra = {};
        for(let optionName in raw)if (raw[optionName] === currentRaw[optionName] || (0, _internalCommonJs.O)[optionName] && (0, _internalCommonJs.O)[optionName](raw[optionName], currentRaw[optionName])) refined[optionName] = currentRefined[optionName];
        else {
            if (raw[optionName] === this.currentCalendarOptionsInput[optionName] || (0, _internalCommonJs.O)[optionName] && (0, _internalCommonJs.O)[optionName](raw[optionName], this.currentCalendarOptionsInput[optionName])) {
                if (optionName in this.currentCalendarOptionsRefined) refined[optionName] = this.currentCalendarOptionsRefined[optionName];
            } else if (refiners[optionName]) refined[optionName] = refiners[optionName](raw[optionName]);
            else extra[optionName] = raw[optionName];
            anyChanges = true;
        }
        if (anyChanges) {
            this.currentViewOptionsInput = raw;
            this.currentViewOptionsRefined = refined;
        }
        return {
            rawOptions: this.currentViewOptionsInput,
            refinedOptions: this.currentViewOptionsRefined,
            extra
        };
    }
}
function buildDateEnv$1(timeZone, explicitLocale, weekNumberCalculation, firstDay, weekText, pluginHooks, availableLocaleData, defaultSeparator) {
    let locale = buildLocale(explicitLocale || availableLocaleData.defaultCode, availableLocaleData.map);
    return new (0, _internalCommonJs.Q)({
        calendarSystem: 'gregory',
        timeZone,
        namedTimeZoneImpl: pluginHooks.namedTimeZonedImpl,
        locale,
        weekNumberCalculation,
        firstDay,
        weekText,
        cmdFormatter: pluginHooks.cmdFormatter,
        defaultSeparator
    });
}
function buildTheme(options, pluginHooks) {
    let ThemeClass = pluginHooks.themeClasses[options.themeSystem] || StandardTheme;
    return new ThemeClass(options);
}
function buildDateProfileGenerator(props) {
    let DateProfileGeneratorClass = props.dateProfileGeneratorClass || (0, _internalCommonJs.R);
    return new DateProfileGeneratorClass(props);
}
function buildViewApi(type, getCurrentData, dateEnv) {
    return new ViewImpl(type, getCurrentData, dateEnv);
}
function buildEventUiBySource(eventSources) {
    return (0, _internalCommonJs.a)(eventSources, (eventSource)=>eventSource.ui);
}
function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
    let eventUiBases = {
        '': eventUiSingleBase
    };
    for(let defId in eventDefs){
        let def = eventDefs[defId];
        if (def.sourceId && eventUiBySource[def.sourceId]) eventUiBases[defId] = eventUiBySource[def.sourceId];
    }
    return eventUiBases;
}
function buildViewUiProps(calendarContext) {
    let { options } = calendarContext;
    return {
        eventUiSingleBase: (0, _internalCommonJs.S)({
            display: options.eventDisplay,
            editable: options.editable,
            startEditable: options.eventStartEditable,
            durationEditable: options.eventDurationEditable,
            constraint: options.eventConstraint,
            overlap: typeof options.eventOverlap === 'boolean' ? options.eventOverlap : undefined,
            allow: options.eventAllow,
            backgroundColor: options.eventBackgroundColor,
            borderColor: options.eventBorderColor,
            textColor: options.eventTextColor,
            color: options.eventColor
        }, calendarContext),
        selectionConfig: (0, _internalCommonJs.S)({
            constraint: options.selectConstraint,
            overlap: typeof options.selectOverlap === 'boolean' ? options.selectOverlap : undefined,
            allow: options.selectAllow
        }, calendarContext)
    };
}
function computeIsLoading(state, context) {
    for (let isLoadingFunc of context.pluginHooks.isLoadingFuncs){
        if (isLoadingFunc(state)) return true;
    }
    return false;
}
function parseContextBusinessHours(calendarContext) {
    return (0, _internalCommonJs.U)(calendarContext.options.businessHours, calendarContext);
}
function warnUnknownOptions(options, viewName) {
    for(let optionName in options)console.warn(`Unknown option '${optionName}'` + (viewName ? ` for view '${viewName}'` : ''));
}
class ToolbarSection extends (0, _internalCommonJs.B) {
    render() {
        let children = this.props.widgetGroups.map((widgetGroup)=>this.renderWidgetGroup(widgetGroup));
        return (0, _preact.createElement)('div', {
            className: 'fc-toolbar-chunk'
        }, ...children);
    }
    renderWidgetGroup(widgetGroup) {
        let { props } = this;
        let { theme } = this.context;
        let children = [];
        let isOnlyButtons = true;
        for (let widget of widgetGroup){
            let { buttonName, buttonClick, buttonText, buttonIcon, buttonHint } = widget;
            if (buttonName === 'title') {
                isOnlyButtons = false;
                children.push((0, _preact.createElement)("h2", {
                    className: "fc-toolbar-title",
                    id: props.titleId
                }, props.title));
            } else {
                let isPressed = buttonName === props.activeButton;
                let isDisabled = !props.isTodayEnabled && buttonName === 'today' || !props.isPrevEnabled && buttonName === 'prev' || !props.isNextEnabled && buttonName === 'next';
                let buttonClasses = [
                    `fc-${buttonName}-button`,
                    theme.getClass('button')
                ];
                if (isPressed) buttonClasses.push(theme.getClass('buttonActive'));
                children.push((0, _preact.createElement)("button", {
                    type: "button",
                    title: typeof buttonHint === 'function' ? buttonHint(props.navUnit) : buttonHint,
                    disabled: isDisabled,
                    "aria-pressed": isPressed,
                    className: buttonClasses.join(' '),
                    onClick: buttonClick
                }, buttonText || (buttonIcon ? (0, _preact.createElement)("span", {
                    className: buttonIcon,
                    role: "img"
                }) : '')));
            }
        }
        if (children.length > 1) {
            let groupClassName = isOnlyButtons && theme.getClass('buttonGroup') || '';
            return (0, _preact.createElement)('div', {
                className: groupClassName
            }, ...children);
        }
        return children[0];
    }
}
class Toolbar extends (0, _internalCommonJs.B) {
    render() {
        let { model, extraClassName } = this.props;
        let forceLtr = false;
        let startContent;
        let endContent;
        let sectionWidgets = model.sectionWidgets;
        let centerContent = sectionWidgets.center;
        if (sectionWidgets.left) {
            forceLtr = true;
            startContent = sectionWidgets.left;
        } else startContent = sectionWidgets.start;
        if (sectionWidgets.right) {
            forceLtr = true;
            endContent = sectionWidgets.right;
        } else endContent = sectionWidgets.end;
        let classNames = [
            extraClassName || '',
            'fc-toolbar',
            forceLtr ? 'fc-toolbar-ltr' : ''
        ];
        return (0, _preact.createElement)("div", {
            className: classNames.join(' ')
        }, this.renderSection('start', startContent || []), this.renderSection('center', centerContent || []), this.renderSection('end', endContent || []));
    }
    renderSection(key, widgetGroups) {
        let { props } = this;
        return (0, _preact.createElement)(ToolbarSection, {
            key: key,
            widgetGroups: widgetGroups,
            title: props.title,
            navUnit: props.navUnit,
            activeButton: props.activeButton,
            isTodayEnabled: props.isTodayEnabled,
            isPrevEnabled: props.isPrevEnabled,
            isNextEnabled: props.isNextEnabled,
            titleId: props.titleId
        });
    }
}
class ViewHarness extends (0, _internalCommonJs.B) {
    constructor(){
        super(...arguments);
        this.state = {
            availableWidth: null
        };
        this.handleEl = (el)=>{
            this.el = el;
            (0, _internalCommonJs.W)(this.props.elRef, el);
            this.updateAvailableWidth();
        };
        this.handleResize = ()=>{
            this.updateAvailableWidth();
        };
    }
    render() {
        let { props, state } = this;
        let { aspectRatio } = props;
        let classNames = [
            'fc-view-harness',
            aspectRatio || props.liquid || props.height ? 'fc-view-harness-active' // harness controls the height
             : 'fc-view-harness-passive'
        ];
        let height = '';
        let paddingBottom = '';
        if (aspectRatio) {
            if (state.availableWidth !== null) height = state.availableWidth / aspectRatio;
            else // while waiting to know availableWidth, we can't set height to *zero*
            // because will cause lots of unnecessary scrollbars within scrollgrid.
            // BETTER: don't start rendering ANYTHING yet until we know container width
            // NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)
            paddingBottom = `${1 / aspectRatio * 100}%`;
        } else height = props.height || '';
        return (0, _preact.createElement)("div", {
            "aria-labelledby": props.labeledById,
            ref: this.handleEl,
            className: classNames.join(' '),
            style: {
                height,
                paddingBottom
            }
        }, props.children);
    }
    componentDidMount() {
        this.context.addResizeHandler(this.handleResize);
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleResize);
    }
    updateAvailableWidth() {
        if (this.el && // needed. but why?
        this.props.aspectRatio // aspectRatio is the only height setting that needs availableWidth
        ) this.setState({
            availableWidth: this.el.offsetWidth
        });
    }
}
/*
Detects when the user clicks on an event within a DateComponent
*/ class EventClicking extends (0, _internalCommonJs.X) {
    constructor(settings){
        super(settings);
        this.handleSegClick = (ev, segEl)=>{
            let { component } = this;
            let { context } = component;
            let seg = (0, _internalCommonJs.Y)(segEl);
            if (seg && // might be the <div> surrounding the more link
            component.isValidSegDownEl(ev.target)) {
                // our way to simulate a link click for elements that can't be <a> tags
                // grab before trigger fired in case trigger trashes DOM thru rerendering
                let hasUrlContainer = (0, _internalCommonJs.Z)(ev.target, '.fc-event-forced-url');
                let url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
                context.emitter.trigger('eventClick', {
                    el: segEl,
                    event: new (0, _internalCommonJs._)(component.context, seg.eventRange.def, seg.eventRange.instance),
                    jsEvent: ev,
                    view: context.viewApi
                });
                if (url && !ev.defaultPrevented) window.location.href = url;
            }
        };
        this.destroy = (0, _internalCommonJs.$)(settings.el, 'click', '.fc-event', this.handleSegClick);
    }
}
/*
Triggers events and adds/removes core classNames when the user's pointer
enters/leaves event-elements of a component.
*/ class EventHovering extends (0, _internalCommonJs.X) {
    constructor(settings){
        super(settings);
        // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it
        this.handleEventElRemove = (el)=>{
            if (el === this.currentSegEl) this.handleSegLeave(null, this.currentSegEl);
        };
        this.handleSegEnter = (ev, segEl)=>{
            if ((0, _internalCommonJs.Y)(segEl)) {
                this.currentSegEl = segEl;
                this.triggerEvent('eventMouseEnter', ev, segEl);
            }
        };
        this.handleSegLeave = (ev, segEl)=>{
            if (this.currentSegEl) {
                this.currentSegEl = null;
                this.triggerEvent('eventMouseLeave', ev, segEl);
            }
        };
        this.removeHoverListeners = (0, _internalCommonJs.a0)(settings.el, '.fc-event', this.handleSegEnter, this.handleSegLeave);
    }
    destroy() {
        this.removeHoverListeners();
    }
    triggerEvent(publicEvName, ev, segEl) {
        let { component } = this;
        let { context } = component;
        let seg = (0, _internalCommonJs.Y)(segEl);
        if (!ev || component.isValidSegDownEl(ev.target)) context.emitter.trigger(publicEvName, {
            el: segEl,
            event: new (0, _internalCommonJs._)(context, seg.eventRange.def, seg.eventRange.instance),
            jsEvent: ev,
            view: context.viewApi
        });
    }
}
class CalendarContent extends (0, _internalCommonJs.a1) {
    constructor(){
        super(...arguments);
        this.buildViewContext = (0, _internalCommonJs.z)((0, _internalCommonJs.a2));
        this.buildViewPropTransformers = (0, _internalCommonJs.z)(buildViewPropTransformers);
        this.buildToolbarProps = (0, _internalCommonJs.z)(buildToolbarProps);
        this.headerRef = (0, _preact.createRef)();
        this.footerRef = (0, _preact.createRef)();
        this.interactionsStore = {};
        // eslint-disable-next-line
        this.state = {
            viewLabelId: (0, _internalCommonJs.a3)()
        };
        // Component Registration
        // -----------------------------------------------------------------------------------------------------------------
        this.registerInteractiveComponent = (component, settingsInput)=>{
            let settings = (0, _internalCommonJs.a4)(component, settingsInput);
            let DEFAULT_INTERACTIONS = [
                EventClicking,
                EventHovering
            ];
            let interactionClasses = DEFAULT_INTERACTIONS.concat(this.props.pluginHooks.componentInteractions);
            let interactions = interactionClasses.map((TheInteractionClass)=>new TheInteractionClass(settings));
            this.interactionsStore[component.uid] = interactions;
            (0, _internalCommonJs.a5)[component.uid] = settings;
        };
        this.unregisterInteractiveComponent = (component)=>{
            let listeners = this.interactionsStore[component.uid];
            if (listeners) {
                for (let listener of listeners)listener.destroy();
                delete this.interactionsStore[component.uid];
            }
            delete (0, _internalCommonJs.a5)[component.uid];
        };
        // Resizing
        // -----------------------------------------------------------------------------------------------------------------
        this.resizeRunner = new (0, _internalCommonJs.D)(()=>{
            this.props.emitter.trigger('_resize', true); // should window resizes be considered "forced" ?
            this.props.emitter.trigger('windowResize', {
                view: this.props.viewApi
            });
        });
        this.handleWindowResize = (ev)=>{
            let { options } = this.props;
            if (options.handleWindowResize && ev.target === window // avoid jqui events
            ) this.resizeRunner.request(options.windowResizeDelay);
        };
    }
    /*
    renders INSIDE of an outer div
    */ render() {
        let { props } = this;
        let { toolbarConfig, options } = props;
        let viewVGrow = false;
        let viewHeight = '';
        let viewAspectRatio;
        if (props.isHeightAuto || props.forPrint) viewHeight = '';
        else if (options.height != null) viewVGrow = true;
        else if (options.contentHeight != null) viewHeight = options.contentHeight;
        else viewAspectRatio = Math.max(options.aspectRatio, 0.5); // prevent from getting too tall
        let viewContext = this.buildViewContext(props.viewSpec, props.viewApi, props.options, props.dateProfileGenerator, props.dateEnv, props.nowManager, props.theme, props.pluginHooks, props.dispatch, props.getCurrentData, props.emitter, props.calendarApi, this.registerInteractiveComponent, this.unregisterInteractiveComponent);
        let viewLabelId = toolbarConfig.header && toolbarConfig.header.hasTitle ? this.state.viewLabelId : undefined;
        return (0, _preact.createElement)((0, _internalCommonJs.V).Provider, {
            value: viewContext
        }, (0, _preact.createElement)((0, _internalCommonJs.a6), {
            unit: "day"
        }, (nowDate)=>{
            let toolbarProps = this.buildToolbarProps(props.viewSpec, props.dateProfile, props.dateProfileGenerator, props.currentDate, nowDate, props.viewTitle);
            return (0, _preact.createElement)((0, _preact.Fragment), null, toolbarConfig.header && (0, _preact.createElement)(Toolbar, Object.assign({
                ref: this.headerRef,
                extraClassName: "fc-header-toolbar",
                model: toolbarConfig.header,
                titleId: viewLabelId
            }, toolbarProps)), (0, _preact.createElement)(ViewHarness, {
                liquid: viewVGrow,
                height: viewHeight,
                aspectRatio: viewAspectRatio,
                labeledById: viewLabelId
            }, this.renderView(props), this.buildAppendContent()), toolbarConfig.footer && (0, _preact.createElement)(Toolbar, Object.assign({
                ref: this.footerRef,
                extraClassName: "fc-footer-toolbar",
                model: toolbarConfig.footer,
                titleId: ""
            }, toolbarProps)));
        }));
    }
    componentDidMount() {
        let { props } = this;
        this.calendarInteractions = props.pluginHooks.calendarInteractions.map((CalendarInteractionClass)=>new CalendarInteractionClass(props));
        window.addEventListener('resize', this.handleWindowResize);
        let { propSetHandlers } = props.pluginHooks;
        for(let propName in propSetHandlers)propSetHandlers[propName](props[propName], props);
    }
    componentDidUpdate(prevProps) {
        let { props } = this;
        let { propSetHandlers } = props.pluginHooks;
        for(let propName in propSetHandlers)if (props[propName] !== prevProps[propName]) propSetHandlers[propName](props[propName], props);
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleWindowResize);
        this.resizeRunner.clear();
        for (let interaction of this.calendarInteractions)interaction.destroy();
        this.props.emitter.trigger('_unmount');
    }
    buildAppendContent() {
        let { props } = this;
        let children = props.pluginHooks.viewContainerAppends.map((buildAppendContent)=>buildAppendContent(props));
        return (0, _preact.createElement)((0, _preact.Fragment), {}, ...children);
    }
    renderView(props) {
        let { pluginHooks } = props;
        let { viewSpec } = props;
        let viewProps = {
            dateProfile: props.dateProfile,
            businessHours: props.businessHours,
            eventStore: props.renderableEventStore,
            eventUiBases: props.eventUiBases,
            dateSelection: props.dateSelection,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            isHeightAuto: props.isHeightAuto,
            forPrint: props.forPrint
        };
        let transformers = this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);
        for (let transformer of transformers)Object.assign(viewProps, transformer.transform(viewProps, props));
        let ViewComponent = viewSpec.component;
        return (0, _preact.createElement)(ViewComponent, Object.assign({}, viewProps));
    }
}
function buildToolbarProps(viewSpec, dateProfile, dateProfileGenerator, currentDate, now, title) {
    // don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid
    let todayInfo = dateProfileGenerator.build(now, undefined, false); // TODO: need `undefined` or else INFINITE LOOP for some reason
    let prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate, false);
    let nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate, false);
    return {
        title,
        activeButton: viewSpec.type,
        navUnit: viewSpec.singleUnit,
        isTodayEnabled: todayInfo.isValid && !(0, _internalCommonJs.G)(dateProfile.currentRange, now),
        isPrevEnabled: prevInfo.isValid,
        isNextEnabled: nextInfo.isValid
    };
}
// Plugin
// -----------------------------------------------------------------------------------------------------------------
function buildViewPropTransformers(theClasses) {
    return theClasses.map((TheClass)=>new TheClass());
}
class Calendar extends (0, _internalCommonJs.a7) {
    constructor(el, optionOverrides = {}){
        super();
        this.isRendering = false;
        this.isRendered = false;
        this.currentClassNames = [];
        this.customContentRenderId = 0;
        this.handleAction = (action)=>{
            // actions we know we want to render immediately
            switch(action.type){
                case 'SET_EVENT_DRAG':
                case 'SET_EVENT_RESIZE':
                    this.renderRunner.tryDrain();
            }
        };
        this.handleData = (data)=>{
            this.currentData = data;
            this.renderRunner.request(data.calendarOptions.rerenderDelay);
        };
        this.handleRenderRequest = ()=>{
            if (this.isRendering) {
                this.isRendered = true;
                let { currentData } = this;
                (0, _internalCommonJs.a8)(()=>{
                    (0, _preact.render)((0, _preact.createElement)((0, _internalCommonJs.a9), {
                        options: currentData.calendarOptions,
                        theme: currentData.theme,
                        emitter: currentData.emitter
                    }, (classNames, height, isHeightAuto, forPrint)=>{
                        this.setClassNames(classNames);
                        this.setHeight(height);
                        return (0, _preact.createElement)((0, _internalCommonJs.aa).Provider, {
                            value: this.customContentRenderId
                        }, (0, _preact.createElement)(CalendarContent, Object.assign({
                            isHeightAuto: isHeightAuto,
                            forPrint: forPrint
                        }, currentData)));
                    }), this.el);
                });
            } else if (this.isRendered) {
                this.isRendered = false;
                (0, _preact.render)(null, this.el);
                this.setClassNames([]);
                this.setHeight('');
            }
        };
        (0, _internalCommonJs.ab)(el);
        this.el = el;
        this.renderRunner = new (0, _internalCommonJs.D)(this.handleRenderRequest);
        new CalendarDataManager({
            optionOverrides,
            calendarApi: this,
            onAction: this.handleAction,
            onData: this.handleData
        });
    }
    render() {
        let wasRendering = this.isRendering;
        if (!wasRendering) this.isRendering = true;
        else this.customContentRenderId += 1;
        this.renderRunner.request();
        if (wasRendering) this.updateSize();
    }
    destroy() {
        if (this.isRendering) {
            this.isRendering = false;
            this.renderRunner.request();
        }
    }
    updateSize() {
        (0, _internalCommonJs.a8)(()=>{
            super.updateSize();
        });
    }
    batchRendering(func) {
        this.renderRunner.pause('batchRendering');
        func();
        this.renderRunner.resume('batchRendering');
    }
    pauseRendering() {
        this.renderRunner.pause('pauseRendering');
    }
    resumeRendering() {
        this.renderRunner.resume('pauseRendering', true);
    }
    resetOptions(optionOverrides, changedOptionNames) {
        this.currentDataManager.resetOptions(optionOverrides, changedOptionNames);
    }
    setClassNames(classNames) {
        if (!(0, _internalCommonJs.i)(classNames, this.currentClassNames)) {
            let { classList } = this.el;
            for (let className of this.currentClassNames)classList.remove(className);
            for (let className of classNames)classList.add(className);
            this.currentClassNames = classNames;
        }
    }
    setHeight(height) {
        (0, _internalCommonJs.ac)(this.el, 'height', height);
    }
}
function formatDate(dateInput, options = {}) {
    let dateEnv = buildDateEnv(options);
    let formatter = (0, _internalCommonJs.x)(options);
    let dateMeta = dateEnv.createMarkerMeta(dateInput);
    if (!dateMeta) return '';
    return dateEnv.format(dateMeta.marker, formatter, {
        forcedTzo: dateMeta.forcedTzo
    });
}
function formatRange(startInput, endInput, options) {
    let dateEnv = buildDateEnv(typeof options === 'object' && options ? options : {}); // pass in if non-null object
    let formatter = (0, _internalCommonJs.x)(options);
    let startMeta = dateEnv.createMarkerMeta(startInput);
    let endMeta = dateEnv.createMarkerMeta(endInput);
    if (!startMeta || !endMeta) return '';
    return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
        forcedStartTzo: startMeta.forcedTzo,
        forcedEndTzo: endMeta.forcedTzo,
        isEndExclusive: options.isEndExclusive,
        defaultSeparator: (0, _internalCommonJs.e).defaultRangeSeparator
    });
}
// TODO: more DRY and optimized
function buildDateEnv(settings) {
    let locale = buildLocale(settings.locale || 'en', organizeRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
    return new (0, _internalCommonJs.Q)(Object.assign(Object.assign({
        timeZone: (0, _internalCommonJs.e).timeZone,
        calendarSystem: 'gregory'
    }, settings), {
        locale
    }));
}
// HELPERS
/*
if nextDayThreshold is specified, slicing is done in an all-day fashion.
you can get nextDayThreshold from context.nextDayThreshold
*/ function sliceEvents(props, allDay) {
    return (0, _internalCommonJs.ad)(props.eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? props.nextDayThreshold : null).fg;
}
const version = '6.1.18';

},{"./internal-common.js":"ixm8z","preact":"agj7k","preact/compat":"cjkvk","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ixm8z":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>listenBySelector);
parcelHelpers.export(exports, "A", ()=>memoizeObjArg);
parcelHelpers.export(exports, "B", ()=>BaseComponent);
parcelHelpers.export(exports, "C", ()=>ContentContainer);
parcelHelpers.export(exports, "D", ()=>DelayedRunner);
parcelHelpers.export(exports, "E", ()=>isPropsEqual);
parcelHelpers.export(exports, "F", ()=>Emitter);
parcelHelpers.export(exports, "G", ()=>rangeContainsMarker);
parcelHelpers.export(exports, "H", ()=>createEmptyEventStore);
parcelHelpers.export(exports, "I", ()=>reduceEventStore);
parcelHelpers.export(exports, "J", ()=>rezoneEventStoreDates);
parcelHelpers.export(exports, "K", ()=>mergeRawOptions);
parcelHelpers.export(exports, "L", ()=>BASE_OPTION_REFINERS);
parcelHelpers.export(exports, "M", ()=>CALENDAR_LISTENER_REFINERS);
parcelHelpers.export(exports, "N", ()=>CALENDAR_OPTION_REFINERS);
parcelHelpers.export(exports, "O", ()=>COMPLEX_OPTION_COMPARATORS);
parcelHelpers.export(exports, "P", ()=>VIEW_OPTION_REFINERS);
parcelHelpers.export(exports, "Q", ()=>DateEnv);
parcelHelpers.export(exports, "R", ()=>DateProfileGenerator);
parcelHelpers.export(exports, "S", ()=>createEventUi);
parcelHelpers.export(exports, "T", ()=>Theme);
parcelHelpers.export(exports, "U", ()=>parseBusinessHours);
parcelHelpers.export(exports, "V", ()=>ViewContextType);
parcelHelpers.export(exports, "W", ()=>setRef);
parcelHelpers.export(exports, "X", ()=>Interaction);
parcelHelpers.export(exports, "Y", ()=>getElSeg);
parcelHelpers.export(exports, "Z", ()=>elementClosest);
parcelHelpers.export(exports, "_", ()=>EventImpl);
parcelHelpers.export(exports, "a", ()=>mapHash);
parcelHelpers.export(exports, "a$", ()=>preventDefault);
parcelHelpers.export(exports, "a0", ()=>listenToHoverBySelector);
parcelHelpers.export(exports, "a1", ()=>PureComponent);
parcelHelpers.export(exports, "a2", ()=>buildViewContext);
parcelHelpers.export(exports, "a3", ()=>getUniqueDomId);
parcelHelpers.export(exports, "a4", ()=>parseInteractionSettings);
parcelHelpers.export(exports, "a5", ()=>interactionSettingsStore);
parcelHelpers.export(exports, "a6", ()=>NowTimer);
parcelHelpers.export(exports, "a7", ()=>CalendarImpl);
parcelHelpers.export(exports, "a8", ()=>flushSync);
parcelHelpers.export(exports, "a9", ()=>CalendarRoot);
parcelHelpers.export(exports, "aA", ()=>memoizeArraylike);
parcelHelpers.export(exports, "aB", ()=>memoizeHashlike);
parcelHelpers.export(exports, "aC", ()=>intersectRects);
parcelHelpers.export(exports, "aD", ()=>pointInsideRect);
parcelHelpers.export(exports, "aE", ()=>constrainPoint);
parcelHelpers.export(exports, "aF", ()=>getRectCenter);
parcelHelpers.export(exports, "aG", ()=>diffPoints);
parcelHelpers.export(exports, "aH", ()=>translateRect);
parcelHelpers.export(exports, "aI", ()=>compareObjs);
parcelHelpers.export(exports, "aJ", ()=>collectFromHash);
parcelHelpers.export(exports, "aK", ()=>findElements);
parcelHelpers.export(exports, "aL", ()=>findDirectChildren);
parcelHelpers.export(exports, "aM", ()=>removeElement);
parcelHelpers.export(exports, "aN", ()=>applyStyle);
parcelHelpers.export(exports, "aO", ()=>elementMatches);
parcelHelpers.export(exports, "aP", ()=>getEventTargetViaRoot);
parcelHelpers.export(exports, "aQ", ()=>parseClassNames);
parcelHelpers.export(exports, "aR", ()=>getCanVGrowWithinCell);
parcelHelpers.export(exports, "aS", ()=>mergeEventStores);
parcelHelpers.export(exports, "aT", ()=>getRelevantEvents);
parcelHelpers.export(exports, "aU", ()=>eventTupleToStore);
parcelHelpers.export(exports, "aV", ()=>combineEventUis);
parcelHelpers.export(exports, "aW", ()=>Splitter);
parcelHelpers.export(exports, "aX", ()=>getDayClassNames);
parcelHelpers.export(exports, "aY", ()=>getDateMeta);
parcelHelpers.export(exports, "aZ", ()=>getSlotClassNames);
parcelHelpers.export(exports, "a_", ()=>buildNavLinkAttrs);
parcelHelpers.export(exports, "aa", ()=>RenderId);
parcelHelpers.export(exports, "ab", ()=>ensureElHasStyles);
parcelHelpers.export(exports, "ac", ()=>applyStyleProp);
parcelHelpers.export(exports, "ad", ()=>sliceEventStore);
parcelHelpers.export(exports, "ae", ()=>JsonRequestError);
parcelHelpers.export(exports, "af", ()=>createContext);
parcelHelpers.export(exports, "ag", ()=>refineProps);
parcelHelpers.export(exports, "ah", ()=>createEventInstance);
parcelHelpers.export(exports, "ai", ()=>parseEventDef);
parcelHelpers.export(exports, "aj", ()=>refineEventDef);
parcelHelpers.export(exports, "ak", ()=>padStart);
parcelHelpers.export(exports, "al", ()=>isInt);
parcelHelpers.export(exports, "am", ()=>parseFieldSpecs);
parcelHelpers.export(exports, "an", ()=>compareByFieldSpecs);
parcelHelpers.export(exports, "ao", ()=>flexibleCompare);
parcelHelpers.export(exports, "ap", ()=>preventSelection);
parcelHelpers.export(exports, "aq", ()=>allowSelection);
parcelHelpers.export(exports, "ar", ()=>preventContextMenu);
parcelHelpers.export(exports, "as", ()=>allowContextMenu);
parcelHelpers.export(exports, "at", ()=>compareNumbers);
parcelHelpers.export(exports, "au", ()=>enableCursor);
parcelHelpers.export(exports, "av", ()=>disableCursor);
parcelHelpers.export(exports, "aw", ()=>computeVisibleDayRange);
parcelHelpers.export(exports, "ax", ()=>isMultiDayRange);
parcelHelpers.export(exports, "ay", ()=>diffDates);
parcelHelpers.export(exports, "az", ()=>removeExact);
parcelHelpers.export(exports, "b", ()=>buildViewClassNames);
parcelHelpers.export(exports, "b$", ()=>renderMicroColGroup);
parcelHelpers.export(exports, "b0", ()=>whenTransitionDone);
parcelHelpers.export(exports, "b1", ()=>computeInnerRect);
parcelHelpers.export(exports, "b2", ()=>computeEdges);
parcelHelpers.export(exports, "b3", ()=>getClippingParents);
parcelHelpers.export(exports, "b4", ()=>computeRect);
parcelHelpers.export(exports, "b5", ()=>rangesEqual);
parcelHelpers.export(exports, "b6", ()=>rangesIntersect);
parcelHelpers.export(exports, "b7", ()=>rangeContainsRange);
parcelHelpers.export(exports, "b8", ()=>PositionCache);
parcelHelpers.export(exports, "b9", ()=>ScrollController);
parcelHelpers.export(exports, "bA", ()=>getEntrySpanEnd);
parcelHelpers.export(exports, "bB", ()=>binarySearch);
parcelHelpers.export(exports, "bC", ()=>groupIntersectingEntries);
parcelHelpers.export(exports, "bD", ()=>intersectSpans);
parcelHelpers.export(exports, "bE", ()=>interactionSettingsToStore);
parcelHelpers.export(exports, "bF", ()=>ElementDragging);
parcelHelpers.export(exports, "bG", ()=>config);
parcelHelpers.export(exports, "bH", ()=>parseDragMeta);
parcelHelpers.export(exports, "bI", ()=>DayHeader);
parcelHelpers.export(exports, "bJ", ()=>computeFallbackHeaderFormat);
parcelHelpers.export(exports, "bK", ()=>TableDateCell);
parcelHelpers.export(exports, "bL", ()=>TableDowCell);
parcelHelpers.export(exports, "bM", ()=>DaySeriesModel);
parcelHelpers.export(exports, "bN", ()=>hasBgRendering);
parcelHelpers.export(exports, "bO", ()=>buildSegTimeText);
parcelHelpers.export(exports, "bP", ()=>sortEventSegs);
parcelHelpers.export(exports, "bQ", ()=>getSegMeta);
parcelHelpers.export(exports, "bR", ()=>buildEventRangeKey);
parcelHelpers.export(exports, "bS", ()=>getSegAnchorAttrs);
parcelHelpers.export(exports, "bT", ()=>DayTableModel);
parcelHelpers.export(exports, "bU", ()=>Slicer);
parcelHelpers.export(exports, "bV", ()=>applyMutationToEventStore);
parcelHelpers.export(exports, "bW", ()=>isPropsValid);
parcelHelpers.export(exports, "bX", ()=>isInteractionValid);
parcelHelpers.export(exports, "bY", ()=>isDateSelectionValid);
parcelHelpers.export(exports, "bZ", ()=>SimpleScrollGrid);
parcelHelpers.export(exports, "b_", ()=>hasShrinkWidth);
parcelHelpers.export(exports, "ba", ()=>ElementScrollController);
parcelHelpers.export(exports, "bb", ()=>WindowScrollController);
parcelHelpers.export(exports, "bc", ()=>DateComponent);
parcelHelpers.export(exports, "bd", ()=>isDateSpansEqual);
parcelHelpers.export(exports, "be", ()=>addMs);
parcelHelpers.export(exports, "bf", ()=>addWeeks);
parcelHelpers.export(exports, "bg", ()=>diffWeeks);
parcelHelpers.export(exports, "bh", ()=>diffWholeWeeks);
parcelHelpers.export(exports, "bi", ()=>diffDayAndTime);
parcelHelpers.export(exports, "bj", ()=>diffDays);
parcelHelpers.export(exports, "bk", ()=>isValidDate);
parcelHelpers.export(exports, "bl", ()=>asCleanDays);
parcelHelpers.export(exports, "bm", ()=>multiplyDuration);
parcelHelpers.export(exports, "bn", ()=>addDurations);
parcelHelpers.export(exports, "bo", ()=>asRoughMinutes);
parcelHelpers.export(exports, "bp", ()=>asRoughSeconds);
parcelHelpers.export(exports, "bq", ()=>asRoughMs);
parcelHelpers.export(exports, "br", ()=>wholeDivideDurations);
parcelHelpers.export(exports, "bs", ()=>formatIsoTimeString);
parcelHelpers.export(exports, "bt", ()=>formatDayString);
parcelHelpers.export(exports, "bu", ()=>buildIsoString);
parcelHelpers.export(exports, "bv", ()=>formatIsoMonthStr);
parcelHelpers.export(exports, "bw", ()=>NamedTimeZoneImpl);
parcelHelpers.export(exports, "bx", ()=>parse);
parcelHelpers.export(exports, "by", ()=>SegHierarchy);
parcelHelpers.export(exports, "bz", ()=>buildEntryKey);
parcelHelpers.export(exports, "c", ()=>greatestDurationDenominator);
parcelHelpers.export(exports, "c0", ()=>getScrollGridClassNames);
parcelHelpers.export(exports, "c1", ()=>getSectionClassNames);
parcelHelpers.export(exports, "c2", ()=>getSectionHasLiquidHeight);
parcelHelpers.export(exports, "c3", ()=>getAllowYScrolling);
parcelHelpers.export(exports, "c4", ()=>renderChunkContent);
parcelHelpers.export(exports, "c5", ()=>computeShrinkWidth);
parcelHelpers.export(exports, "c6", ()=>sanitizeShrinkWidth);
parcelHelpers.export(exports, "c7", ()=>isColPropsEqual);
parcelHelpers.export(exports, "c8", ()=>renderScrollShim);
parcelHelpers.export(exports, "c9", ()=>getStickyFooterScrollbar);
parcelHelpers.export(exports, "ca", ()=>getStickyHeaderDates);
parcelHelpers.export(exports, "cb", ()=>Scroller);
parcelHelpers.export(exports, "cc", ()=>getScrollbarWidths);
parcelHelpers.export(exports, "cd", ()=>RefMap);
parcelHelpers.export(exports, "ce", ()=>getIsRtlScrollbarOnLeft);
parcelHelpers.export(exports, "cf", ()=>ScrollResponder);
parcelHelpers.export(exports, "cg", ()=>StandardEvent);
parcelHelpers.export(exports, "ch", ()=>NowIndicatorContainer);
parcelHelpers.export(exports, "ci", ()=>DayCellContainer);
parcelHelpers.export(exports, "cj", ()=>hasCustomDayCellContent);
parcelHelpers.export(exports, "ck", ()=>EventContainer);
parcelHelpers.export(exports, "cl", ()=>renderFill);
parcelHelpers.export(exports, "cm", ()=>BgEvent);
parcelHelpers.export(exports, "cn", ()=>WeekNumberContainer);
parcelHelpers.export(exports, "co", ()=>MoreLinkContainer);
parcelHelpers.export(exports, "cp", ()=>computeEarliestSegStart);
parcelHelpers.export(exports, "cq", ()=>ViewContainer);
parcelHelpers.export(exports, "cr", ()=>triggerDateSelect);
parcelHelpers.export(exports, "cs", ()=>getDefaultEventEnd);
parcelHelpers.export(exports, "ct", ()=>injectStyles);
parcelHelpers.export(exports, "cu", ()=>buildElAttrs);
parcelHelpers.export(exports, "cv", ()=>CustomRenderingStore);
parcelHelpers.export(exports, "d", ()=>createDuration);
parcelHelpers.export(exports, "e", ()=>BASE_OPTION_DEFAULTS);
parcelHelpers.export(exports, "f", ()=>arrayToHash);
parcelHelpers.export(exports, "g", ()=>guid);
parcelHelpers.export(exports, "h", ()=>filterHash);
parcelHelpers.export(exports, "i", ()=>isArraysEqual);
parcelHelpers.export(exports, "j", ()=>buildEventSourceRefiners);
parcelHelpers.export(exports, "k", ()=>formatWithOrdinals);
parcelHelpers.export(exports, "l", ()=>buildRangeApiWithTimeZone);
parcelHelpers.export(exports, "m", ()=>mergeProps);
parcelHelpers.export(exports, "n", ()=>identity);
parcelHelpers.export(exports, "o", ()=>intersectRanges);
parcelHelpers.export(exports, "p", ()=>parseEventSource);
parcelHelpers.export(exports, "q", ()=>startOfDay);
parcelHelpers.export(exports, "r", ()=>requestJson);
parcelHelpers.export(exports, "s", ()=>subtractDurations);
parcelHelpers.export(exports, "t", ()=>addDays);
parcelHelpers.export(exports, "u", ()=>unpromisify);
parcelHelpers.export(exports, "v", ()=>hashValuesToArray);
parcelHelpers.export(exports, "w", ()=>buildEventApis);
parcelHelpers.export(exports, "x", ()=>createFormatter);
parcelHelpers.export(exports, "y", ()=>diffWholeDays);
parcelHelpers.export(exports, "z", ()=>memoize);
var _preact = require("preact");
var _compat = require("preact/compat");
const styleTexts = [];
const styleEls = new Map();
function injectStyles(styleText) {
    styleTexts.push(styleText);
    styleEls.forEach((styleEl)=>{
        appendStylesTo(styleEl, styleText);
    });
}
function ensureElHasStyles(el) {
    if (el.isConnected && // sometimes true if SSR system simulates DOM
    el.getRootNode // sometimes undefined if SSR system simulates DOM
    ) registerStylesRoot(el.getRootNode());
}
function registerStylesRoot(rootNode) {
    let styleEl = styleEls.get(rootNode);
    if (!styleEl || !styleEl.isConnected) {
        styleEl = rootNode.querySelector('style[data-fullcalendar]');
        if (!styleEl) {
            styleEl = document.createElement('style');
            styleEl.setAttribute('data-fullcalendar', '');
            const nonce = getNonceValue();
            if (nonce) styleEl.nonce = nonce;
            const parentEl = rootNode === document ? document.head : rootNode;
            const insertBefore = rootNode === document ? parentEl.querySelector('script,link[rel=stylesheet],link[as=style],style') : parentEl.firstChild;
            parentEl.insertBefore(styleEl, insertBefore);
        }
        styleEls.set(rootNode, styleEl);
        hydrateStylesRoot(styleEl);
    }
}
function hydrateStylesRoot(styleEl) {
    for (const styleText of styleTexts)appendStylesTo(styleEl, styleText);
}
function appendStylesTo(styleEl, styleText) {
    const { sheet } = styleEl;
    const ruleCnt = sheet.cssRules.length;
    styleText.split('}').forEach((styleStr, i)=>{
        styleStr = styleStr.trim();
        if (styleStr) sheet.insertRule(styleStr + '}', ruleCnt + i);
    });
}
// nonce
// -------------------------------------------------------------------------------------------------
let queriedNonceValue;
function getNonceValue() {
    if (queriedNonceValue === undefined) queriedNonceValue = queryNonceValue();
    return queriedNonceValue;
}
/*
TODO: discourage meta tag and instead put nonce attribute on placeholder <style> tag
*/ function queryNonceValue() {
    const metaWithNonce = document.querySelector('meta[name="csp-nonce"]');
    if (metaWithNonce && metaWithNonce.hasAttribute('content')) return metaWithNonce.getAttribute('content');
    const elWithNonce = document.querySelector('script[nonce]');
    if (elWithNonce) return elWithNonce.nonce || '';
    return '';
}
// main
// -------------------------------------------------------------------------------------------------
if (typeof document !== 'undefined') registerStylesRoot(document);
var css_248z = ":root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url(\"data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\") format(\"truetype\")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:\"\\e900\"}.fc-icon-chevron-right:before{content:\"\\e901\"}.fc-icon-chevrons-left:before{content:\"\\e902\"}.fc-icon-chevrons-right:before{content:\"\\e903\"}.fc-icon-minus-square:before{content:\"\\e904\"}.fc-icon-plus-square:before{content:\"\\e905\"}.fc-icon-x:before{content:\"\\e906\"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:\"\";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:\"\";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:\"\";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}";
injectStyles(css_248z);
class DelayedRunner {
    constructor(drainedOption){
        this.drainedOption = drainedOption;
        this.isRunning = false;
        this.isDirty = false;
        this.pauseDepths = {};
        this.timeoutId = 0;
    }
    request(delay) {
        this.isDirty = true;
        if (!this.isPaused()) {
            this.clearTimeout();
            if (delay == null) this.tryDrain();
            else this.timeoutId = setTimeout(this.tryDrain.bind(this), delay);
        }
    }
    pause(scope = '') {
        let { pauseDepths } = this;
        pauseDepths[scope] = (pauseDepths[scope] || 0) + 1;
        this.clearTimeout();
    }
    resume(scope = '', force) {
        let { pauseDepths } = this;
        if (scope in pauseDepths) {
            if (force) delete pauseDepths[scope];
            else {
                pauseDepths[scope] -= 1;
                let depth = pauseDepths[scope];
                if (depth <= 0) delete pauseDepths[scope];
            }
            this.tryDrain();
        }
    }
    isPaused() {
        return Object.keys(this.pauseDepths).length;
    }
    tryDrain() {
        if (!this.isRunning && !this.isPaused()) {
            this.isRunning = true;
            while(this.isDirty){
                this.isDirty = false;
                this.drained(); // might set isDirty to true again
            }
            this.isRunning = false;
        }
    }
    clear() {
        this.clearTimeout();
        this.isDirty = false;
        this.pauseDepths = {};
    }
    clearTimeout() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = 0;
        }
    }
    drained() {
        if (this.drainedOption) this.drainedOption();
    }
}
function removeElement(el) {
    if (el.parentNode) el.parentNode.removeChild(el);
}
// Querying
// ----------------------------------------------------------------------------------------------------------------
function elementClosest(el, selector) {
    if (el.closest) return el.closest(selector);
    if (!document.documentElement.contains(el)) return null;
    do {
        if (elementMatches(el, selector)) return el;
        el = el.parentElement || el.parentNode;
    }while (el !== null && el.nodeType === 1);
    return null;
}
function elementMatches(el, selector) {
    let method = el.matches || el.matchesSelector || el.msMatchesSelector;
    return method.call(el, selector);
}
// accepts multiple subject els
// returns a real array. good for methods like forEach
// TODO: accept the document
function findElements(container, selector) {
    let containers = container instanceof HTMLElement ? [
        container
    ] : container;
    let allMatches = [];
    for(let i = 0; i < containers.length; i += 1){
        let matches = containers[i].querySelectorAll(selector);
        for(let j = 0; j < matches.length; j += 1)allMatches.push(matches[j]);
    }
    return allMatches;
}
// accepts multiple subject els
// only queries direct child elements // TODO: rename to findDirectChildren!
function findDirectChildren(parent, selector) {
    let parents = parent instanceof HTMLElement ? [
        parent
    ] : parent;
    let allMatches = [];
    for(let i = 0; i < parents.length; i += 1){
        let childNodes = parents[i].children; // only ever elements
        for(let j = 0; j < childNodes.length; j += 1){
            let childNode = childNodes[j];
            if (!selector || elementMatches(childNode, selector)) allMatches.push(childNode);
        }
    }
    return allMatches;
}
// Style
// ----------------------------------------------------------------------------------------------------------------
const PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;
function applyStyle(el, props) {
    for(let propName in props)applyStyleProp(el, propName, props[propName]);
}
function applyStyleProp(el, name, val) {
    if (val == null) el.style[name] = '';
    else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) el.style[name] = `${val}px`;
    else el.style[name] = val;
}
// Event Handling
// ----------------------------------------------------------------------------------------------------------------
// if intercepting bubbled events at the document/window/body level,
// and want to see originating element (the 'target'), use this util instead
// of `ev.target` because it goes within web-component boundaries.
function getEventTargetViaRoot(ev) {
    var _a, _b;
    return (_b = (_a = ev.composedPath) === null || _a === void 0 ? void 0 : _a.call(ev)[0]) !== null && _b !== void 0 ? _b : ev.target;
}
// Unique ID for DOM attribute
let guid$1 = 0;
function getUniqueDomId() {
    guid$1 += 1;
    return 'fc-dom-' + guid$1;
}
// Stops a mouse/touch event from doing it's native browser action
function preventDefault(ev) {
    ev.preventDefault();
}
// Event Delegation
// ----------------------------------------------------------------------------------------------------------------
function buildDelegationHandler(selector, handler) {
    return (ev)=>{
        let matchedChild = elementClosest(ev.target, selector);
        if (matchedChild) handler.call(matchedChild, ev, matchedChild);
    };
}
function listenBySelector(container, eventType, selector, handler) {
    let attachedHandler = buildDelegationHandler(selector, handler);
    container.addEventListener(eventType, attachedHandler);
    return ()=>{
        container.removeEventListener(eventType, attachedHandler);
    };
}
function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
    let currentMatchedChild;
    return listenBySelector(container, 'mouseover', selector, (mouseOverEv, matchedChild)=>{
        if (matchedChild !== currentMatchedChild) {
            currentMatchedChild = matchedChild;
            onMouseEnter(mouseOverEv, matchedChild);
            let realOnMouseLeave = (mouseLeaveEv)=>{
                currentMatchedChild = null;
                onMouseLeave(mouseLeaveEv, matchedChild);
                matchedChild.removeEventListener('mouseleave', realOnMouseLeave);
            };
            // listen to the next mouseleave, and then unattach
            matchedChild.addEventListener('mouseleave', realOnMouseLeave);
        }
    });
}
// Animation
// ----------------------------------------------------------------------------------------------------------------
const transitionEventNames = [
    'webkitTransitionEnd',
    'otransitionend',
    'oTransitionEnd',
    'msTransitionEnd',
    'transitionend'
];
// triggered only when the next single subsequent transition finishes
function whenTransitionDone(el, callback) {
    let realCallback = (ev)=>{
        callback(ev);
        transitionEventNames.forEach((eventName)=>{
            el.removeEventListener(eventName, realCallback);
        });
    };
    transitionEventNames.forEach((eventName)=>{
        el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
    });
}
// ARIA workarounds
// ----------------------------------------------------------------------------------------------------------------
function createAriaClickAttrs(handler) {
    return Object.assign({
        onClick: handler
    }, createAriaKeyboardAttrs(handler));
}
function createAriaKeyboardAttrs(handler) {
    return {
        tabIndex: 0,
        onKeyDown (ev) {
            if (ev.key === 'Enter' || ev.key === ' ') {
                handler(ev);
                ev.preventDefault(); // if space, don't scroll down page
            }
        }
    };
}
let guidNumber = 0;
function guid() {
    guidNumber += 1;
    return String(guidNumber);
}
/* FullCalendar-specific DOM Utilities
----------------------------------------------------------------------------------------------------------------------*/ // Make the mouse cursor express that an event is not allowed in the current area
function disableCursor() {
    document.body.classList.add('fc-not-allowed');
}
// Returns the mouse cursor to its original look
function enableCursor() {
    document.body.classList.remove('fc-not-allowed');
}
/* Selection
----------------------------------------------------------------------------------------------------------------------*/ function preventSelection(el) {
    el.style.userSelect = 'none';
    el.style.webkitUserSelect = 'none';
    el.addEventListener('selectstart', preventDefault);
}
function allowSelection(el) {
    el.style.userSelect = '';
    el.style.webkitUserSelect = '';
    el.removeEventListener('selectstart', preventDefault);
}
/* Context Menu
----------------------------------------------------------------------------------------------------------------------*/ function preventContextMenu(el) {
    el.addEventListener('contextmenu', preventDefault);
}
function allowContextMenu(el) {
    el.removeEventListener('contextmenu', preventDefault);
}
function parseFieldSpecs(input) {
    let specs = [];
    let tokens = [];
    let i;
    let token;
    if (typeof input === 'string') tokens = input.split(/\s*,\s*/);
    else if (typeof input === 'function') tokens = [
        input
    ];
    else if (Array.isArray(input)) tokens = input;
    for(i = 0; i < tokens.length; i += 1){
        token = tokens[i];
        if (typeof token === 'string') specs.push(token.charAt(0) === '-' ? {
            field: token.substring(1),
            order: -1
        } : {
            field: token,
            order: 1
        });
        else if (typeof token === 'function') specs.push({
            func: token
        });
    }
    return specs;
}
function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
    let i;
    let cmp;
    for(i = 0; i < fieldSpecs.length; i += 1){
        cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);
        if (cmp) return cmp;
    }
    return 0;
}
function compareByFieldSpec(obj0, obj1, fieldSpec) {
    if (fieldSpec.func) return fieldSpec.func(obj0, obj1);
    return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
}
function flexibleCompare(a, b) {
    if (!a && !b) return 0;
    if (b == null) return -1;
    if (a == null) return 1;
    if (typeof a === 'string' || typeof b === 'string') return String(a).localeCompare(String(b));
    return a - b;
}
/* String Utilities
----------------------------------------------------------------------------------------------------------------------*/ function padStart(val, len) {
    let s = String(val);
    return '000'.substr(0, len - s.length) + s;
}
function formatWithOrdinals(formatter, args, fallbackText) {
    if (typeof formatter === 'function') return formatter(...args);
    if (typeof formatter === 'string') return args.reduce((str, arg, index)=>str.replace('$' + index, arg || ''), formatter);
    return fallbackText;
}
/* Number Utilities
----------------------------------------------------------------------------------------------------------------------*/ function compareNumbers(a, b) {
    return a - b;
}
function isInt(n) {
    return n % 1 === 0;
}
/* FC-specific DOM dimension stuff
----------------------------------------------------------------------------------------------------------------------*/ function computeSmallestCellWidth(cellEl) {
    let allWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-frame');
    let contentWidthEl = cellEl.querySelector('.fc-scrollgrid-shrink-cushion');
    if (!allWidthEl) throw new Error('needs fc-scrollgrid-shrink-frame className'); // TODO: use const
    if (!contentWidthEl) throw new Error('needs fc-scrollgrid-shrink-cushion className');
    return cellEl.getBoundingClientRect().width - allWidthEl.getBoundingClientRect().width + // the cell padding+border
    contentWidthEl.getBoundingClientRect().width;
}
const INTERNAL_UNITS = [
    'years',
    'months',
    'days',
    'milliseconds'
];
const PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;
// Parsing and Creation
function createDuration(input, unit) {
    if (typeof input === 'string') return parseString(input);
    if (typeof input === 'object' && input) return parseObject(input);
    if (typeof input === 'number') return parseObject({
        [unit || 'milliseconds']: input
    });
    return null;
}
function parseString(s) {
    let m = PARSE_RE.exec(s);
    if (m) {
        let sign = m[1] ? -1 : 1;
        return {
            years: 0,
            months: 0,
            days: sign * (m[2] ? parseInt(m[2], 10) : 0),
            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 3600000 + // hours
            (m[4] ? parseInt(m[4], 10) : 0) * 60000 + // minutes
            (m[5] ? parseInt(m[5], 10) : 0) * 1000 + // seconds
            (m[6] ? parseInt(m[6], 10) : 0 // ms
            ))
        };
    }
    return null;
}
function parseObject(obj) {
    let duration = {
        years: obj.years || obj.year || 0,
        months: obj.months || obj.month || 0,
        days: obj.days || obj.day || 0,
        milliseconds: (obj.hours || obj.hour || 0) * 3600000 + // hours
        (obj.minutes || obj.minute || 0) * 60000 + // minutes
        (obj.seconds || obj.second || 0) * 1000 + // seconds
        (obj.milliseconds || obj.millisecond || obj.ms || 0)
    };
    let weeks = obj.weeks || obj.week;
    if (weeks) {
        duration.days += weeks * 7;
        duration.specifiedWeeks = true;
    }
    return duration;
}
// Equality
function durationsEqual(d0, d1) {
    return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
}
function asCleanDays(dur) {
    if (!dur.years && !dur.months && !dur.milliseconds) return dur.days;
    return 0;
}
// Simple Math
function addDurations(d0, d1) {
    return {
        years: d0.years + d1.years,
        months: d0.months + d1.months,
        days: d0.days + d1.days,
        milliseconds: d0.milliseconds + d1.milliseconds
    };
}
function subtractDurations(d1, d0) {
    return {
        years: d1.years - d0.years,
        months: d1.months - d0.months,
        days: d1.days - d0.days,
        milliseconds: d1.milliseconds - d0.milliseconds
    };
}
function multiplyDuration(d, n) {
    return {
        years: d.years * n,
        months: d.months * n,
        days: d.days * n,
        milliseconds: d.milliseconds * n
    };
}
// Conversions
// "Rough" because they are based on average-case Gregorian months/years
function asRoughYears(dur) {
    return asRoughDays(dur) / 365;
}
function asRoughMonths(dur) {
    return asRoughDays(dur) / 30;
}
function asRoughDays(dur) {
    return asRoughMs(dur) / 864e5;
}
function asRoughMinutes(dur) {
    return asRoughMs(dur) / 60000;
}
function asRoughSeconds(dur) {
    return asRoughMs(dur) / 1000;
}
function asRoughMs(dur) {
    return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
}
// Advanced Math
function wholeDivideDurations(numerator, denominator) {
    let res = null;
    for(let i = 0; i < INTERNAL_UNITS.length; i += 1){
        let unit = INTERNAL_UNITS[i];
        if (denominator[unit]) {
            let localRes = numerator[unit] / denominator[unit];
            if (!isInt(localRes) || res !== null && res !== localRes) return null;
            res = localRes;
        } else if (numerator[unit]) // needs to divide by something but can't!
        return null;
    }
    return res;
}
function greatestDurationDenominator(dur) {
    let ms = dur.milliseconds;
    if (ms) {
        if (ms % 1000 !== 0) return {
            unit: 'millisecond',
            value: ms
        };
        if (ms % 60000 !== 0) return {
            unit: 'second',
            value: ms / 1000
        };
        if (ms % 3600000 !== 0) return {
            unit: 'minute',
            value: ms / 60000
        };
        if (ms) return {
            unit: 'hour',
            value: ms / 3600000
        };
    }
    if (dur.days) {
        if (dur.specifiedWeeks && dur.days % 7 === 0) return {
            unit: 'week',
            value: dur.days / 7
        };
        return {
            unit: 'day',
            value: dur.days
        };
    }
    if (dur.months) return {
        unit: 'month',
        value: dur.months
    };
    if (dur.years) return {
        unit: 'year',
        value: dur.years
    };
    return {
        unit: 'millisecond',
        value: 0
    };
}
// TODO: new util arrayify?
function removeExact(array, exactVal) {
    let removeCnt = 0;
    let i = 0;
    while(i < array.length)if (array[i] === exactVal) {
        array.splice(i, 1);
        removeCnt += 1;
    } else i += 1;
    return removeCnt;
}
function isArraysEqual(a0, a1, equalityFunc) {
    if (a0 === a1) return true;
    let len = a0.length;
    let i;
    if (len !== a1.length) return false;
    for(i = 0; i < len; i += 1){
        if (!(equalityFunc ? equalityFunc(a0[i], a1[i]) : a0[i] === a1[i])) return false;
    }
    return true;
}
const DAY_IDS = [
    'sun',
    'mon',
    'tue',
    'wed',
    'thu',
    'fri',
    'sat'
];
// Adding
function addWeeks(m, n) {
    let a = dateToUtcArray(m);
    a[2] += n * 7;
    return arrayToUtcDate(a);
}
function addDays(m, n) {
    let a = dateToUtcArray(m);
    a[2] += n;
    return arrayToUtcDate(a);
}
function addMs(m, n) {
    let a = dateToUtcArray(m);
    a[6] += n;
    return arrayToUtcDate(a);
}
// Diffing (all return floats)
// TODO: why not use ranges?
function diffWeeks(m0, m1) {
    return diffDays(m0, m1) / 7;
}
function diffDays(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 86400000;
}
function diffHours(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 3600000;
}
function diffMinutes(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 60000;
}
function diffSeconds(m0, m1) {
    return (m1.valueOf() - m0.valueOf()) / 1000;
}
function diffDayAndTime(m0, m1) {
    let m0day = startOfDay(m0);
    let m1day = startOfDay(m1);
    return {
        years: 0,
        months: 0,
        days: Math.round(diffDays(m0day, m1day)),
        milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
    };
}
// Diffing Whole Units
function diffWholeWeeks(m0, m1) {
    let d = diffWholeDays(m0, m1);
    if (d !== null && d % 7 === 0) return d / 7;
    return null;
}
function diffWholeDays(m0, m1) {
    if (timeAsMs(m0) === timeAsMs(m1)) return Math.round(diffDays(m0, m1));
    return null;
}
// Start-Of
function startOfDay(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate()
    ]);
}
function startOfHour(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours()
    ]);
}
function startOfMinute(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours(),
        m.getUTCMinutes()
    ]);
}
function startOfSecond(m) {
    return arrayToUtcDate([
        m.getUTCFullYear(),
        m.getUTCMonth(),
        m.getUTCDate(),
        m.getUTCHours(),
        m.getUTCMinutes(),
        m.getUTCSeconds()
    ]);
}
// Week Computation
function weekOfYear(marker, dow, doy) {
    let y = marker.getUTCFullYear();
    let w = weekOfGivenYear(marker, y, dow, doy);
    if (w < 1) return weekOfGivenYear(marker, y - 1, dow, doy);
    let nextW = weekOfGivenYear(marker, y + 1, dow, doy);
    if (nextW >= 1) return Math.min(w, nextW);
    return w;
}
function weekOfGivenYear(marker, year, dow, doy) {
    let firstWeekStart = arrayToUtcDate([
        year,
        0,
        1 + firstWeekOffset(year, dow, doy)
    ]);
    let dayStart = startOfDay(marker);
    let days = Math.round(diffDays(firstWeekStart, dayStart));
    return Math.floor(days / 7) + 1; // zero-indexed
}
// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    let fwd = 7 + dow - doy;
    // first-week day local weekday -- which local weekday is fwd
    let fwdlw = (7 + arrayToUtcDate([
        year,
        0,
        fwd
    ]).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
}
// Array Conversion
function dateToLocalArray(date) {
    return [
        date.getFullYear(),
        date.getMonth(),
        date.getDate(),
        date.getHours(),
        date.getMinutes(),
        date.getSeconds(),
        date.getMilliseconds()
    ];
}
function arrayToLocalDate(a) {
    return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], a[3] || 0, a[4] || 0, a[5] || 0);
}
function dateToUtcArray(date) {
    return [
        date.getUTCFullYear(),
        date.getUTCMonth(),
        date.getUTCDate(),
        date.getUTCHours(),
        date.getUTCMinutes(),
        date.getUTCSeconds(),
        date.getUTCMilliseconds()
    ];
}
function arrayToUtcDate(a) {
    // according to web standards (and Safari), a month index is required.
    // massage if only given a year.
    if (a.length === 1) a = a.concat([
        0
    ]);
    return new Date(Date.UTC(...a));
}
// Other Utils
function isValidDate(m) {
    return !isNaN(m.valueOf());
}
function timeAsMs(m) {
    return m.getUTCHours() * 3600000 + m.getUTCMinutes() * 60000 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
}
// timeZoneOffset is in minutes
function buildIsoString(marker, timeZoneOffset, stripZeroTime = false) {
    let s = marker.toISOString();
    s = s.replace('.000', '');
    if (stripZeroTime) s = s.replace('T00:00:00Z', '');
    if (s.length > 10) {
        if (timeZoneOffset == null) s = s.replace('Z', '');
        else if (timeZoneOffset !== 0) s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
    // otherwise, its UTC-0 and we want to keep the Z
    }
    return s;
}
// formats the date, but with no time part
// TODO: somehow merge with buildIsoString and stripZeroTime
// TODO: rename. omit "string"
function formatDayString(marker) {
    return marker.toISOString().replace(/T.*$/, '');
}
function formatIsoMonthStr(marker) {
    return marker.toISOString().match(/^\d{4}-\d{2}/)[0];
}
// TODO: use Date::toISOString and use everything after the T?
function formatIsoTimeString(marker) {
    return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
}
function formatTimeZoneOffset(minutes, doIso = false) {
    let sign = minutes < 0 ? '-' : '+';
    let abs = Math.abs(minutes);
    let hours = Math.floor(abs / 60);
    let mins = Math.round(abs % 60);
    if (doIso) return `${sign + padStart(hours, 2)}:${padStart(mins, 2)}`;
    return `GMT${sign}${hours}${mins ? `:${padStart(mins, 2)}` : ''}`;
}
function memoize(workerFunc, resEquality, teardownFunc) {
    let currentArgs;
    let currentRes;
    return function(...newArgs) {
        if (!currentArgs) currentRes = workerFunc.apply(this, newArgs);
        else if (!isArraysEqual(currentArgs, newArgs)) {
            if (teardownFunc) teardownFunc(currentRes);
            let res = workerFunc.apply(this, newArgs);
            if (!resEquality || !resEquality(res, currentRes)) currentRes = res;
        }
        currentArgs = newArgs;
        return currentRes;
    };
}
function memoizeObjArg(workerFunc, resEquality, teardownFunc) {
    let currentArg;
    let currentRes;
    return (newArg)=>{
        if (!currentArg) currentRes = workerFunc.call(this, newArg);
        else if (!isPropsEqual(currentArg, newArg)) {
            if (teardownFunc) teardownFunc(currentRes);
            let res = workerFunc.call(this, newArg);
            if (!resEquality || !resEquality(res, currentRes)) currentRes = res;
        }
        currentArg = newArg;
        return currentRes;
    };
}
function memoizeArraylike(workerFunc, resEquality, teardownFunc) {
    let currentArgSets = [];
    let currentResults = [];
    return (newArgSets)=>{
        let currentLen = currentArgSets.length;
        let newLen = newArgSets.length;
        let i = 0;
        for(; i < currentLen; i += 1){
            if (!newArgSets[i]) {
                if (teardownFunc) teardownFunc(currentResults[i]);
            } else if (!isArraysEqual(currentArgSets[i], newArgSets[i])) {
                if (teardownFunc) teardownFunc(currentResults[i]);
                let res = workerFunc.apply(this, newArgSets[i]);
                if (!resEquality || !resEquality(res, currentResults[i])) currentResults[i] = res;
            }
        }
        for(; i < newLen; i += 1)currentResults[i] = workerFunc.apply(this, newArgSets[i]);
        currentArgSets = newArgSets;
        currentResults.splice(newLen); // remove excess
        return currentResults;
    };
}
function memoizeHashlike(workerFunc, resEquality, teardownFunc) {
    let currentArgHash = {};
    let currentResHash = {};
    return (newArgHash)=>{
        let newResHash = {};
        for(let key in newArgHash){
            if (!currentResHash[key]) newResHash[key] = workerFunc.apply(this, newArgHash[key]);
            else if (!isArraysEqual(currentArgHash[key], newArgHash[key])) {
                if (teardownFunc) teardownFunc(currentResHash[key]);
                let res = workerFunc.apply(this, newArgHash[key]);
                newResHash[key] = resEquality && resEquality(res, currentResHash[key]) ? currentResHash[key] : res;
            } else newResHash[key] = currentResHash[key];
        }
        currentArgHash = newArgHash;
        currentResHash = newResHash;
        return newResHash;
    };
}
const EXTENDED_SETTINGS_AND_SEVERITIES = {
    week: 3,
    separator: 9,
    omitZeroMinute: 9,
    meridiem: 9,
    omitCommas: 9
};
const STANDARD_DATE_PROP_SEVERITIES = {
    timeZoneName: 7,
    era: 6,
    year: 5,
    month: 4,
    day: 2,
    weekday: 2,
    hour: 1,
    minute: 1,
    second: 1
};
const MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too
const COMMA_RE = /,/g; // we need re for globalness
const MULTI_SPACE_RE = /\s+/g;
const LTR_RE = /\u200e/g; // control character
const UTC_RE = /UTC|GMT/;
class NativeFormatter {
    constructor(formatSettings){
        let standardDateProps = {};
        let extendedSettings = {};
        let smallestUnitNum = 9; // the smallest unit in the formatter (9 is a sentinel, beyond max)
        for(let name in formatSettings)if (name in EXTENDED_SETTINGS_AND_SEVERITIES) {
            extendedSettings[name] = formatSettings[name];
            const severity = EXTENDED_SETTINGS_AND_SEVERITIES[name];
            if (severity < 9) smallestUnitNum = Math.min(EXTENDED_SETTINGS_AND_SEVERITIES[name], smallestUnitNum);
        } else {
            standardDateProps[name] = formatSettings[name];
            if (name in STANDARD_DATE_PROP_SEVERITIES) smallestUnitNum = Math.min(STANDARD_DATE_PROP_SEVERITIES[name], smallestUnitNum);
        }
        this.standardDateProps = standardDateProps;
        this.extendedSettings = extendedSettings;
        this.smallestUnitNum = smallestUnitNum;
        this.buildFormattingFunc = memoize(buildFormattingFunc);
    }
    format(date, context) {
        return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        let { standardDateProps, extendedSettings } = this;
        let diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);
        if (!diffSeverity) return this.format(start, context);
        let biggestUnitForPartial = diffSeverity;
        if (biggestUnitForPartial > 1 && // the two dates are different in a way that's larger scale than time
        (standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
        let full0 = this.format(start, context);
        let full1 = this.format(end, context);
        if (full0 === full1) return full0;
        let partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
        let partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
        let partial0 = partialFormattingFunc(start);
        let partial1 = partialFormattingFunc(end);
        let insertion = findCommonInsertion(full0, partial0, full1, partial1);
        let separator = extendedSettings.separator || betterDefaultSeparator || context.defaultSeparator || '';
        if (insertion) return insertion.before + partial0 + separator + partial1 + insertion.after;
        return full0 + separator + full1;
    }
    getSmallestUnit() {
        switch(this.smallestUnitNum){
            case 7:
            case 6:
            case 5:
                return 'year';
            case 4:
                return 'month';
            case 3:
                return 'week';
            case 2:
                return 'day';
            default:
                return 'time'; // really?
        }
    }
}
function buildFormattingFunc(standardDateProps, extendedSettings, context) {
    let standardDatePropCnt = Object.keys(standardDateProps).length;
    if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') return (date)=>formatTimeZoneOffset(date.timeZoneOffset);
    if (standardDatePropCnt === 0 && extendedSettings.week) return (date)=>formatWeekNumber(context.computeWeekNumber(date.marker), context.weekText, context.weekTextLong, context.locale, extendedSettings.week);
    return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
}
function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
    standardDateProps = Object.assign({}, standardDateProps); // copy
    extendedSettings = Object.assign({}, extendedSettings); // copy
    sanitizeSettings(standardDateProps, extendedSettings);
    standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers
    let normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
    let zeroFormat; // needed?
    if (extendedSettings.omitZeroMinute) {
        let zeroProps = Object.assign({}, standardDateProps);
        delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings
        zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
    }
    return (date)=>{
        let { marker } = date;
        let format;
        if (zeroFormat && !marker.getUTCMinutes()) format = zeroFormat;
        else format = normalFormat;
        let s = format.format(marker);
        return postProcess(s, date, standardDateProps, extendedSettings, context);
    };
}
function sanitizeSettings(standardDateProps, extendedSettings) {
    // deal with a browser inconsistency where formatting the timezone
    // requires that the hour/minute be present.
    if (standardDateProps.timeZoneName) {
        if (!standardDateProps.hour) standardDateProps.hour = '2-digit';
        if (!standardDateProps.minute) standardDateProps.minute = '2-digit';
    }
    // only support short timezone names
    if (standardDateProps.timeZoneName === 'long') standardDateProps.timeZoneName = 'short';
    // if requesting to display seconds, MUST display minutes
    if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) delete extendedSettings.omitZeroMinute;
}
function postProcess(s, date, standardDateProps, extendedSettings, context) {
    s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes
    if (standardDateProps.timeZoneName === 'short') s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : formatTimeZoneOffset(date.timeZoneOffset));
    if (extendedSettings.omitCommas) s = s.replace(COMMA_RE, '').trim();
    if (extendedSettings.omitZeroMinute) s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
    // ^ do anything that might create adjacent spaces before this point,
    // because MERIDIEM_RE likes to eat up loading spaces
    if (extendedSettings.meridiem === false) s = s.replace(MERIDIEM_RE, '').trim();
    else if (extendedSettings.meridiem === 'narrow') s = s.replace(MERIDIEM_RE, (m0, m1)=>m1.toLocaleLowerCase());
    else if (extendedSettings.meridiem === 'short') s = s.replace(MERIDIEM_RE, (m0, m1)=>`${m1.toLocaleLowerCase()}m`);
    else if (extendedSettings.meridiem === 'lowercase') s = s.replace(MERIDIEM_RE, (m0)=>m0.toLocaleLowerCase());
    s = s.replace(MULTI_SPACE_RE, ' ');
    s = s.trim();
    return s;
}
function injectTzoStr(s, tzoStr) {
    let replaced = false;
    s = s.replace(UTC_RE, ()=>{
        replaced = true;
        return tzoStr;
    });
    // IE11 doesn't include UTC/GMT in the original string, so append to end
    if (!replaced) s += ` ${tzoStr}`;
    return s;
}
function formatWeekNumber(num, weekText, weekTextLong, locale, display) {
    let parts = [];
    if (display === 'long') parts.push(weekTextLong);
    else if (display === 'short' || display === 'narrow') parts.push(weekText);
    if (display === 'long' || display === 'short') parts.push(' ');
    parts.push(locale.simpleNumberFormat.format(num));
    if (locale.options.direction === 'rtl') parts.reverse();
    return parts.join('');
}
// Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger
function computeMarkerDiffSeverity(d0, d1, ca) {
    if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) return 5;
    if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) return 4;
    if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) return 2;
    if (timeAsMs(d0) !== timeAsMs(d1)) return 1;
    return 0;
}
function computePartialFormattingOptions(options, biggestUnit) {
    let partialOptions = {};
    for(let name in options)if (!(name in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
    STANDARD_DATE_PROP_SEVERITIES[name] <= biggestUnit) partialOptions[name] = options[name];
    return partialOptions;
}
function findCommonInsertion(full0, partial0, full1, partial1) {
    let i0 = 0;
    while(i0 < full0.length){
        let found0 = full0.indexOf(partial0, i0);
        if (found0 === -1) break;
        let before0 = full0.substr(0, found0);
        i0 = found0 + partial0.length;
        let after0 = full0.substr(i0);
        let i1 = 0;
        while(i1 < full1.length){
            let found1 = full1.indexOf(partial1, i1);
            if (found1 === -1) break;
            let before1 = full1.substr(0, found1);
            i1 = found1 + partial1.length;
            let after1 = full1.substr(i1);
            if (before0 === before1 && after0 === after1) return {
                before: before0,
                after: after0
            };
        }
    }
    return null;
}
function expandZonedMarker(dateInfo, calendarSystem) {
    let a = calendarSystem.markerToArray(dateInfo.marker);
    return {
        marker: dateInfo.marker,
        timeZoneOffset: dateInfo.timeZoneOffset,
        array: a,
        year: a[0],
        month: a[1],
        day: a[2],
        hour: a[3],
        minute: a[4],
        second: a[5],
        millisecond: a[6]
    };
}
function createVerboseFormattingArg(start, end, context, betterDefaultSeparator) {
    let startInfo = expandZonedMarker(start, context.calendarSystem);
    let endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
    return {
        date: startInfo,
        start: startInfo,
        end: endInfo,
        timeZone: context.timeZone,
        localeCodes: context.locale.codes,
        defaultSeparator: betterDefaultSeparator || context.defaultSeparator
    };
}
/*
TODO: fix the terminology of "formatter" vs "formatting func"
*/ /*
At the time of instantiation, this object does not know which cmd-formatting system it will use.
It receives this at the time of formatting, as a setting.
*/ class CmdFormatter {
    constructor(cmdStr){
        this.cmdStr = cmdStr;
    }
    format(date, context, betterDefaultSeparator) {
        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, betterDefaultSeparator));
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, betterDefaultSeparator));
    }
}
class FuncFormatter {
    constructor(func){
        this.func = func;
    }
    format(date, context, betterDefaultSeparator) {
        return this.func(createVerboseFormattingArg(date, null, context, betterDefaultSeparator));
    }
    formatRange(start, end, context, betterDefaultSeparator) {
        return this.func(createVerboseFormattingArg(start, end, context, betterDefaultSeparator));
    }
}
function createFormatter(input) {
    if (typeof input === 'object' && input) return new NativeFormatter(input);
    if (typeof input === 'string') return new CmdFormatter(input);
    if (typeof input === 'function') return new FuncFormatter(input);
    return null;
}
// base options
// ------------
const BASE_OPTION_REFINERS = {
    navLinkDayClick: identity,
    navLinkWeekClick: identity,
    duration: createDuration,
    bootstrapFontAwesome: identity,
    buttonIcons: identity,
    customButtons: identity,
    defaultAllDayEventDuration: createDuration,
    defaultTimedEventDuration: createDuration,
    nextDayThreshold: createDuration,
    scrollTime: createDuration,
    scrollTimeReset: Boolean,
    slotMinTime: createDuration,
    slotMaxTime: createDuration,
    dayPopoverFormat: createFormatter,
    slotDuration: createDuration,
    snapDuration: createDuration,
    headerToolbar: identity,
    footerToolbar: identity,
    defaultRangeSeparator: String,
    titleRangeSeparator: String,
    forceEventDuration: Boolean,
    dayHeaders: Boolean,
    dayHeaderFormat: createFormatter,
    dayHeaderClassNames: identity,
    dayHeaderContent: identity,
    dayHeaderDidMount: identity,
    dayHeaderWillUnmount: identity,
    dayCellClassNames: identity,
    dayCellContent: identity,
    dayCellDidMount: identity,
    dayCellWillUnmount: identity,
    initialView: String,
    aspectRatio: Number,
    weekends: Boolean,
    weekNumberCalculation: identity,
    weekNumbers: Boolean,
    weekNumberClassNames: identity,
    weekNumberContent: identity,
    weekNumberDidMount: identity,
    weekNumberWillUnmount: identity,
    editable: Boolean,
    viewClassNames: identity,
    viewDidMount: identity,
    viewWillUnmount: identity,
    nowIndicator: Boolean,
    nowIndicatorClassNames: identity,
    nowIndicatorContent: identity,
    nowIndicatorDidMount: identity,
    nowIndicatorWillUnmount: identity,
    showNonCurrentDates: Boolean,
    lazyFetching: Boolean,
    startParam: String,
    endParam: String,
    timeZoneParam: String,
    timeZone: String,
    locales: identity,
    locale: identity,
    themeSystem: String,
    dragRevertDuration: Number,
    dragScroll: Boolean,
    allDayMaintainDuration: Boolean,
    unselectAuto: Boolean,
    dropAccept: identity,
    eventOrder: parseFieldSpecs,
    eventOrderStrict: Boolean,
    handleWindowResize: Boolean,
    windowResizeDelay: Number,
    longPressDelay: Number,
    eventDragMinDistance: Number,
    expandRows: Boolean,
    height: identity,
    contentHeight: identity,
    direction: String,
    weekNumberFormat: createFormatter,
    eventResizableFromStart: Boolean,
    displayEventTime: Boolean,
    displayEventEnd: Boolean,
    weekText: String,
    weekTextLong: String,
    progressiveEventRendering: Boolean,
    businessHours: identity,
    initialDate: identity,
    now: identity,
    eventDataTransform: identity,
    stickyHeaderDates: identity,
    stickyFooterScrollbar: identity,
    viewHeight: identity,
    defaultAllDay: Boolean,
    eventSourceFailure: identity,
    eventSourceSuccess: identity,
    eventDisplay: String,
    eventStartEditable: Boolean,
    eventDurationEditable: Boolean,
    eventOverlap: identity,
    eventConstraint: identity,
    eventAllow: identity,
    eventBackgroundColor: String,
    eventBorderColor: String,
    eventTextColor: String,
    eventColor: String,
    eventClassNames: identity,
    eventContent: identity,
    eventDidMount: identity,
    eventWillUnmount: identity,
    selectConstraint: identity,
    selectOverlap: identity,
    selectAllow: identity,
    droppable: Boolean,
    unselectCancel: String,
    slotLabelFormat: identity,
    slotLaneClassNames: identity,
    slotLaneContent: identity,
    slotLaneDidMount: identity,
    slotLaneWillUnmount: identity,
    slotLabelClassNames: identity,
    slotLabelContent: identity,
    slotLabelDidMount: identity,
    slotLabelWillUnmount: identity,
    dayMaxEvents: identity,
    dayMaxEventRows: identity,
    dayMinWidth: Number,
    slotLabelInterval: createDuration,
    allDayText: String,
    allDayClassNames: identity,
    allDayContent: identity,
    allDayDidMount: identity,
    allDayWillUnmount: identity,
    slotMinWidth: Number,
    navLinks: Boolean,
    eventTimeFormat: createFormatter,
    rerenderDelay: Number,
    moreLinkText: identity,
    moreLinkHint: identity,
    selectMinDistance: Number,
    selectable: Boolean,
    selectLongPressDelay: Number,
    eventLongPressDelay: Number,
    selectMirror: Boolean,
    eventMaxStack: Number,
    eventMinHeight: Number,
    eventMinWidth: Number,
    eventShortHeight: Number,
    slotEventOverlap: Boolean,
    plugins: identity,
    firstDay: Number,
    dayCount: Number,
    dateAlignment: String,
    dateIncrement: createDuration,
    hiddenDays: identity,
    fixedWeekCount: Boolean,
    validRange: identity,
    visibleRange: identity,
    titleFormat: identity,
    eventInteractive: Boolean,
    // only used by list-view, but languages define the value, so we need it in base options
    noEventsText: String,
    viewHint: identity,
    navLinkHint: identity,
    closeHint: String,
    timeHint: String,
    eventHint: String,
    moreLinkClick: identity,
    moreLinkClassNames: identity,
    moreLinkContent: identity,
    moreLinkDidMount: identity,
    moreLinkWillUnmount: identity,
    monthStartFormat: createFormatter,
    // for connectors
    // (can't be part of plugin system b/c must be provided at runtime)
    handleCustomRendering: identity,
    customRenderingMetaMap: identity,
    customRenderingReplaces: Boolean
};
// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.
// raw values.
const BASE_OPTION_DEFAULTS = {
    eventDisplay: 'auto',
    defaultRangeSeparator: ' - ',
    titleRangeSeparator: ' \u2013 ',
    defaultTimedEventDuration: '01:00:00',
    defaultAllDayEventDuration: {
        day: 1
    },
    forceEventDuration: false,
    nextDayThreshold: '00:00:00',
    dayHeaders: true,
    initialView: '',
    aspectRatio: 1.35,
    headerToolbar: {
        start: 'title',
        center: '',
        end: 'today prev,next'
    },
    weekends: true,
    weekNumbers: false,
    weekNumberCalculation: 'local',
    editable: false,
    nowIndicator: false,
    scrollTime: '06:00:00',
    scrollTimeReset: true,
    slotMinTime: '00:00:00',
    slotMaxTime: '24:00:00',
    showNonCurrentDates: true,
    lazyFetching: true,
    startParam: 'start',
    endParam: 'end',
    timeZoneParam: 'timeZone',
    timeZone: 'local',
    locales: [],
    locale: '',
    themeSystem: 'standard',
    dragRevertDuration: 500,
    dragScroll: true,
    allDayMaintainDuration: false,
    unselectAuto: true,
    dropAccept: '*',
    eventOrder: 'start,-duration,allDay,title',
    dayPopoverFormat: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
    },
    handleWindowResize: true,
    windowResizeDelay: 100,
    longPressDelay: 1000,
    eventDragMinDistance: 5,
    expandRows: false,
    navLinks: false,
    selectable: false,
    eventMinHeight: 15,
    eventMinWidth: 30,
    eventShortHeight: 30,
    monthStartFormat: {
        month: 'long',
        day: 'numeric'
    }
};
// calendar listeners
// ------------------
const CALENDAR_LISTENER_REFINERS = {
    datesSet: identity,
    eventsSet: identity,
    eventAdd: identity,
    eventChange: identity,
    eventRemove: identity,
    windowResize: identity,
    eventClick: identity,
    eventMouseEnter: identity,
    eventMouseLeave: identity,
    select: identity,
    unselect: identity,
    loading: identity,
    // internal
    _unmount: identity,
    _beforeprint: identity,
    _afterprint: identity,
    _noEventDrop: identity,
    _noEventResize: identity,
    _resize: identity,
    _scrollRequest: identity
};
// calendar-specific options
// -------------------------
const CALENDAR_OPTION_REFINERS = {
    buttonText: identity,
    buttonHints: identity,
    views: identity,
    plugins: identity,
    initialEvents: identity,
    events: identity,
    eventSources: identity
};
const COMPLEX_OPTION_COMPARATORS = {
    headerToolbar: isMaybeObjectsEqual,
    footerToolbar: isMaybeObjectsEqual,
    buttonText: isMaybeObjectsEqual,
    buttonHints: isMaybeObjectsEqual,
    buttonIcons: isMaybeObjectsEqual,
    dateIncrement: isMaybeObjectsEqual,
    plugins: isMaybeArraysEqual,
    events: isMaybeArraysEqual,
    eventSources: isMaybeArraysEqual,
    ['resources']: isMaybeArraysEqual
};
function isMaybeObjectsEqual(a, b) {
    if (typeof a === 'object' && typeof b === 'object' && a && b) return isPropsEqual(a, b);
    return a === b;
}
function isMaybeArraysEqual(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) return isArraysEqual(a, b);
    return a === b;
}
// view-specific options
// ---------------------
const VIEW_OPTION_REFINERS = {
    type: String,
    component: identity,
    buttonText: String,
    buttonTextKey: String,
    dateProfileGeneratorClass: identity,
    usesMinMaxTime: Boolean,
    classNames: identity,
    content: identity,
    didMount: identity,
    willUnmount: identity
};
// util funcs
// ----------------------------------------------------------------------------------------------------
function mergeRawOptions(optionSets) {
    return mergeProps(optionSets, COMPLEX_OPTION_COMPARATORS);
}
function refineProps(input, refiners) {
    let refined = {};
    let extra = {};
    for(let propName in refiners)if (propName in input) refined[propName] = refiners[propName](input[propName]);
    for(let propName in input)if (!(propName in refiners)) extra[propName] = input[propName];
    return {
        refined,
        extra
    };
}
function identity(raw) {
    return raw;
}
const { hasOwnProperty } = Object.prototype;
// Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.
function mergeProps(propObjs, complexPropsMap) {
    let dest = {};
    if (complexPropsMap) {
        for(let name in complexPropsMap)if (complexPropsMap[name] === isMaybeObjectsEqual) {
            let complexObjs = [];
            // collect the trailing object values, stopping when a non-object is discovered
            for(let i = propObjs.length - 1; i >= 0; i -= 1){
                let val = propObjs[i][name];
                if (typeof val === 'object' && val) complexObjs.unshift(val);
                else if (val !== undefined) {
                    dest[name] = val; // if there were no objects, this value will be used
                    break;
                }
            }
            // if the trailing values were objects, use the merged value
            if (complexObjs.length) dest[name] = mergeProps(complexObjs);
        }
    }
    // copy values into the destination, going from last to first
    for(let i = propObjs.length - 1; i >= 0; i -= 1){
        let props = propObjs[i];
        for(let name in props)if (!(name in dest)) dest[name] = props[name];
    }
    return dest;
}
function filterHash(hash, func) {
    let filtered = {};
    for(let key in hash)if (func(hash[key], key)) filtered[key] = hash[key];
    return filtered;
}
function mapHash(hash, func) {
    let newHash = {};
    for(let key in hash)newHash[key] = func(hash[key], key);
    return newHash;
}
function arrayToHash(a) {
    let hash = {};
    for (let item of a)hash[item] = true;
    return hash;
}
// TODO: reassess browser support
// https://caniuse.com/?search=object.values
function hashValuesToArray(obj) {
    let a = [];
    for(let key in obj)a.push(obj[key]);
    return a;
}
function isPropsEqual(obj0, obj1) {
    if (obj0 === obj1) return true;
    for(let key in obj0)if (hasOwnProperty.call(obj0, key)) {
        if (!(key in obj1)) return false;
    }
    for(let key in obj1)if (hasOwnProperty.call(obj1, key)) {
        if (obj0[key] !== obj1[key]) return false;
    }
    return true;
}
const HANDLER_RE = /^on[A-Z]/;
function isNonHandlerPropsEqual(obj0, obj1) {
    const keys = getUnequalProps(obj0, obj1);
    for (let key of keys){
        if (!HANDLER_RE.test(key)) return false;
    }
    return true;
}
function getUnequalProps(obj0, obj1) {
    let keys = [];
    for(let key in obj0){
        if (hasOwnProperty.call(obj0, key)) {
            if (!(key in obj1)) keys.push(key);
        }
    }
    for(let key in obj1){
        if (hasOwnProperty.call(obj1, key)) {
            if (obj0[key] !== obj1[key]) keys.push(key);
        }
    }
    return keys;
}
function compareObjs(oldProps, newProps, equalityFuncs = {}) {
    if (oldProps === newProps) return true;
    // if (debug) {
    //   for (let key in newProps) {
    //     if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) {
    //       // equal
    //     } else {
    //       if (debug) {
    //         console.log('prop difference', key, oldProps[key], newProps[key])
    //       }
    //     }
    //   }
    //   // check for props that were omitted in the new
    //   for (let key in oldProps) {
    //     if (!(key in newProps)) {
    //       if (debug) {
    //         console.log('prop absent', key)
    //       }
    //     }
    //   }
    // }
    for(let key in newProps){
        if (key in oldProps && isObjValsEqual(oldProps[key], newProps[key], equalityFuncs[key])) ;
        else return false;
    }
    // check for props that were omitted in the new
    for(let key in oldProps){
        if (!(key in newProps)) return false;
    }
    return true;
}
/*
assumed "true" equality for handler names like "onReceiveSomething"
*/ function isObjValsEqual(val0, val1, comparator) {
    if (val0 === val1 || comparator === true) return true;
    if (comparator) return comparator(val0, val1);
    return false;
}
function collectFromHash(hash, startIndex = 0, endIndex, step = 1) {
    let res = [];
    if (endIndex == null) endIndex = Object.keys(hash).length;
    for(let i = startIndex; i < endIndex; i += step){
        let val = hash[i];
        if (val !== undefined) res.push(val);
    }
    return res;
}
let calendarSystemClassMap = {};
function registerCalendarSystem(name, theClass) {
    calendarSystemClassMap[name] = theClass;
}
function createCalendarSystem(name) {
    return new calendarSystemClassMap[name]();
}
class GregorianCalendarSystem {
    getMarkerYear(d) {
        return d.getUTCFullYear();
    }
    getMarkerMonth(d) {
        return d.getUTCMonth();
    }
    getMarkerDay(d) {
        return d.getUTCDate();
    }
    arrayToMarker(arr) {
        return arrayToUtcDate(arr);
    }
    markerToArray(marker) {
        return dateToUtcArray(marker);
    }
}
registerCalendarSystem('gregory', GregorianCalendarSystem);
const ISO_RE = /^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;
function parse(str) {
    let m = ISO_RE.exec(str);
    if (m) {
        let marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number(`0.${m[12]}`) * 1000 : 0));
        if (isValidDate(marker)) {
            let timeZoneOffset = null;
            if (m[13]) timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
            return {
                marker,
                isTimeUnspecified: !m[6],
                timeZoneOffset
            };
        }
    }
    return null;
}
class DateEnv {
    constructor(settings){
        let timeZone = this.timeZone = settings.timeZone;
        let isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';
        if (settings.namedTimeZoneImpl && isNamedTimeZone) this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
        this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
        this.calendarSystem = createCalendarSystem(settings.calendarSystem);
        this.locale = settings.locale;
        this.weekDow = settings.locale.week.dow;
        this.weekDoy = settings.locale.week.doy;
        if (settings.weekNumberCalculation === 'ISO') {
            this.weekDow = 1;
            this.weekDoy = 4;
        }
        if (typeof settings.firstDay === 'number') this.weekDow = settings.firstDay;
        if (typeof settings.weekNumberCalculation === 'function') this.weekNumberFunc = settings.weekNumberCalculation;
        this.weekText = settings.weekText != null ? settings.weekText : settings.locale.options.weekText;
        this.weekTextLong = (settings.weekTextLong != null ? settings.weekTextLong : settings.locale.options.weekTextLong) || this.weekText;
        this.cmdFormatter = settings.cmdFormatter;
        this.defaultSeparator = settings.defaultSeparator;
    }
    // Creating / Parsing
    createMarker(input) {
        let meta = this.createMarkerMeta(input);
        if (meta === null) return null;
        return meta.marker;
    }
    createNowMarker() {
        if (this.canComputeOffset) return this.timestampToMarker(new Date().valueOf());
        // if we can't compute the current date val for a timezone,
        // better to give the current local date vals than UTC
        return arrayToUtcDate(dateToLocalArray(new Date()));
    }
    createMarkerMeta(input) {
        if (typeof input === 'string') return this.parse(input);
        let marker = null;
        if (typeof input === 'number') marker = this.timestampToMarker(input);
        else if (input instanceof Date) {
            input = input.valueOf();
            if (!isNaN(input)) marker = this.timestampToMarker(input);
        } else if (Array.isArray(input)) marker = arrayToUtcDate(input);
        if (marker === null || !isValidDate(marker)) return null;
        return {
            marker,
            isTimeUnspecified: false,
            forcedTzo: null
        };
    }
    parse(s) {
        let parts = parse(s);
        if (parts === null) return null;
        let { marker } = parts;
        let forcedTzo = null;
        if (parts.timeZoneOffset !== null) {
            if (this.canComputeOffset) marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60000);
            else forcedTzo = parts.timeZoneOffset;
        }
        return {
            marker,
            isTimeUnspecified: parts.isTimeUnspecified,
            forcedTzo
        };
    }
    // Accessors
    getYear(marker) {
        return this.calendarSystem.getMarkerYear(marker);
    }
    getMonth(marker) {
        return this.calendarSystem.getMarkerMonth(marker);
    }
    getDay(marker) {
        return this.calendarSystem.getMarkerDay(marker);
    }
    // Adding / Subtracting
    add(marker, dur) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] += dur.years;
        a[1] += dur.months;
        a[2] += dur.days;
        a[6] += dur.milliseconds;
        return this.calendarSystem.arrayToMarker(a);
    }
    subtract(marker, dur) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] -= dur.years;
        a[1] -= dur.months;
        a[2] -= dur.days;
        a[6] -= dur.milliseconds;
        return this.calendarSystem.arrayToMarker(a);
    }
    addYears(marker, n) {
        let a = this.calendarSystem.markerToArray(marker);
        a[0] += n;
        return this.calendarSystem.arrayToMarker(a);
    }
    addMonths(marker, n) {
        let a = this.calendarSystem.markerToArray(marker);
        a[1] += n;
        return this.calendarSystem.arrayToMarker(a);
    }
    // Diffing Whole Units
    diffWholeYears(m0, m1) {
        let { calendarSystem } = this;
        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
        return null;
    }
    diffWholeMonths(m0, m1) {
        let { calendarSystem } = this;
        if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
        return null;
    }
    // Range / Duration
    greatestWholeUnit(m0, m1) {
        let n = this.diffWholeYears(m0, m1);
        if (n !== null) return {
            unit: 'year',
            value: n
        };
        n = this.diffWholeMonths(m0, m1);
        if (n !== null) return {
            unit: 'month',
            value: n
        };
        n = diffWholeWeeks(m0, m1);
        if (n !== null) return {
            unit: 'week',
            value: n
        };
        n = diffWholeDays(m0, m1);
        if (n !== null) return {
            unit: 'day',
            value: n
        };
        n = diffHours(m0, m1);
        if (isInt(n)) return {
            unit: 'hour',
            value: n
        };
        n = diffMinutes(m0, m1);
        if (isInt(n)) return {
            unit: 'minute',
            value: n
        };
        n = diffSeconds(m0, m1);
        if (isInt(n)) return {
            unit: 'second',
            value: n
        };
        return {
            unit: 'millisecond',
            value: m1.valueOf() - m0.valueOf()
        };
    }
    countDurationsBetween(m0, m1, d) {
        // TODO: can use greatestWholeUnit
        let diff;
        if (d.years) {
            diff = this.diffWholeYears(m0, m1);
            if (diff !== null) return diff / asRoughYears(d);
        }
        if (d.months) {
            diff = this.diffWholeMonths(m0, m1);
            if (diff !== null) return diff / asRoughMonths(d);
        }
        if (d.days) {
            diff = diffWholeDays(m0, m1);
            if (diff !== null) return diff / asRoughDays(d);
        }
        return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
    }
    // Start-Of
    // these DON'T return zoned-dates. only UTC start-of dates
    startOf(m, unit) {
        if (unit === 'year') return this.startOfYear(m);
        if (unit === 'month') return this.startOfMonth(m);
        if (unit === 'week') return this.startOfWeek(m);
        if (unit === 'day') return startOfDay(m);
        if (unit === 'hour') return startOfHour(m);
        if (unit === 'minute') return startOfMinute(m);
        if (unit === 'second') return startOfSecond(m);
        return null;
    }
    startOfYear(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m)
        ]);
    }
    startOfMonth(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m),
            this.calendarSystem.getMarkerMonth(m)
        ]);
    }
    startOfWeek(m) {
        return this.calendarSystem.arrayToMarker([
            this.calendarSystem.getMarkerYear(m),
            this.calendarSystem.getMarkerMonth(m),
            m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7
        ]);
    }
    // Week Number
    computeWeekNumber(marker) {
        if (this.weekNumberFunc) return this.weekNumberFunc(this.toDate(marker));
        return weekOfYear(marker, this.weekDow, this.weekDoy);
    }
    // TODO: choke on timeZoneName: long
    format(marker, formatter, dateOptions = {}) {
        return formatter.format({
            marker,
            timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
        }, this);
    }
    formatRange(start, end, formatter, dateOptions = {}) {
        if (dateOptions.isEndExclusive) end = addMs(end, -1);
        return formatter.formatRange({
            marker: start,
            timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
        }, {
            marker: end,
            timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
        }, this, dateOptions.defaultSeparator);
    }
    /*
    DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,
    might as well use buildIsoString or some other util directly
    */ formatIso(marker, extraOptions = {}) {
        let timeZoneOffset = null;
        if (!extraOptions.omitTimeZoneOffset) {
            if (extraOptions.forcedTzo != null) timeZoneOffset = extraOptions.forcedTzo;
            else timeZoneOffset = this.offsetForMarker(marker);
        }
        return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
    }
    // TimeZone
    timestampToMarker(ms) {
        if (this.timeZone === 'local') return arrayToUtcDate(dateToLocalArray(new Date(ms)));
        if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) return new Date(ms);
        return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
    }
    offsetForMarker(m) {
        if (this.timeZone === 'local') return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
        if (this.timeZone === 'UTC') return 0;
        if (this.namedTimeZoneImpl) return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
        return null;
    }
    // Conversion
    toDate(m, forcedTzo) {
        if (this.timeZone === 'local') return arrayToLocalDate(dateToUtcArray(m));
        if (this.timeZone === 'UTC') return new Date(m.valueOf()); // make sure it's a copy
        if (!this.namedTimeZoneImpl) return new Date(m.valueOf() - (forcedTzo || 0));
        return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 60000);
    }
}
class Theme {
    constructor(calendarOptions){
        if (this.iconOverrideOption) this.setIconOverride(calendarOptions[this.iconOverrideOption]);
    }
    setIconOverride(iconOverrideHash) {
        let iconClassesCopy;
        let buttonName;
        if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
            iconClassesCopy = Object.assign({}, this.iconClasses);
            for(buttonName in iconOverrideHash)iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
            this.iconClasses = iconClassesCopy;
        } else if (iconOverrideHash === false) this.iconClasses = {};
    }
    applyIconOverridePrefix(className) {
        let prefix = this.iconOverridePrefix;
        if (prefix && className.indexOf(prefix) !== 0) className = prefix + className;
        return className;
    }
    getClass(key) {
        return this.classes[key] || '';
    }
    getIconClass(buttonName, isRtl) {
        let className;
        if (isRtl && this.rtlIconClasses) className = this.rtlIconClasses[buttonName] || this.iconClasses[buttonName];
        else className = this.iconClasses[buttonName];
        if (className) return `${this.baseIconClass} ${className}`;
        return '';
    }
    getCustomButtonIconClass(customButtonProps) {
        let className;
        if (this.iconOverrideCustomButtonOption) {
            className = customButtonProps[this.iconOverrideCustomButtonOption];
            if (className) return `${this.baseIconClass} ${this.applyIconOverridePrefix(className)}`;
        }
        return '';
    }
}
Theme.prototype.classes = {};
Theme.prototype.iconClasses = {};
Theme.prototype.baseIconClass = '';
Theme.prototype.iconOverridePrefix = '';
/*
NOTE: this can be a public API, especially createElement for hooks.
See examples/typescript-scheduler/src/index.ts
*/ function flushSync(runBeforeFlush) {
    runBeforeFlush();
    let oldDebounceRendering = _preact.options.debounceRendering; // orig
    let callbackQ = [];
    function execCallbackSync(callback) {
        callbackQ.push(callback);
    }
    _preact.options.debounceRendering = execCallbackSync;
    _preact.render(_preact.createElement(FakeComponent, {}), document.createElement('div'));
    while(callbackQ.length)callbackQ.shift()();
    _preact.options.debounceRendering = oldDebounceRendering;
}
class FakeComponent extends _preact.Component {
    render() {
        return _preact.createElement('div', {});
    }
    componentDidMount() {
        this.setState({});
    }
}
// TODO: use preact/compat instead?
function createContext(defaultValue) {
    let ContextType = _preact.createContext(defaultValue);
    let origProvider = ContextType.Provider;
    ContextType.Provider = function() {
        let isNew = !this.getChildContext;
        let children = origProvider.apply(this, arguments); // eslint-disable-line prefer-rest-params
        if (isNew) {
            let subs = [];
            this.shouldComponentUpdate = (_props)=>{
                if (this.props.value !== _props.value) subs.forEach((c)=>{
                    c.context = _props.value;
                    c.forceUpdate();
                });
            };
            this.sub = (c)=>{
                subs.push(c);
                let old = c.componentWillUnmount;
                c.componentWillUnmount = ()=>{
                    subs.splice(subs.indexOf(c), 1);
                    old && old.call(c);
                };
            };
        }
        return children;
    };
    return ContextType;
}
class ScrollResponder {
    constructor(execFunc, emitter, scrollTime, scrollTimeReset){
        this.execFunc = execFunc;
        this.emitter = emitter;
        this.scrollTime = scrollTime;
        this.scrollTimeReset = scrollTimeReset;
        this.handleScrollRequest = (request)=>{
            this.queuedRequest = Object.assign({}, this.queuedRequest || {}, request);
            this.drain();
        };
        emitter.on('_scrollRequest', this.handleScrollRequest);
        this.fireInitialScroll();
    }
    detach() {
        this.emitter.off('_scrollRequest', this.handleScrollRequest);
    }
    update(isDatesNew) {
        if (isDatesNew && this.scrollTimeReset) this.fireInitialScroll(); // will drain
        else this.drain();
    }
    fireInitialScroll() {
        this.handleScrollRequest({
            time: this.scrollTime
        });
    }
    drain() {
        if (this.queuedRequest && this.execFunc(this.queuedRequest)) this.queuedRequest = null;
    }
}
const ViewContextType = createContext({}); // for Components
function buildViewContext(viewSpec, viewApi, viewOptions, dateProfileGenerator, dateEnv, nowManager, theme, pluginHooks, dispatch, getCurrentData, emitter, calendarApi, registerInteractiveComponent, unregisterInteractiveComponent) {
    return {
        dateEnv,
        nowManager,
        options: viewOptions,
        pluginHooks,
        emitter,
        dispatch,
        getCurrentData,
        calendarApi,
        viewSpec,
        viewApi,
        dateProfileGenerator,
        theme,
        isRtl: viewOptions.direction === 'rtl',
        addResizeHandler (handler) {
            emitter.on('_resize', handler);
        },
        removeResizeHandler (handler) {
            emitter.off('_resize', handler);
        },
        createScrollResponder (execFunc) {
            return new ScrollResponder(execFunc, emitter, createDuration(viewOptions.scrollTime), viewOptions.scrollTimeReset);
        },
        registerInteractiveComponent,
        unregisterInteractiveComponent
    };
}
/* eslint max-classes-per-file: off */ class PureComponent extends (0, _preact.Component) {
    // debug: boolean
    shouldComponentUpdate(nextProps, nextState) {
        const shouldUpdate = !compareObjs(this.props, nextProps, this.propEquality /*, this.debug */ ) || !compareObjs(this.state, nextState, this.stateEquality /*, this.debug */ );
        // if (this.debug && shouldUpdate) {
        //   console.log('shouldUpdate!')
        // }
        return shouldUpdate;
    }
    // HACK for freakin' React StrictMode
    safeSetState(newState) {
        if (!compareObjs(this.state, Object.assign(Object.assign({}, this.state), newState), this.stateEquality)) this.setState(newState);
    }
}
PureComponent.addPropsEquality = addPropsEquality;
PureComponent.addStateEquality = addStateEquality;
PureComponent.contextType = ViewContextType;
PureComponent.prototype.propEquality = {};
PureComponent.prototype.stateEquality = {};
class BaseComponent extends PureComponent {
}
BaseComponent.contextType = ViewContextType;
function addPropsEquality(propEquality) {
    let hash = Object.create(this.prototype.propEquality);
    Object.assign(hash, propEquality);
    this.prototype.propEquality = hash;
}
function addStateEquality(stateEquality) {
    let hash = Object.create(this.prototype.stateEquality);
    Object.assign(hash, stateEquality);
    this.prototype.stateEquality = hash;
}
// use other one
function setRef(ref, current) {
    if (typeof ref === 'function') ref(current);
    else if (ref) // see https://github.com/facebook/react/issues/13029
    ref.current = current;
}
class ContentInjector extends BaseComponent {
    constructor(){
        super(...arguments);
        this.id = guid();
        this.queuedDomNodes = [];
        this.currentDomNodes = [];
        this.handleEl = (el)=>{
            const { options } = this.context;
            const { generatorName } = this.props;
            if (!options.customRenderingReplaces || !hasCustomRenderingHandler(generatorName, options)) this.updateElRef(el);
        };
        this.updateElRef = (el)=>{
            if (this.props.elRef) setRef(this.props.elRef, el);
        };
    }
    render() {
        const { props, context } = this;
        const { options } = context;
        const { customGenerator, defaultGenerator, renderProps } = props;
        const attrs = buildElAttrs(props, [], this.handleEl);
        let useDefault = false;
        let innerContent;
        let queuedDomNodes = [];
        let currentGeneratorMeta;
        if (customGenerator != null) {
            const customGeneratorRes = typeof customGenerator === 'function' ? customGenerator(renderProps, (0, _preact.createElement)) : customGenerator;
            if (customGeneratorRes === true) useDefault = true;
            else {
                const isObject = customGeneratorRes && typeof customGeneratorRes === 'object'; // non-null
                if (isObject && 'html' in customGeneratorRes) attrs.dangerouslySetInnerHTML = {
                    __html: customGeneratorRes.html
                };
                else if (isObject && 'domNodes' in customGeneratorRes) queuedDomNodes = Array.prototype.slice.call(customGeneratorRes.domNodes);
                else if (isObject ? (0, _preact.isValidElement)(customGeneratorRes) // vdom node
                 : typeof customGeneratorRes !== 'function' // primitive value (like string or number)
                ) // use in vdom
                innerContent = customGeneratorRes;
                else // an exotic object for handleCustomRendering
                currentGeneratorMeta = customGeneratorRes;
            }
        } else useDefault = !hasCustomRenderingHandler(props.generatorName, options);
        if (useDefault && defaultGenerator) innerContent = defaultGenerator(renderProps);
        this.queuedDomNodes = queuedDomNodes;
        this.currentGeneratorMeta = currentGeneratorMeta;
        return (0, _preact.createElement)(props.elTag, attrs, innerContent);
    }
    componentDidMount() {
        this.applyQueueudDomNodes();
        this.triggerCustomRendering(true);
    }
    componentDidUpdate() {
        this.applyQueueudDomNodes();
        this.triggerCustomRendering(true);
    }
    componentWillUnmount() {
        this.triggerCustomRendering(false); // TODO: different API for removal?
    }
    triggerCustomRendering(isActive) {
        var _a;
        const { props, context } = this;
        const { handleCustomRendering, customRenderingMetaMap } = context.options;
        if (handleCustomRendering) {
            const generatorMeta = (_a = this.currentGeneratorMeta) !== null && _a !== void 0 ? _a : customRenderingMetaMap === null || customRenderingMetaMap === void 0 ? void 0 : customRenderingMetaMap[props.generatorName];
            if (generatorMeta) handleCustomRendering(Object.assign(Object.assign({
                id: this.id,
                isActive,
                containerEl: this.base,
                reportNewContainerEl: this.updateElRef,
                generatorMeta
            }, props), {
                elClasses: (props.elClasses || []).filter(isTruthy)
            }));
        }
    }
    applyQueueudDomNodes() {
        const { queuedDomNodes, currentDomNodes } = this;
        const el = this.base;
        if (!isArraysEqual(queuedDomNodes, currentDomNodes)) {
            currentDomNodes.forEach(removeElement);
            for (let newNode of queuedDomNodes)el.appendChild(newNode);
            this.currentDomNodes = queuedDomNodes;
        }
    }
}
ContentInjector.addPropsEquality({
    elClasses: isArraysEqual,
    elStyle: isPropsEqual,
    elAttrs: isNonHandlerPropsEqual,
    renderProps: isPropsEqual
});
// Util
/*
Does UI-framework provide custom way of rendering that does not use Preact VDOM
AND does the calendar's options define custom rendering?
AKA. Should we NOT render the default content?
*/ function hasCustomRenderingHandler(generatorName, options) {
    var _a;
    return Boolean(options.handleCustomRendering && generatorName && ((_a = options.customRenderingMetaMap) === null || _a === void 0 ? void 0 : _a[generatorName]));
}
function buildElAttrs(props, extraClassNames, elRef) {
    const attrs = Object.assign(Object.assign({}, props.elAttrs), {
        ref: elRef
    });
    if (props.elClasses || extraClassNames) attrs.className = (props.elClasses || []).concat(extraClassNames || []).concat(attrs.className || []).filter(Boolean).join(' ');
    if (props.elStyle) attrs.style = props.elStyle;
    return attrs;
}
function isTruthy(val) {
    return Boolean(val);
}
const RenderId = createContext(0);
class ContentContainer extends (0, _preact.Component) {
    constructor(){
        super(...arguments);
        this.InnerContent = InnerContentInjector.bind(undefined, this);
        this.handleEl = (el)=>{
            this.el = el;
            if (this.props.elRef) {
                setRef(this.props.elRef, el);
                if (el && this.didMountMisfire) this.componentDidMount();
            }
        };
    }
    render() {
        const { props } = this;
        const generatedClassNames = generateClassNames(props.classNameGenerator, props.renderProps);
        if (props.children) {
            const elAttrs = buildElAttrs(props, generatedClassNames, this.handleEl);
            const children = props.children(this.InnerContent, props.renderProps, elAttrs);
            if (props.elTag) return (0, _preact.createElement)(props.elTag, elAttrs, children);
            else return children;
        } else return (0, _preact.createElement)(ContentInjector, Object.assign(Object.assign({}, props), {
            elRef: this.handleEl,
            elTag: props.elTag || 'div',
            elClasses: (props.elClasses || []).concat(generatedClassNames),
            renderId: this.context
        }));
    }
    componentDidMount() {
        var _a, _b;
        if (this.el) (_b = (_a = this.props).didMount) === null || _b === void 0 || _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {
            el: this.el
        }));
        else this.didMountMisfire = true;
    }
    componentWillUnmount() {
        var _a, _b;
        (_b = (_a = this.props).willUnmount) === null || _b === void 0 || _b.call(_a, Object.assign(Object.assign({}, this.props.renderProps), {
            el: this.el
        }));
    }
}
ContentContainer.contextType = RenderId;
function InnerContentInjector(containerComponent, props) {
    const parentProps = containerComponent.props;
    return (0, _preact.createElement)(ContentInjector, Object.assign({
        renderProps: parentProps.renderProps,
        generatorName: parentProps.generatorName,
        customGenerator: parentProps.customGenerator,
        defaultGenerator: parentProps.defaultGenerator,
        renderId: containerComponent.context
    }, props));
}
// Utils
function generateClassNames(classNameGenerator, renderProps) {
    const classNames = typeof classNameGenerator === 'function' ? classNameGenerator(renderProps) : classNameGenerator || [];
    return typeof classNames === 'string' ? [
        classNames
    ] : classNames;
}
class ViewContainer extends BaseComponent {
    render() {
        let { props, context } = this;
        let { options } = context;
        let renderProps = {
            view: context.viewApi
        };
        return (0, _preact.createElement)(ContentContainer, {
            elRef: props.elRef,
            elTag: props.elTag || 'div',
            elAttrs: props.elAttrs,
            elClasses: [
                ...buildViewClassNames(props.viewSpec),
                ...props.elClasses || []
            ],
            elStyle: props.elStyle,
            renderProps: renderProps,
            classNameGenerator: options.viewClassNames,
            generatorName: undefined,
            didMount: options.viewDidMount,
            willUnmount: options.viewWillUnmount
        }, ()=>props.children);
    }
}
function buildViewClassNames(viewSpec) {
    return [
        `fc-${viewSpec.type}-view`,
        'fc-view'
    ];
}
function parseRange(input, dateEnv) {
    let start = null;
    let end = null;
    if (input.start) start = dateEnv.createMarker(input.start);
    if (input.end) end = dateEnv.createMarker(input.end);
    if (!start && !end) return null;
    if (start && end && end < start) return null;
    return {
        start,
        end
    };
}
// SIDE-EFFECT: will mutate ranges.
// Will return a new array result.
function invertRanges(ranges, constraintRange) {
    let invertedRanges = [];
    let { start } = constraintRange; // the end of the previous range. the start of the new range
    let i;
    let dateRange;
    // ranges need to be in order. required for our date-walking algorithm
    ranges.sort(compareRanges);
    for(i = 0; i < ranges.length; i += 1){
        dateRange = ranges[i];
        // add the span of time before the event (if there is any)
        if (dateRange.start > start) invertedRanges.push({
            start,
            end: dateRange.start
        });
        if (dateRange.end > start) start = dateRange.end;
    }
    // add the span of time after the last event (if there is any)
    if (start < constraintRange.end) invertedRanges.push({
        start,
        end: constraintRange.end
    });
    return invertedRanges;
}
function compareRanges(range0, range1) {
    return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
}
function intersectRanges(range0, range1) {
    let { start, end } = range0;
    let newRange = null;
    if (range1.start !== null) {
        if (start === null) start = range1.start;
        else start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
    }
    if (range1.end != null) {
        if (end === null) end = range1.end;
        else end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
    }
    if (start === null || end === null || start < end) newRange = {
        start,
        end
    };
    return newRange;
}
function rangesEqual(range0, range1) {
    return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
}
function rangesIntersect(range0, range1) {
    return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
}
function rangeContainsRange(outerRange, innerRange) {
    return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
}
function rangeContainsMarker(range, date) {
    return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
}
// If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).
function constrainMarkerToRange(date, range) {
    if (range.start != null && date < range.start) return range.start;
    if (range.end != null && date >= range.end) return new Date(range.end.valueOf() - 1);
    return date;
}
/* Date stuff that doesn't belong in datelib core
----------------------------------------------------------------------------------------------------------------------*/ // given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.
function computeAlignedDayRange(timedRange) {
    let dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
    let start = startOfDay(timedRange.start);
    let end = addDays(start, dayCnt);
    return {
        start,
        end
    };
}
// given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg
function computeVisibleDayRange(timedRange, nextDayThreshold = createDuration(0)) {
    let startDay = null;
    let endDay = null;
    if (timedRange.end) {
        endDay = startOfDay(timedRange.end);
        let endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
        // If the end time is actually inclusively part of the next day and is equal to or
        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
        if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) endDay = addDays(endDay, 1);
    }
    if (timedRange.start) {
        startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.
        if (endDay && endDay <= startDay) endDay = addDays(startDay, 1);
    }
    return {
        start: startDay,
        end: endDay
    };
}
// spans from one day into another?
function isMultiDayRange(range) {
    let visibleRange = computeVisibleDayRange(range);
    return diffDays(visibleRange.start, visibleRange.end) > 1;
}
function diffDates(date0, date1, dateEnv, largeUnit) {
    if (largeUnit === 'year') return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
    if (largeUnit === 'month') return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
    return diffDayAndTime(date0, date1); // returns a duration
}
class DateProfileGenerator {
    constructor(props){
        this.props = props;
        this.initHiddenDays();
    }
    /* Date Range Computation
    ------------------------------------------------------------------------------------------------------------------*/ // Builds a structure with info about what the dates/ranges will be for the "prev" view.
    buildPrev(currentDateProfile, currentDate, forceToValid) {
        let { dateEnv } = this.props;
        let prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);
        return this.build(prevDate, -1, forceToValid);
    }
    // Builds a structure with info about what the dates/ranges will be for the "next" view.
    buildNext(currentDateProfile, currentDate, forceToValid) {
        let { dateEnv } = this.props;
        let nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), currentDateProfile.dateIncrement);
        return this.build(nextDate, 1, forceToValid);
    }
    // Builds a structure holding dates/ranges for rendering around the given date.
    // Optional direction param indicates whether the date is being incremented/decremented
    // from its previous value. decremented = -1, incremented = 1 (default).
    build(currentDate, direction, forceToValid = true) {
        let { props } = this;
        let validRange;
        let currentInfo;
        let isRangeAllDay;
        let renderRange;
        let activeRange;
        let isValid;
        validRange = this.buildValidRange();
        validRange = this.trimHiddenDays(validRange);
        if (forceToValid) currentDate = constrainMarkerToRange(currentDate, validRange);
        currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
        renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
        renderRange = this.trimHiddenDays(renderRange);
        activeRange = renderRange;
        if (!props.showNonCurrentDates) activeRange = intersectRanges(activeRange, currentInfo.range);
        activeRange = this.adjustActiveRange(activeRange);
        activeRange = intersectRanges(activeRange, validRange); // might return null
        // it's invalid if the originally requested date is not contained,
        // or if the range is completely outside of the valid range.
        isValid = rangesIntersect(currentInfo.range, validRange);
        // HACK: constrain to render-range so `currentDate` is more useful to view rendering
        if (!rangeContainsMarker(renderRange, currentDate)) currentDate = renderRange.start;
        return {
            currentDate,
            // constraint for where prev/next operations can go and where events can be dragged/resized to.
            // an object with optional start and end properties.
            validRange,
            // range the view is formally responsible for.
            // for example, a month view might have 1st-31st, excluding padded dates
            currentRange: currentInfo.range,
            // name of largest unit being displayed, like "month" or "week"
            currentRangeUnit: currentInfo.unit,
            isRangeAllDay,
            // dates that display events and accept drag-n-drop
            // will be `null` if no dates accept events
            activeRange,
            // date range with a rendered skeleton
            // includes not-active days that need some sort of DOM
            renderRange,
            // Duration object that denotes the first visible time of any given day
            slotMinTime: props.slotMinTime,
            // Duration object that denotes the exclusive visible end time of any given day
            slotMaxTime: props.slotMaxTime,
            isValid,
            // how far the current date will move for a prev/next operation
            dateIncrement: this.buildDateIncrement(currentInfo.duration)
        };
    }
    // Builds an object with optional start/end properties.
    // Indicates the minimum/maximum dates to display.
    // not responsible for trimming hidden days.
    buildValidRange() {
        let input = this.props.validRangeInput;
        let simpleInput = typeof input === 'function' ? input.call(this.props.calendarApi, this.props.dateEnv.toDate(this.props.nowManager.getDateMarker())) : input;
        return this.refineRange(simpleInput) || {
            start: null,
            end: null
        }; // completely open-ended
    }
    // Builds a structure with info about the "current" range, the range that is
    // highlighted as being the current month for example.
    // See build() for a description of `direction`.
    // Guaranteed to have `range` and `unit` properties. `duration` is optional.
    buildCurrentRangeInfo(date, direction) {
        let { props } = this;
        let duration = null;
        let unit = null;
        let range = null;
        let dayCount;
        if (props.duration) {
            duration = props.duration;
            unit = props.durationUnit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
        } else if (dayCount = this.props.dayCount) {
            unit = 'day';
            range = this.buildRangeFromDayCount(date, direction, dayCount);
        } else if (range = this.buildCustomVisibleRange(date)) unit = props.dateEnv.greatestWholeUnit(range.start, range.end).unit;
        else {
            duration = this.getFallbackDuration();
            unit = greatestDurationDenominator(duration).unit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
        }
        return {
            duration,
            unit,
            range
        };
    }
    getFallbackDuration() {
        return createDuration({
            day: 1
        });
    }
    // Returns a new activeRange to have time values (un-ambiguate)
    // slotMinTime or slotMaxTime causes the range to expand.
    adjustActiveRange(range) {
        let { dateEnv, usesMinMaxTime, slotMinTime, slotMaxTime } = this.props;
        let { start, end } = range;
        if (usesMinMaxTime) {
            // expand active range if slotMinTime is negative (why not when positive?)
            if (asRoughDays(slotMinTime) < 0) {
                start = startOfDay(start); // necessary?
                start = dateEnv.add(start, slotMinTime);
            }
            // expand active range if slotMaxTime is beyond one day (why not when negative?)
            if (asRoughDays(slotMaxTime) > 1) {
                end = startOfDay(end); // necessary?
                end = addDays(end, -1);
                end = dateEnv.add(end, slotMaxTime);
            }
        }
        return {
            start,
            end
        };
    }
    // Builds the "current" range when it is specified as an explicit duration.
    // `unit` is the already-computed greatestDurationDenominator unit of duration.
    buildRangeFromDuration(date, direction, duration, unit) {
        let { dateEnv, dateAlignment } = this.props;
        let start;
        let end;
        let res;
        // compute what the alignment should be
        if (!dateAlignment) {
            let { dateIncrement } = this.props;
            if (dateIncrement) {
                // use the smaller of the two units
                if (asRoughMs(dateIncrement) < asRoughMs(duration)) dateAlignment = greatestDurationDenominator(dateIncrement).unit;
                else dateAlignment = unit;
            } else dateAlignment = unit;
        }
        // if the view displays a single day or smaller
        if (asRoughDays(duration) <= 1) {
            if (this.isHiddenDay(start)) {
                start = this.skipHiddenDays(start, direction);
                start = startOfDay(start);
            }
        }
        function computeRes() {
            start = dateEnv.startOf(date, dateAlignment);
            end = dateEnv.add(start, duration);
            res = {
                start,
                end
            };
        }
        computeRes();
        // if range is completely enveloped by hidden days, go past the hidden days
        if (!this.trimHiddenDays(res)) {
            date = this.skipHiddenDays(date, direction);
            computeRes();
        }
        return res;
    }
    // Builds the "current" range when a dayCount is specified.
    buildRangeFromDayCount(date, direction, dayCount) {
        let { dateEnv, dateAlignment } = this.props;
        let runningCount = 0;
        let start = date;
        let end;
        if (dateAlignment) start = dateEnv.startOf(start, dateAlignment);
        start = startOfDay(start);
        start = this.skipHiddenDays(start, direction);
        end = start;
        do {
            end = addDays(end, 1);
            if (!this.isHiddenDay(end)) runningCount += 1;
        }while (runningCount < dayCount);
        return {
            start,
            end
        };
    }
    // Builds a normalized range object for the "visible" range,
    // which is a way to define the currentRange and activeRange at the same time.
    buildCustomVisibleRange(date) {
        let { props } = this;
        let input = props.visibleRangeInput;
        let simpleInput = typeof input === 'function' ? input.call(props.calendarApi, props.dateEnv.toDate(date)) : input;
        let range = this.refineRange(simpleInput);
        if (range && (range.start == null || range.end == null)) return null;
        return range;
    }
    // Computes the range that will represent the element/cells for *rendering*,
    // but which may have voided days/times.
    // not responsible for trimming hidden days.
    buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {
        return currentRange;
    }
    // Compute the duration value that should be added/substracted to the current date
    // when a prev/next operation happens.
    buildDateIncrement(fallback) {
        let { dateIncrement } = this.props;
        let customAlignment;
        if (dateIncrement) return dateIncrement;
        if (customAlignment = this.props.dateAlignment) return createDuration(1, customAlignment);
        if (fallback) return fallback;
        return createDuration({
            days: 1
        });
    }
    refineRange(rangeInput) {
        if (rangeInput) {
            let range = parseRange(rangeInput, this.props.dateEnv);
            if (range) range = computeVisibleDayRange(range);
            return range;
        }
        return null;
    }
    /* Hidden Days
    ------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week
    initHiddenDays() {
        let hiddenDays = this.props.hiddenDays || []; // array of day-of-week indices that are hidden
        let isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)
        let dayCnt = 0;
        let i;
        if (this.props.weekends === false) hiddenDays.push(0, 6); // 0=sunday, 6=saturday
        for(i = 0; i < 7; i += 1)if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) dayCnt += 1;
        if (!dayCnt) throw new Error('invalid hiddenDays'); // all days were hidden? bad.
        this.isHiddenDayHash = isHiddenDayHash;
    }
    // Remove days from the beginning and end of the range that are computed as hidden.
    // If the whole range is trimmed off, returns null
    trimHiddenDays(range) {
        let { start, end } = range;
        if (start) start = this.skipHiddenDays(start);
        if (end) end = this.skipHiddenDays(end, -1, true);
        if (start == null || end == null || start < end) return {
            start,
            end
        };
        return null;
    }
    // Is the current day hidden?
    // `day` is a day-of-week index (0-6), or a Date (used for UTC)
    isHiddenDay(day) {
        if (day instanceof Date) day = day.getUTCDay();
        return this.isHiddenDayHash[day];
    }
    // Incrementing the current day until it is no longer a hidden day, returning a copy.
    // DOES NOT CONSIDER validRange!
    // If the initial value of `date` is not a hidden day, don't do anything.
    // Pass `isExclusive` as `true` if you are dealing with an end date.
    // `inc` defaults to `1` (increment one day forward each time)
    skipHiddenDays(date, inc = 1, isExclusive = false) {
        while(this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7])date = addDays(date, inc);
        return date;
    }
}
function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
    return {
        instanceId: guid(),
        defId,
        range,
        forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
        forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
    };
}
function parseRecurring(refined, defaultAllDay, dateEnv, recurringTypes) {
    for(let i = 0; i < recurringTypes.length; i += 1){
        let parsed = recurringTypes[i].parse(refined, dateEnv);
        if (parsed) {
            let { allDay } = refined;
            if (allDay == null) {
                allDay = defaultAllDay;
                if (allDay == null) {
                    allDay = parsed.allDayGuess;
                    if (allDay == null) allDay = false;
                }
            }
            return {
                allDay,
                duration: parsed.duration,
                typeData: parsed.typeData,
                typeId: i
            };
        }
    }
    return null;
}
function expandRecurring(eventStore, framingRange, context) {
    let { dateEnv, pluginHooks, options } = context;
    let { defs, instances } = eventStore;
    // remove existing recurring instances
    // TODO: bad. always expand events as a second step
    instances = filterHash(instances, (instance)=>!defs[instance.defId].recurringDef);
    for(let defId in defs){
        let def = defs[defId];
        if (def.recurringDef) {
            let { duration } = def.recurringDef;
            if (!duration) duration = def.allDay ? options.defaultAllDayEventDuration : options.defaultTimedEventDuration;
            let starts = expandRecurringRanges(def, duration, framingRange, dateEnv, pluginHooks.recurringTypes);
            for (let start of starts){
                let instance = createEventInstance(defId, {
                    start,
                    end: dateEnv.add(start, duration)
                });
                instances[instance.instanceId] = instance;
            }
        }
    }
    return {
        defs,
        instances
    };
}
/*
Event MUST have a recurringDef
*/ function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
    let typeDef = recurringTypes[eventDef.recurringDef.typeId];
    let markers = typeDef.expand(eventDef.recurringDef.typeData, {
        start: dateEnv.subtract(framingRange.start, duration),
        end: framingRange.end
    }, dateEnv);
    // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to
    if (eventDef.allDay) markers = markers.map(startOfDay);
    return markers;
}
const EVENT_NON_DATE_REFINERS = {
    id: String,
    groupId: String,
    title: String,
    url: String,
    interactive: Boolean
};
const EVENT_DATE_REFINERS = {
    start: identity,
    end: identity,
    date: identity,
    allDay: Boolean
};
const EVENT_REFINERS = Object.assign(Object.assign(Object.assign({}, EVENT_NON_DATE_REFINERS), EVENT_DATE_REFINERS), {
    extendedProps: identity
});
function parseEvent(raw, eventSource, context, allowOpenRange, refiners = buildEventRefiners(context), defIdMap, instanceIdMap) {
    let { refined, extra } = refineEventDef(raw, context, refiners);
    let defaultAllDay = computeIsDefaultAllDay(eventSource, context);
    let recurringRes = parseRecurring(refined, defaultAllDay, context.dateEnv, context.pluginHooks.recurringTypes);
    if (recurringRes) {
        let def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', recurringRes.allDay, Boolean(recurringRes.duration), context, defIdMap);
        def.recurringDef = {
            typeId: recurringRes.typeId,
            typeData: recurringRes.typeData,
            duration: recurringRes.duration
        };
        return {
            def,
            instance: null
        };
    }
    let singleRes = parseSingle(refined, defaultAllDay, context, allowOpenRange);
    if (singleRes) {
        let def = parseEventDef(refined, extra, eventSource ? eventSource.sourceId : '', singleRes.allDay, singleRes.hasEnd, context, defIdMap);
        let instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
        if (instanceIdMap && def.publicId && instanceIdMap[def.publicId]) instance.instanceId = instanceIdMap[def.publicId];
        return {
            def,
            instance
        };
    }
    return null;
}
function refineEventDef(raw, context, refiners = buildEventRefiners(context)) {
    return refineProps(raw, refiners);
}
function buildEventRefiners(context) {
    return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_REFINERS), context.pluginHooks.eventRefiners);
}
/*
Will NOT populate extendedProps with the leftover properties.
Will NOT populate date-related props.
*/ function parseEventDef(refined, extra, sourceId, allDay, hasEnd, context, defIdMap) {
    let def = {
        title: refined.title || '',
        groupId: refined.groupId || '',
        publicId: refined.id || '',
        url: refined.url || '',
        recurringDef: null,
        defId: (defIdMap && refined.id ? defIdMap[refined.id] : '') || guid(),
        sourceId,
        allDay,
        hasEnd,
        interactive: refined.interactive,
        ui: createEventUi(refined, context),
        extendedProps: Object.assign(Object.assign({}, refined.extendedProps || {}), extra)
    };
    for (let memberAdder of context.pluginHooks.eventDefMemberAdders)Object.assign(def, memberAdder(refined));
    // help out EventImpl from having user modify props
    Object.freeze(def.ui.classNames);
    Object.freeze(def.extendedProps);
    return def;
}
function parseSingle(refined, defaultAllDay, context, allowOpenRange) {
    let { allDay } = refined;
    let startMeta;
    let startMarker = null;
    let hasEnd = false;
    let endMeta;
    let endMarker = null;
    let startInput = refined.start != null ? refined.start : refined.date;
    startMeta = context.dateEnv.createMarkerMeta(startInput);
    if (startMeta) startMarker = startMeta.marker;
    else if (!allowOpenRange) return null;
    if (refined.end != null) endMeta = context.dateEnv.createMarkerMeta(refined.end);
    if (allDay == null) {
        if (defaultAllDay != null) allDay = defaultAllDay;
        else // fall back to the date props LAST
        allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
    }
    if (allDay && startMarker) startMarker = startOfDay(startMarker);
    if (endMeta) {
        endMarker = endMeta.marker;
        if (allDay) endMarker = startOfDay(endMarker);
        if (startMarker && endMarker <= startMarker) endMarker = null;
    }
    if (endMarker) hasEnd = true;
    else if (!allowOpenRange) {
        hasEnd = context.options.forceEventDuration || false;
        endMarker = context.dateEnv.add(startMarker, allDay ? context.options.defaultAllDayEventDuration : context.options.defaultTimedEventDuration);
    }
    return {
        allDay,
        hasEnd,
        range: {
            start: startMarker,
            end: endMarker
        },
        forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
        forcedEndTzo: endMeta ? endMeta.forcedTzo : null
    };
}
function computeIsDefaultAllDay(eventSource, context) {
    let res = null;
    if (eventSource) res = eventSource.defaultAllDay;
    if (res == null) res = context.options.defaultAllDay;
    return res;
}
function parseEvents(rawEvents, eventSource, context, allowOpenRange, defIdMap, instanceIdMap) {
    let eventStore = createEmptyEventStore();
    let eventRefiners = buildEventRefiners(context);
    for (let rawEvent of rawEvents){
        let tuple = parseEvent(rawEvent, eventSource, context, allowOpenRange, eventRefiners, defIdMap, instanceIdMap);
        if (tuple) eventTupleToStore(tuple, eventStore);
    }
    return eventStore;
}
function eventTupleToStore(tuple, eventStore = createEmptyEventStore()) {
    eventStore.defs[tuple.def.defId] = tuple.def;
    if (tuple.instance) eventStore.instances[tuple.instance.instanceId] = tuple.instance;
    return eventStore;
}
// retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?
function getRelevantEvents(eventStore, instanceId) {
    let instance = eventStore.instances[instanceId];
    if (instance) {
        let def = eventStore.defs[instance.defId];
        // get events/instances with same group
        let newStore = filterEventStoreDefs(eventStore, (lookDef)=>isEventDefsGrouped(def, lookDef));
        // add the original
        // TODO: wish we could use eventTupleToStore or something like it
        newStore.defs[def.defId] = def;
        newStore.instances[instance.instanceId] = instance;
        return newStore;
    }
    return createEmptyEventStore();
}
function isEventDefsGrouped(def0, def1) {
    return Boolean(def0.groupId && def0.groupId === def1.groupId);
}
function createEmptyEventStore() {
    return {
        defs: {},
        instances: {}
    };
}
function mergeEventStores(store0, store1) {
    return {
        defs: Object.assign(Object.assign({}, store0.defs), store1.defs),
        instances: Object.assign(Object.assign({}, store0.instances), store1.instances)
    };
}
function filterEventStoreDefs(eventStore, filterFunc) {
    let defs = filterHash(eventStore.defs, filterFunc);
    let instances = filterHash(eventStore.instances, (instance)=>defs[instance.defId] // still exists?
    );
    return {
        defs,
        instances
    };
}
function excludeSubEventStore(master, sub) {
    let { defs, instances } = master;
    let filteredDefs = {};
    let filteredInstances = {};
    for(let defId in defs)if (!sub.defs[defId]) filteredDefs[defId] = defs[defId];
    for(let instanceId in instances)if (!sub.instances[instanceId] && // not explicitly excluded
    filteredDefs[instances[instanceId].defId] // def wasn't filtered away
    ) filteredInstances[instanceId] = instances[instanceId];
    return {
        defs: filteredDefs,
        instances: filteredInstances
    };
}
function normalizeConstraint(input, context) {
    if (Array.isArray(input)) return parseEvents(input, null, context, true); // allowOpenRange=true
    if (typeof input === 'object' && input) return parseEvents([
        input
    ], null, context, true); // allowOpenRange=true
    if (input != null) return String(input);
    return null;
}
function parseClassNames(raw) {
    if (Array.isArray(raw)) return raw;
    if (typeof raw === 'string') return raw.split(/\s+/);
    return [];
}
// TODO: better called "EventSettings" or "EventConfig"
// TODO: move this file into structs
// TODO: separate constraint/overlap/allow, because selection uses only that, not other props
const EVENT_UI_REFINERS = {
    display: String,
    editable: Boolean,
    startEditable: Boolean,
    durationEditable: Boolean,
    constraint: identity,
    overlap: identity,
    allow: identity,
    className: parseClassNames,
    classNames: parseClassNames,
    color: String,
    backgroundColor: String,
    borderColor: String,
    textColor: String
};
const EMPTY_EVENT_UI = {
    display: null,
    startEditable: null,
    durationEditable: null,
    constraints: [],
    overlap: null,
    allows: [],
    backgroundColor: '',
    borderColor: '',
    textColor: '',
    classNames: []
};
function createEventUi(refined, context) {
    let constraint = normalizeConstraint(refined.constraint, context);
    return {
        display: refined.display || null,
        startEditable: refined.startEditable != null ? refined.startEditable : refined.editable,
        durationEditable: refined.durationEditable != null ? refined.durationEditable : refined.editable,
        constraints: constraint != null ? [
            constraint
        ] : [],
        overlap: refined.overlap != null ? refined.overlap : null,
        allows: refined.allow != null ? [
            refined.allow
        ] : [],
        backgroundColor: refined.backgroundColor || refined.color || '',
        borderColor: refined.borderColor || refined.color || '',
        textColor: refined.textColor || '',
        classNames: (refined.className || []).concat(refined.classNames || [])
    };
}
// TODO: prevent against problems with <2 args!
function combineEventUis(uis) {
    return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
}
function combineTwoEventUis(item0, item1) {
    return {
        display: item1.display != null ? item1.display : item0.display,
        startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
        durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
        constraints: item0.constraints.concat(item1.constraints),
        overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
        allows: item0.allows.concat(item1.allows),
        backgroundColor: item1.backgroundColor || item0.backgroundColor,
        borderColor: item1.borderColor || item0.borderColor,
        textColor: item1.textColor || item0.textColor,
        classNames: item0.classNames.concat(item1.classNames)
    };
}
const EVENT_SOURCE_REFINERS = {
    id: String,
    defaultAllDay: Boolean,
    url: String,
    format: String,
    events: identity,
    eventDataTransform: identity,
    // for any network-related sources
    success: identity,
    failure: identity
};
function parseEventSource(raw, context, refiners = buildEventSourceRefiners(context)) {
    let rawObj;
    if (typeof raw === 'string') rawObj = {
        url: raw
    };
    else if (typeof raw === 'function' || Array.isArray(raw)) rawObj = {
        events: raw
    };
    else if (typeof raw === 'object' && raw) rawObj = raw;
    if (rawObj) {
        let { refined, extra } = refineProps(rawObj, refiners);
        let metaRes = buildEventSourceMeta(refined, context);
        if (metaRes) return {
            _raw: raw,
            isFetching: false,
            latestFetchId: '',
            fetchRange: null,
            defaultAllDay: refined.defaultAllDay,
            eventDataTransform: refined.eventDataTransform,
            success: refined.success,
            failure: refined.failure,
            publicId: refined.id || '',
            sourceId: guid(),
            sourceDefId: metaRes.sourceDefId,
            meta: metaRes.meta,
            ui: createEventUi(refined, context),
            extendedProps: extra
        };
    }
    return null;
}
function buildEventSourceRefiners(context) {
    return Object.assign(Object.assign(Object.assign({}, EVENT_UI_REFINERS), EVENT_SOURCE_REFINERS), context.pluginHooks.eventSourceRefiners);
}
function buildEventSourceMeta(raw, context) {
    let defs = context.pluginHooks.eventSourceDefs;
    for(let i = defs.length - 1; i >= 0; i -= 1){
        let def = defs[i];
        let meta = def.parseMeta(raw);
        if (meta) return {
            sourceDefId: i,
            meta
        };
    }
    return null;
}
function reduceEventStore(eventStore, action, eventSources, dateProfile, context) {
    switch(action.type){
        case 'RECEIVE_EVENTS':
            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, context);
        case 'RESET_RAW_EVENTS':
            return resetRawEvents(eventStore, eventSources[action.sourceId], action.rawEvents, dateProfile.activeRange, context);
        case 'ADD_EVENTS':
            return addEvent(eventStore, action.eventStore, dateProfile ? dateProfile.activeRange : null, context);
        case 'RESET_EVENTS':
            return action.eventStore;
        case 'MERGE_EVENTS':
            return mergeEventStores(eventStore, action.eventStore);
        case 'PREV':
        case 'NEXT':
        case 'CHANGE_DATE':
        case 'CHANGE_VIEW_TYPE':
            if (dateProfile) return expandRecurring(eventStore, dateProfile.activeRange, context);
            return eventStore;
        case 'REMOVE_EVENTS':
            return excludeSubEventStore(eventStore, action.eventStore);
        case 'REMOVE_EVENT_SOURCE':
            return excludeEventsBySourceId(eventStore, action.sourceId);
        case 'REMOVE_ALL_EVENT_SOURCES':
            return filterEventStoreDefs(eventStore, (eventDef)=>!eventDef.sourceId // only keep events with no source id
            );
        case 'REMOVE_ALL_EVENTS':
            return createEmptyEventStore();
        default:
            return eventStore;
    }
}
function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, context) {
    if (eventSource && // not already removed
    fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
    ) {
        let subset = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context);
        if (fetchRange) subset = expandRecurring(subset, fetchRange, context);
        return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
    }
    return eventStore;
}
function resetRawEvents(existingEventStore, eventSource, rawEvents, activeRange, context) {
    const { defIdMap, instanceIdMap } = buildPublicIdMaps(existingEventStore);
    let newEventStore = parseEvents(transformRawEvents(rawEvents, eventSource, context), eventSource, context, false, defIdMap, instanceIdMap);
    return expandRecurring(newEventStore, activeRange, context);
}
function transformRawEvents(rawEvents, eventSource, context) {
    let calEachTransform = context.options.eventDataTransform;
    let sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;
    if (sourceEachTransform) rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
    if (calEachTransform) rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
    return rawEvents;
}
function transformEachRawEvent(rawEvents, func) {
    let refinedEvents;
    if (!func) refinedEvents = rawEvents;
    else {
        refinedEvents = [];
        for (let rawEvent of rawEvents){
            let refinedEvent = func(rawEvent);
            if (refinedEvent) refinedEvents.push(refinedEvent);
            else if (refinedEvent == null) refinedEvents.push(rawEvent);
             // if a different falsy value, do nothing
        }
    }
    return refinedEvents;
}
function addEvent(eventStore, subset, expandRange, context) {
    if (expandRange) subset = expandRecurring(subset, expandRange, context);
    return mergeEventStores(eventStore, subset);
}
function rezoneEventStoreDates(eventStore, oldDateEnv, newDateEnv) {
    let { defs } = eventStore;
    let instances = mapHash(eventStore.instances, (instance)=>{
        let def = defs[instance.defId];
        if (def.allDay) return instance; // isn't dependent on timezone
        return Object.assign(Object.assign({}, instance), {
            range: {
                start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
                end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
            },
            forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
            forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
        });
    });
    return {
        defs,
        instances
    };
}
function excludeEventsBySourceId(eventStore, sourceId) {
    return filterEventStoreDefs(eventStore, (eventDef)=>eventDef.sourceId !== sourceId);
}
// QUESTION: why not just return instances? do a general object-property-exclusion util
function excludeInstances(eventStore, removals) {
    return {
        defs: eventStore.defs,
        instances: filterHash(eventStore.instances, (instance)=>!removals[instance.instanceId])
    };
}
function buildPublicIdMaps(eventStore) {
    const { defs, instances } = eventStore;
    const defIdMap = {};
    const instanceIdMap = {};
    for(let defId in defs){
        const def = defs[defId];
        const { publicId } = def;
        if (publicId) defIdMap[publicId] = defId;
    }
    for(let instanceId in instances){
        const instance = instances[instanceId];
        const def = defs[instance.defId];
        const { publicId } = def;
        if (publicId) instanceIdMap[publicId] = instanceId;
    }
    return {
        defIdMap,
        instanceIdMap
    };
}
class Emitter {
    constructor(){
        this.handlers = {};
        this.thisContext = null;
    }
    setThisContext(thisContext) {
        this.thisContext = thisContext;
    }
    setOptions(options) {
        this.options = options;
    }
    on(type, handler) {
        addToHash(this.handlers, type, handler);
    }
    off(type, handler) {
        removeFromHash(this.handlers, type, handler);
    }
    trigger(type, ...args) {
        let attachedHandlers = this.handlers[type] || [];
        let optionHandler = this.options && this.options[type];
        let handlers = [].concat(optionHandler || [], attachedHandlers);
        for (let handler of handlers)handler.apply(this.thisContext, args);
    }
    hasHandlers(type) {
        return Boolean(this.handlers[type] && this.handlers[type].length || this.options && this.options[type]);
    }
}
function addToHash(hash, type, handler) {
    (hash[type] || (hash[type] = [])).push(handler);
}
function removeFromHash(hash, type, handler) {
    if (handler) {
        if (hash[type]) hash[type] = hash[type].filter((func)=>func !== handler);
    } else delete hash[type]; // remove all handler funcs for this type
}
const DEF_DEFAULTS = {
    startTime: '09:00',
    endTime: '17:00',
    daysOfWeek: [
        1,
        2,
        3,
        4,
        5
    ],
    display: 'inverse-background',
    classNames: 'fc-non-business',
    groupId: '_businessHours'
};
/*
TODO: pass around as EventDefHash!!!
*/ function parseBusinessHours(input, context) {
    return parseEvents(refineInputs(input), null, context);
}
function refineInputs(input) {
    let rawDefs;
    if (input === true) rawDefs = [
        {}
    ]; // will get DEF_DEFAULTS verbatim
    else if (Array.isArray(input)) // if specifying an array, every sub-definition NEEDS a day-of-week
    rawDefs = input.filter((rawDef)=>rawDef.daysOfWeek);
    else if (typeof input === 'object' && input) rawDefs = [
        input
    ];
    else rawDefs = [];
    rawDefs = rawDefs.map((rawDef)=>Object.assign(Object.assign({}, DEF_DEFAULTS), rawDef));
    return rawDefs;
}
function triggerDateSelect(selection, pev, context) {
    context.emitter.trigger('select', Object.assign(Object.assign({}, buildDateSpanApiWithContext(selection, context)), {
        jsEvent: pev ? pev.origEvent : null,
        view: context.viewApi || context.calendarApi.view
    }));
}
function triggerDateUnselect(pev, context) {
    context.emitter.trigger('unselect', {
        jsEvent: pev ? pev.origEvent : null,
        view: context.viewApi || context.calendarApi.view
    });
}
function buildDateSpanApiWithContext(dateSpan, context) {
    let props = {};
    for (let transform of context.pluginHooks.dateSpanTransforms)Object.assign(props, transform(dateSpan, context));
    Object.assign(props, buildDateSpanApi(dateSpan, context.dateEnv));
    return props;
}
// Given an event's allDay status and start date, return what its fallback end date should be.
// TODO: rename to computeDefaultEventEnd
function getDefaultEventEnd(allDay, marker, context) {
    let { dateEnv, options } = context;
    let end = marker;
    if (allDay) {
        end = startOfDay(end);
        end = dateEnv.add(end, options.defaultAllDayEventDuration);
    } else end = dateEnv.add(end, options.defaultTimedEventDuration);
    return end;
}
// applies the mutation to ALL defs/instances within the event store
function applyMutationToEventStore(eventStore, eventConfigBase, mutation, context) {
    let eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
    let dest = createEmptyEventStore();
    for(let defId in eventStore.defs){
        let def = eventStore.defs[defId];
        dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, context);
    }
    for(let instanceId in eventStore.instances){
        let instance = eventStore.instances[instanceId];
        let def = dest.defs[instance.defId]; // important to grab the newly modified def
        dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, context);
    }
    return dest;
}
function applyMutationToEventDef(eventDef, eventConfig, mutation, context) {
    let standardProps = mutation.standardProps || {};
    // if hasEnd has not been specified, guess a good value based on deltas.
    // if duration will change, there's no way the default duration will persist,
    // and thus, we need to mark the event as having a real end
    if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) standardProps.hasEnd = true; // TODO: is this mutation okay?
    let copy = Object.assign(Object.assign(Object.assign({}, eventDef), standardProps), {
        ui: Object.assign(Object.assign({}, eventDef.ui), standardProps.ui)
    });
    if (mutation.extendedProps) copy.extendedProps = Object.assign(Object.assign({}, copy.extendedProps), mutation.extendedProps);
    for (let applier of context.pluginHooks.eventDefMutationAppliers)applier(copy, mutation, context);
    if (!copy.hasEnd && context.options.forceEventDuration) copy.hasEnd = true;
    return copy;
}
function applyMutationToEventInstance(eventInstance, eventDef, eventConfig, mutation, context) {
    let { dateEnv } = context;
    let forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
    let clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;
    let copy = Object.assign({}, eventInstance);
    if (forceAllDay) copy.range = computeAlignedDayRange(copy.range);
    if (mutation.datesDelta && eventConfig.startEditable) copy.range = {
        start: dateEnv.add(copy.range.start, mutation.datesDelta),
        end: dateEnv.add(copy.range.end, mutation.datesDelta)
    };
    if (mutation.startDelta && eventConfig.durationEditable) copy.range = {
        start: dateEnv.add(copy.range.start, mutation.startDelta),
        end: copy.range.end
    };
    if (mutation.endDelta && eventConfig.durationEditable) copy.range = {
        start: copy.range.start,
        end: dateEnv.add(copy.range.end, mutation.endDelta)
    };
    if (clearEnd) copy.range = {
        start: copy.range.start,
        end: getDefaultEventEnd(eventDef.allDay, copy.range.start, context)
    };
    // in case event was all-day but the supplied deltas were not
    // better util for this?
    if (eventDef.allDay) copy.range = {
        start: startOfDay(copy.range.start),
        end: startOfDay(copy.range.end)
    };
    // handle invalid durations
    if (copy.range.end < copy.range.start) copy.range.end = getDefaultEventEnd(eventDef.allDay, copy.range.start, context);
    return copy;
}
class EventSourceImpl {
    constructor(context, internalEventSource){
        this.context = context;
        this.internalEventSource = internalEventSource;
    }
    remove() {
        this.context.dispatch({
            type: 'REMOVE_EVENT_SOURCE',
            sourceId: this.internalEventSource.sourceId
        });
    }
    refetch() {
        this.context.dispatch({
            type: 'FETCH_EVENT_SOURCES',
            sourceIds: [
                this.internalEventSource.sourceId
            ],
            isRefetch: true
        });
    }
    get id() {
        return this.internalEventSource.publicId;
    }
    get url() {
        return this.internalEventSource.meta.url;
    }
    get format() {
        return this.internalEventSource.meta.format; // TODO: bad. not guaranteed
    }
}
class EventImpl {
    // instance will be null if expressing a recurring event that has no current instances,
    // OR if trying to validate an incoming external event that has no dates assigned
    constructor(context, def, instance){
        this._context = context;
        this._def = def;
        this._instance = instance || null;
    }
    /*
    TODO: make event struct more responsible for this
    */ setProp(name, val) {
        if (name in EVENT_DATE_REFINERS) console.warn('Could not set date-related prop \'name\'. Use one of the date-related methods instead.');
        else if (name === 'id') {
            val = EVENT_NON_DATE_REFINERS[name](val);
            this.mutate({
                standardProps: {
                    publicId: val
                }
            });
        } else if (name in EVENT_NON_DATE_REFINERS) {
            val = EVENT_NON_DATE_REFINERS[name](val);
            this.mutate({
                standardProps: {
                    [name]: val
                }
            });
        } else if (name in EVENT_UI_REFINERS) {
            let ui = EVENT_UI_REFINERS[name](val);
            if (name === 'color') ui = {
                backgroundColor: val,
                borderColor: val
            };
            else if (name === 'editable') ui = {
                startEditable: val,
                durationEditable: val
            };
            else ui = {
                [name]: val
            };
            this.mutate({
                standardProps: {
                    ui
                }
            });
        } else console.warn(`Could not set prop '${name}'. Use setExtendedProp instead.`);
    }
    setExtendedProp(name, val) {
        this.mutate({
            extendedProps: {
                [name]: val
            }
        });
    }
    setStart(startInput, options = {}) {
        let { dateEnv } = this._context;
        let start = dateEnv.createMarker(startInput);
        if (start && this._instance) {
            let instanceRange = this._instance.range;
            let startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?
            if (options.maintainDuration) this.mutate({
                datesDelta: startDelta
            });
            else this.mutate({
                startDelta
            });
        }
    }
    setEnd(endInput, options = {}) {
        let { dateEnv } = this._context;
        let end;
        if (endInput != null) {
            end = dateEnv.createMarker(endInput);
            if (!end) return; // TODO: warning if parsed bad
        }
        if (this._instance) {
            if (end) {
                let endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
                this.mutate({
                    endDelta
                });
            } else this.mutate({
                standardProps: {
                    hasEnd: false
                }
            });
        }
    }
    setDates(startInput, endInput, options = {}) {
        let { dateEnv } = this._context;
        let standardProps = {
            allDay: options.allDay
        };
        let start = dateEnv.createMarker(startInput);
        let end;
        if (!start) return; // TODO: warning if parsed bad
        if (endInput != null) {
            end = dateEnv.createMarker(endInput);
            if (!end) return;
        }
        if (this._instance) {
            let instanceRange = this._instance.range;
            // when computing the diff for an event being converted to all-day,
            // compute diff off of the all-day values the way event-mutation does.
            if (options.allDay === true) instanceRange = computeAlignedDayRange(instanceRange);
            let startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);
            if (end) {
                let endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);
                if (durationsEqual(startDelta, endDelta)) this.mutate({
                    datesDelta: startDelta,
                    standardProps
                });
                else this.mutate({
                    startDelta,
                    endDelta,
                    standardProps
                });
            } else {
                standardProps.hasEnd = false;
                this.mutate({
                    datesDelta: startDelta,
                    standardProps
                });
            }
        }
    }
    moveStart(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            startDelta: delta
        });
    }
    moveEnd(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            endDelta: delta
        });
    }
    moveDates(deltaInput) {
        let delta = createDuration(deltaInput);
        if (delta) this.mutate({
            datesDelta: delta
        });
    }
    setAllDay(allDay, options = {}) {
        let standardProps = {
            allDay
        };
        let { maintainDuration } = options;
        if (maintainDuration == null) maintainDuration = this._context.options.allDayMaintainDuration;
        if (this._def.allDay !== allDay) standardProps.hasEnd = maintainDuration;
        this.mutate({
            standardProps
        });
    }
    formatRange(formatInput) {
        let { dateEnv } = this._context;
        let instance = this._instance;
        let formatter = createFormatter(formatInput);
        if (this._def.hasEnd) return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
            forcedStartTzo: instance.forcedStartTzo,
            forcedEndTzo: instance.forcedEndTzo
        });
        return dateEnv.format(instance.range.start, formatter, {
            forcedTzo: instance.forcedStartTzo
        });
    }
    mutate(mutation) {
        let instance = this._instance;
        if (instance) {
            let def = this._def;
            let context = this._context;
            let { eventStore } = context.getCurrentData();
            let relevantEvents = getRelevantEvents(eventStore, instance.instanceId);
            let eventConfigBase = {
                '': {
                    display: '',
                    startEditable: true,
                    durationEditable: true,
                    constraints: [],
                    overlap: null,
                    allows: [],
                    backgroundColor: '',
                    borderColor: '',
                    textColor: '',
                    classNames: []
                }
            };
            relevantEvents = applyMutationToEventStore(relevantEvents, eventConfigBase, mutation, context);
            let oldEvent = new EventImpl(context, def, instance); // snapshot
            this._def = relevantEvents.defs[def.defId];
            this._instance = relevantEvents.instances[instance.instanceId];
            context.dispatch({
                type: 'MERGE_EVENTS',
                eventStore: relevantEvents
            });
            context.emitter.trigger('eventChange', {
                oldEvent,
                event: this,
                relatedEvents: buildEventApis(relevantEvents, context, instance),
                revert () {
                    context.dispatch({
                        type: 'RESET_EVENTS',
                        eventStore
                    });
                }
            });
        }
    }
    remove() {
        let context = this._context;
        let asStore = eventApiToStore(this);
        context.dispatch({
            type: 'REMOVE_EVENTS',
            eventStore: asStore
        });
        context.emitter.trigger('eventRemove', {
            event: this,
            relatedEvents: [],
            revert () {
                context.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: asStore
                });
            }
        });
    }
    get source() {
        let { sourceId } = this._def;
        if (sourceId) return new EventSourceImpl(this._context, this._context.getCurrentData().eventSources[sourceId]);
        return null;
    }
    get start() {
        return this._instance ? this._context.dateEnv.toDate(this._instance.range.start) : null;
    }
    get end() {
        return this._instance && this._def.hasEnd ? this._context.dateEnv.toDate(this._instance.range.end) : null;
    }
    get startStr() {
        let instance = this._instance;
        if (instance) return this._context.dateEnv.formatIso(instance.range.start, {
            omitTime: this._def.allDay,
            forcedTzo: instance.forcedStartTzo
        });
        return '';
    }
    get endStr() {
        let instance = this._instance;
        if (instance && this._def.hasEnd) return this._context.dateEnv.formatIso(instance.range.end, {
            omitTime: this._def.allDay,
            forcedTzo: instance.forcedEndTzo
        });
        return '';
    }
    // computable props that all access the def
    // TODO: find a TypeScript-compatible way to do this at scale
    get id() {
        return this._def.publicId;
    }
    get groupId() {
        return this._def.groupId;
    }
    get allDay() {
        return this._def.allDay;
    }
    get title() {
        return this._def.title;
    }
    get url() {
        return this._def.url;
    }
    get display() {
        return this._def.ui.display || 'auto';
    }
    get startEditable() {
        return this._def.ui.startEditable;
    }
    get durationEditable() {
        return this._def.ui.durationEditable;
    }
    get constraint() {
        return this._def.ui.constraints[0] || null;
    }
    get overlap() {
        return this._def.ui.overlap;
    }
    get allow() {
        return this._def.ui.allows[0] || null;
    }
    get backgroundColor() {
        return this._def.ui.backgroundColor;
    }
    get borderColor() {
        return this._def.ui.borderColor;
    }
    get textColor() {
        return this._def.ui.textColor;
    }
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get classNames() {
        return this._def.ui.classNames;
    }
    get extendedProps() {
        return this._def.extendedProps;
    }
    toPlainObject(settings = {}) {
        let def = this._def;
        let { ui } = def;
        let { startStr, endStr } = this;
        let res = {
            allDay: def.allDay
        };
        if (def.title) res.title = def.title;
        if (startStr) res.start = startStr;
        if (endStr) res.end = endStr;
        if (def.publicId) res.id = def.publicId;
        if (def.groupId) res.groupId = def.groupId;
        if (def.url) res.url = def.url;
        if (ui.display && ui.display !== 'auto') res.display = ui.display;
        // TODO: what about recurring-event properties???
        // TODO: include startEditable/durationEditable/constraint/overlap/allow
        if (settings.collapseColor && ui.backgroundColor && ui.backgroundColor === ui.borderColor) res.color = ui.backgroundColor;
        else {
            if (ui.backgroundColor) res.backgroundColor = ui.backgroundColor;
            if (ui.borderColor) res.borderColor = ui.borderColor;
        }
        if (ui.textColor) res.textColor = ui.textColor;
        if (ui.classNames.length) res.classNames = ui.classNames;
        if (Object.keys(def.extendedProps).length) {
            if (settings.collapseExtendedProps) Object.assign(res, def.extendedProps);
            else res.extendedProps = def.extendedProps;
        }
        return res;
    }
    toJSON() {
        return this.toPlainObject();
    }
}
function eventApiToStore(eventApi) {
    let def = eventApi._def;
    let instance = eventApi._instance;
    return {
        defs: {
            [def.defId]: def
        },
        instances: instance ? {
            [instance.instanceId]: instance
        } : {}
    };
}
function buildEventApis(eventStore, context, excludeInstance) {
    let { defs, instances } = eventStore;
    let eventApis = [];
    let excludeInstanceId = excludeInstance ? excludeInstance.instanceId : '';
    for(let id in instances){
        let instance = instances[id];
        let def = defs[instance.defId];
        if (instance.instanceId !== excludeInstanceId) eventApis.push(new EventImpl(context, def, instance));
    }
    return eventApis;
}
/*
Specifying nextDayThreshold signals that all-day ranges should be sliced.
*/ function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
    let inverseBgByGroupId = {};
    let inverseBgByDefId = {};
    let defByGroupId = {};
    let bgRanges = [];
    let fgRanges = [];
    let eventUis = compileEventUis(eventStore.defs, eventUiBases);
    for(let defId in eventStore.defs){
        let def = eventStore.defs[defId];
        let ui = eventUis[def.defId];
        if (ui.display === 'inverse-background') {
            if (def.groupId) {
                inverseBgByGroupId[def.groupId] = [];
                if (!defByGroupId[def.groupId]) defByGroupId[def.groupId] = def;
            } else inverseBgByDefId[defId] = [];
        }
    }
    for(let instanceId in eventStore.instances){
        let instance = eventStore.instances[instanceId];
        let def = eventStore.defs[instance.defId];
        let ui = eventUis[def.defId];
        let origRange = instance.range;
        let normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
        let slicedRange = intersectRanges(normalRange, framingRange);
        if (slicedRange) {
            if (ui.display === 'inverse-background') {
                if (def.groupId) inverseBgByGroupId[def.groupId].push(slicedRange);
                else inverseBgByDefId[instance.defId].push(slicedRange);
            } else if (ui.display !== 'none') (ui.display === 'background' ? bgRanges : fgRanges).push({
                def,
                ui,
                instance,
                range: slicedRange,
                isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
                isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
            });
        }
    }
    for(let groupId in inverseBgByGroupId){
        let ranges = inverseBgByGroupId[groupId];
        let invertedRanges = invertRanges(ranges, framingRange);
        for (let invertedRange of invertedRanges){
            let def = defByGroupId[groupId];
            let ui = eventUis[def.defId];
            bgRanges.push({
                def,
                ui,
                instance: null,
                range: invertedRange,
                isStart: false,
                isEnd: false
            });
        }
    }
    for(let defId in inverseBgByDefId){
        let ranges = inverseBgByDefId[defId];
        let invertedRanges = invertRanges(ranges, framingRange);
        for (let invertedRange of invertedRanges)bgRanges.push({
            def: eventStore.defs[defId],
            ui: eventUis[defId],
            instance: null,
            range: invertedRange,
            isStart: false,
            isEnd: false
        });
    }
    return {
        bg: bgRanges,
        fg: fgRanges
    };
}
function hasBgRendering(def) {
    return def.ui.display === 'background' || def.ui.display === 'inverse-background';
}
function setElSeg(el, seg) {
    el.fcSeg = seg;
}
function getElSeg(el) {
    return el.fcSeg || el.parentNode.fcSeg || // for the harness
    null;
}
// event ui computation
function compileEventUis(eventDefs, eventUiBases) {
    return mapHash(eventDefs, (eventDef)=>compileEventUi(eventDef, eventUiBases));
}
function compileEventUi(eventDef, eventUiBases) {
    let uis = [];
    if (eventUiBases['']) uis.push(eventUiBases['']);
    if (eventUiBases[eventDef.defId]) uis.push(eventUiBases[eventDef.defId]);
    uis.push(eventDef.ui);
    return combineEventUis(uis);
}
function sortEventSegs(segs, eventOrderSpecs) {
    let objs = segs.map(buildSegCompareObj);
    objs.sort((obj0, obj1)=>compareByFieldSpecs(obj0, obj1, eventOrderSpecs));
    return objs.map((c)=>c._seg);
}
// returns a object with all primitive props that can be compared
function buildSegCompareObj(seg) {
    let { eventRange } = seg;
    let eventDef = eventRange.def;
    let range = eventRange.instance ? eventRange.instance.range : eventRange.range;
    let start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events
    let end = range.end ? range.end.valueOf() : 0; // "
    return Object.assign(Object.assign(Object.assign({}, eventDef.extendedProps), eventDef), {
        id: eventDef.publicId,
        start,
        end,
        duration: end - start,
        allDay: Number(eventDef.allDay),
        _seg: seg
    });
}
function computeSegDraggable(seg, context) {
    let { pluginHooks } = context;
    let transformers = pluginHooks.isDraggableTransformers;
    let { def, ui } = seg.eventRange;
    let val = ui.startEditable;
    for (let transformer of transformers)val = transformer(val, def, ui, context);
    return val;
}
function computeSegStartResizable(seg, context) {
    return seg.isStart && seg.eventRange.ui.durationEditable && context.options.eventResizableFromStart;
}
function computeSegEndResizable(seg, context) {
    return seg.isEnd && seg.eventRange.ui.durationEditable;
}
function buildSegTimeText(seg, timeFormat, context, defaultDisplayEventTime, defaultDisplayEventEnd, startOverride, endOverride) {
    let { dateEnv, options } = context;
    let { displayEventTime, displayEventEnd } = options;
    let eventDef = seg.eventRange.def;
    let eventInstance = seg.eventRange.instance;
    if (displayEventTime == null) displayEventTime = defaultDisplayEventTime !== false;
    if (displayEventEnd == null) displayEventEnd = defaultDisplayEventEnd !== false;
    let wholeEventStart = eventInstance.range.start;
    let wholeEventEnd = eventInstance.range.end;
    let segStart = startOverride || seg.start || seg.eventRange.range.start;
    let segEnd = endOverride || seg.end || seg.eventRange.range.end;
    let isStartDay = startOfDay(wholeEventStart).valueOf() === startOfDay(segStart).valueOf();
    let isEndDay = startOfDay(addMs(wholeEventEnd, -1)).valueOf() === startOfDay(addMs(segEnd, -1)).valueOf();
    if (displayEventTime && !eventDef.allDay && (isStartDay || isEndDay)) {
        segStart = isStartDay ? wholeEventStart : segStart;
        segEnd = isEndDay ? wholeEventEnd : segEnd;
        if (displayEventEnd && eventDef.hasEnd) return dateEnv.formatRange(segStart, segEnd, timeFormat, {
            forcedStartTzo: startOverride ? null : eventInstance.forcedStartTzo,
            forcedEndTzo: endOverride ? null : eventInstance.forcedEndTzo
        });
        return dateEnv.format(segStart, timeFormat, {
            forcedTzo: startOverride ? null : eventInstance.forcedStartTzo
        });
    }
    return '';
}
function getSegMeta(seg, todayRange, nowDate) {
    let segRange = seg.eventRange.range;
    return {
        isPast: segRange.end <= (nowDate || todayRange.start),
        isFuture: segRange.start >= (nowDate || todayRange.end),
        isToday: todayRange && rangeContainsMarker(todayRange, segRange.start)
    };
}
function getEventClassNames(props) {
    let classNames = [
        'fc-event'
    ];
    if (props.isMirror) classNames.push('fc-event-mirror');
    if (props.isDraggable) classNames.push('fc-event-draggable');
    if (props.isStartResizable || props.isEndResizable) classNames.push('fc-event-resizable');
    if (props.isDragging) classNames.push('fc-event-dragging');
    if (props.isResizing) classNames.push('fc-event-resizing');
    if (props.isSelected) classNames.push('fc-event-selected');
    if (props.isStart) classNames.push('fc-event-start');
    if (props.isEnd) classNames.push('fc-event-end');
    if (props.isPast) classNames.push('fc-event-past');
    if (props.isToday) classNames.push('fc-event-today');
    if (props.isFuture) classNames.push('fc-event-future');
    return classNames;
}
function buildEventRangeKey(eventRange) {
    return eventRange.instance ? eventRange.instance.instanceId : `${eventRange.def.defId}:${eventRange.range.start.toISOString()}`;
// inverse-background events don't have specific instances. TODO: better solution
}
function getSegAnchorAttrs(seg, context) {
    let { def, instance } = seg.eventRange;
    let { url } = def;
    if (url) return {
        href: url
    };
    let { emitter, options } = context;
    let { eventInteractive } = options;
    if (eventInteractive == null) {
        eventInteractive = def.interactive;
        if (eventInteractive == null) eventInteractive = Boolean(emitter.hasHandlers('eventClick'));
    }
    // mock what happens in EventClicking
    if (eventInteractive) // only attach keyboard-related handlers because click handler is already done in EventClicking
    return createAriaKeyboardAttrs((ev)=>{
        emitter.trigger('eventClick', {
            el: ev.target,
            event: new EventImpl(context, def, instance),
            jsEvent: ev,
            view: context.viewApi
        });
    });
    return {};
}
const STANDARD_PROPS = {
    start: identity,
    end: identity,
    allDay: Boolean
};
function parseDateSpan(raw, dateEnv, defaultDuration) {
    let span = parseOpenDateSpan(raw, dateEnv);
    let { range } = span;
    if (!range.start) return null;
    if (!range.end) {
        if (defaultDuration == null) return null;
        range.end = dateEnv.add(range.start, defaultDuration);
    }
    return span;
}
/*
TODO: somehow combine with parseRange?
Will return null if the start/end props were present but parsed invalidly.
*/ function parseOpenDateSpan(raw, dateEnv) {
    let { refined: standardProps, extra } = refineProps(raw, STANDARD_PROPS);
    let startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
    let endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
    let { allDay } = standardProps;
    if (allDay == null) allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
    return Object.assign({
        range: {
            start: startMeta ? startMeta.marker : null,
            end: endMeta ? endMeta.marker : null
        },
        allDay
    }, extra);
}
function isDateSpansEqual(span0, span1) {
    return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
}
// the NON-DATE-RELATED props
function isSpanPropsEqual(span0, span1) {
    for(let propName in span1)if (propName !== 'range' && propName !== 'allDay') {
        if (span0[propName] !== span1[propName]) return false;
    }
    // are there any props that span0 has that span1 DOESN'T have?
    // both have range/allDay, so no need to special-case.
    for(let propName in span0){
        if (!(propName in span1)) return false;
    }
    return true;
}
function buildDateSpanApi(span, dateEnv) {
    return Object.assign(Object.assign({}, buildRangeApi(span.range, dateEnv, span.allDay)), {
        allDay: span.allDay
    });
}
function buildRangeApiWithTimeZone(range, dateEnv, omitTime) {
    return Object.assign(Object.assign({}, buildRangeApi(range, dateEnv, omitTime)), {
        timeZone: dateEnv.timeZone
    });
}
function buildRangeApi(range, dateEnv, omitTime) {
    return {
        start: dateEnv.toDate(range.start),
        end: dateEnv.toDate(range.end),
        startStr: dateEnv.formatIso(range.start, {
            omitTime
        }),
        endStr: dateEnv.formatIso(range.end, {
            omitTime
        })
    };
}
function fabricateEventRange(dateSpan, eventUiBases, context) {
    let res = refineEventDef({
        editable: false
    }, context);
    let def = parseEventDef(res.refined, res.extra, '', dateSpan.allDay, true, context);
    return {
        def,
        ui: compileEventUi(def, eventUiBases),
        instance: createEventInstance(def.defId, dateSpan.range),
        range: dateSpan.range,
        isStart: true,
        isEnd: true
    };
}
/*
given a function that resolves a result asynchronously.
the function can either call passed-in success and failure callbacks,
or it can return a promise.
if you need to pass additional params to func, bind them first.
*/ function unpromisify(func, normalizedSuccessCallback, normalizedFailureCallback) {
    // guard against success/failure callbacks being called more than once
    // and guard against a promise AND callback being used together.
    let isResolved = false;
    let wrappedSuccess = function(res) {
        if (!isResolved) {
            isResolved = true;
            normalizedSuccessCallback(res);
        }
    };
    let wrappedFailure = function(error) {
        if (!isResolved) {
            isResolved = true;
            normalizedFailureCallback(error);
        }
    };
    let res = func(wrappedSuccess, wrappedFailure);
    if (res && typeof res.then === 'function') res.then(wrappedSuccess, wrappedFailure);
}
class JsonRequestError extends Error {
    constructor(message, response){
        super(message);
        this.response = response;
    }
}
function requestJson(method, url, params) {
    method = method.toUpperCase();
    const fetchOptions = {
        method
    };
    if (method === 'GET') url += (url.indexOf('?') === -1 ? '?' : '&') + new URLSearchParams(params);
    else {
        fetchOptions.body = new URLSearchParams(params);
        fetchOptions.headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
    }
    return fetch(url, fetchOptions).then((fetchRes)=>{
        if (fetchRes.ok) return fetchRes.json().then((parsedResponse)=>{
            return [
                parsedResponse,
                fetchRes
            ];
        }, ()=>{
            throw new JsonRequestError('Failure parsing JSON', fetchRes);
        });
        else throw new JsonRequestError('Request failed', fetchRes);
    });
}
let canVGrowWithinCell;
function getCanVGrowWithinCell() {
    if (canVGrowWithinCell == null) canVGrowWithinCell = computeCanVGrowWithinCell();
    return canVGrowWithinCell;
}
function computeCanVGrowWithinCell() {
    // for SSR, because this function is call immediately at top-level
    // TODO: just make this logic execute top-level, immediately, instead of doing lazily
    if (typeof document === 'undefined') return true;
    let el = document.createElement('div');
    el.style.position = 'absolute';
    el.style.top = '0px';
    el.style.left = '0px';
    el.innerHTML = '<table><tr><td><div></div></td></tr></table>';
    el.querySelector('table').style.height = '100px';
    el.querySelector('div').style.height = '100%';
    document.body.appendChild(el);
    let div = el.querySelector('div');
    let possible = div.offsetHeight > 0;
    document.body.removeChild(el);
    return possible;
}
class CalendarRoot extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            forPrint: false
        };
        this.handleBeforePrint = ()=>{
            flushSync(()=>{
                this.setState({
                    forPrint: true
                });
            });
        };
        this.handleAfterPrint = ()=>{
            flushSync(()=>{
                this.setState({
                    forPrint: false
                });
            });
        };
    }
    render() {
        let { props } = this;
        let { options } = props;
        let { forPrint } = this.state;
        let isHeightAuto = forPrint || options.height === 'auto' || options.contentHeight === 'auto';
        let height = !isHeightAuto && options.height != null ? options.height : '';
        let classNames = [
            'fc',
            forPrint ? 'fc-media-print' : 'fc-media-screen',
            `fc-direction-${options.direction}`,
            props.theme.getClass('root')
        ];
        if (!getCanVGrowWithinCell()) classNames.push('fc-liquid-hack');
        return props.children(classNames, height, isHeightAuto, forPrint);
    }
    componentDidMount() {
        let { emitter } = this.props;
        emitter.on('_beforeprint', this.handleBeforePrint);
        emitter.on('_afterprint', this.handleAfterPrint);
    }
    componentWillUnmount() {
        let { emitter } = this.props;
        emitter.off('_beforeprint', this.handleBeforePrint);
        emitter.off('_afterprint', this.handleAfterPrint);
    }
}
class Interaction {
    constructor(settings){
        this.component = settings.component;
        this.isHitComboAllowed = settings.isHitComboAllowed || null;
    }
    destroy() {}
}
function parseInteractionSettings(component, input) {
    return {
        component,
        el: input.el,
        useEventCenter: input.useEventCenter != null ? input.useEventCenter : true,
        isHitComboAllowed: input.isHitComboAllowed || null
    };
}
function interactionSettingsToStore(settings) {
    return {
        [settings.component.uid]: settings
    };
}
// global state
const interactionSettingsStore = {};
class NowTimer extends (0, _preact.Component) {
    constructor(props, context){
        super(props, context);
        this.handleRefresh = ()=>{
            let timing = this.computeTiming();
            if (timing.state.nowDate.valueOf() !== this.state.nowDate.valueOf()) this.setState(timing.state);
            this.clearTimeout();
            this.setTimeout(timing.waitMs);
        };
        this.handleVisibilityChange = ()=>{
            if (!document.hidden) this.handleRefresh();
        };
        this.state = this.computeTiming().state;
    }
    render() {
        let { props, state } = this;
        return props.children(state.nowDate, state.todayRange);
    }
    componentDidMount() {
        this.setTimeout();
        this.context.nowManager.addResetListener(this.handleRefresh);
        // fired tab becomes visible after being hidden
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
    }
    componentDidUpdate(prevProps) {
        if (prevProps.unit !== this.props.unit) {
            this.clearTimeout();
            this.setTimeout();
        }
    }
    componentWillUnmount() {
        this.clearTimeout();
        this.context.nowManager.removeResetListener(this.handleRefresh);
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
    }
    computeTiming() {
        let { props, context } = this;
        let unroundedNow = context.nowManager.getDateMarker();
        let currentUnitStart = context.dateEnv.startOf(unroundedNow, props.unit);
        let nextUnitStart = context.dateEnv.add(currentUnitStart, createDuration(1, props.unit));
        let waitMs = nextUnitStart.valueOf() - unroundedNow.valueOf();
        // there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)
        // ensure no longer than a day
        waitMs = Math.min(86400000, waitMs);
        return {
            state: {
                nowDate: currentUnitStart,
                todayRange: buildDayRange(currentUnitStart)
            },
            waitMs
        };
    }
    setTimeout(waitMs = this.computeTiming().waitMs) {
        // NOTE: timeout could take longer than expected if tab sleeps,
        // which is why we listen to 'visibilitychange'
        this.timeoutId = setTimeout(()=>{
            // NOTE: timeout could also return *earlier* than expected, and we need to wait 2 ms more
            // This is why use use same waitMs from computeTiming, so we don't skip an interval while
            // .setState() is executing
            const timing = this.computeTiming();
            this.setState(timing.state, ()=>{
                this.setTimeout(timing.waitMs);
            });
        }, waitMs);
    }
    clearTimeout() {
        if (this.timeoutId) clearTimeout(this.timeoutId);
    }
}
NowTimer.contextType = ViewContextType;
function buildDayRange(date) {
    let start = startOfDay(date);
    let end = addDays(start, 1);
    return {
        start,
        end
    };
}
class CalendarImpl {
    getCurrentData() {
        return this.currentDataManager.getCurrentData();
    }
    dispatch(action) {
        this.currentDataManager.dispatch(action);
    }
    get view() {
        return this.getCurrentData().viewApi;
    }
    batchRendering(callback) {
        callback();
    }
    updateSize() {
        this.trigger('_resize', true);
    }
    // Options
    // -----------------------------------------------------------------------------------------------------------------
    setOption(name, val) {
        this.dispatch({
            type: 'SET_OPTION',
            optionName: name,
            rawOptionValue: val
        });
    }
    getOption(name) {
        return this.currentDataManager.currentCalendarOptionsInput[name];
    }
    getAvailableLocaleCodes() {
        return Object.keys(this.getCurrentData().availableRawLocales);
    }
    // Trigger
    // -----------------------------------------------------------------------------------------------------------------
    on(handlerName, handler) {
        let { currentDataManager } = this;
        if (currentDataManager.currentCalendarOptionsRefiners[handlerName]) currentDataManager.emitter.on(handlerName, handler);
        else console.warn(`Unknown listener name '${handlerName}'`);
    }
    off(handlerName, handler) {
        this.currentDataManager.emitter.off(handlerName, handler);
    }
    // not meant for public use
    trigger(handlerName, ...args) {
        this.currentDataManager.emitter.trigger(handlerName, ...args);
    }
    // View
    // -----------------------------------------------------------------------------------------------------------------
    changeView(viewType, dateOrRange) {
        this.batchRendering(()=>{
            this.unselect();
            if (dateOrRange) {
                if (dateOrRange.start && dateOrRange.end) {
                    this.dispatch({
                        type: 'CHANGE_VIEW_TYPE',
                        viewType
                    });
                    this.dispatch({
                        type: 'SET_OPTION',
                        optionName: 'visibleRange',
                        rawOptionValue: dateOrRange
                    });
                } else {
                    let { dateEnv } = this.getCurrentData();
                    this.dispatch({
                        type: 'CHANGE_VIEW_TYPE',
                        viewType,
                        dateMarker: dateEnv.createMarker(dateOrRange)
                    });
                }
            } else this.dispatch({
                type: 'CHANGE_VIEW_TYPE',
                viewType
            });
        });
    }
    // Forces navigation to a view for the given date.
    // `viewType` can be a specific view name or a generic one like "week" or "day".
    // needs to change
    zoomTo(dateMarker, viewType) {
        let state = this.getCurrentData();
        let spec;
        viewType = viewType || 'day'; // day is default zoom
        spec = state.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
        this.unselect();
        if (spec) this.dispatch({
            type: 'CHANGE_VIEW_TYPE',
            viewType: spec.type,
            dateMarker
        });
        else this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker
        });
    }
    // Given a duration singular unit, like "week" or "day", finds a matching view spec.
    // Preference is given to views that have corresponding buttons.
    getUnitViewSpec(unit) {
        let { viewSpecs, toolbarConfig } = this.getCurrentData();
        let viewTypes = [].concat(toolbarConfig.header ? toolbarConfig.header.viewsWithButtons : [], toolbarConfig.footer ? toolbarConfig.footer.viewsWithButtons : []);
        let i;
        let spec;
        for(let viewType in viewSpecs)viewTypes.push(viewType);
        for(i = 0; i < viewTypes.length; i += 1){
            spec = viewSpecs[viewTypes[i]];
            if (spec) {
                if (spec.singleUnit === unit) return spec;
            }
        }
        return null;
    }
    // Current Date
    // -----------------------------------------------------------------------------------------------------------------
    prev() {
        this.unselect();
        this.dispatch({
            type: 'PREV'
        });
    }
    next() {
        this.unselect();
        this.dispatch({
            type: 'NEXT'
        });
    }
    prevYear() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.addYears(state.currentDate, -1)
        });
    }
    nextYear() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.addYears(state.currentDate, 1)
        });
    }
    today() {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.nowManager.getDateMarker()
        });
    }
    gotoDate(zonedDateInput) {
        let state = this.getCurrentData();
        this.unselect();
        this.dispatch({
            type: 'CHANGE_DATE',
            dateMarker: state.dateEnv.createMarker(zonedDateInput)
        });
    }
    incrementDate(deltaInput) {
        let state = this.getCurrentData();
        let delta = createDuration(deltaInput);
        if (delta) {
            this.unselect();
            this.dispatch({
                type: 'CHANGE_DATE',
                dateMarker: state.dateEnv.add(state.currentDate, delta)
            });
        }
    }
    getDate() {
        let state = this.getCurrentData();
        return state.dateEnv.toDate(state.currentDate);
    }
    // Date Formatting Utils
    // -----------------------------------------------------------------------------------------------------------------
    formatDate(d, formatter) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
    }
    // `settings` is for formatter AND isEndExclusive
    formatRange(d0, d1, settings) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings), settings);
    }
    formatIso(d, omitTime) {
        let { dateEnv } = this.getCurrentData();
        return dateEnv.formatIso(dateEnv.createMarker(d), {
            omitTime
        });
    }
    // Date Selection / Event Selection / DayClick
    // -----------------------------------------------------------------------------------------------------------------
    select(dateOrObj, endDate) {
        let selectionInput;
        if (endDate == null) {
            if (dateOrObj.start != null) selectionInput = dateOrObj;
            else selectionInput = {
                start: dateOrObj,
                end: null
            };
        } else selectionInput = {
            start: dateOrObj,
            end: endDate
        };
        let state = this.getCurrentData();
        let selection = parseDateSpan(selectionInput, state.dateEnv, createDuration({
            days: 1
        }));
        if (selection) {
            this.dispatch({
                type: 'SELECT_DATES',
                selection
            });
            triggerDateSelect(selection, null, state);
        }
    }
    unselect(pev) {
        let state = this.getCurrentData();
        if (state.dateSelection) {
            this.dispatch({
                type: 'UNSELECT_DATES'
            });
            triggerDateUnselect(pev, state);
        }
    }
    // Public Events API
    // -----------------------------------------------------------------------------------------------------------------
    addEvent(eventInput, sourceInput) {
        if (eventInput instanceof EventImpl) {
            let def = eventInput._def;
            let instance = eventInput._instance;
            let currentData = this.getCurrentData();
            // not already present? don't want to add an old snapshot
            if (!currentData.eventStore.defs[def.defId]) {
                this.dispatch({
                    type: 'ADD_EVENTS',
                    eventStore: eventTupleToStore({
                        def,
                        instance
                    })
                });
                this.triggerEventAdd(eventInput);
            }
            return eventInput;
        }
        let state = this.getCurrentData();
        let eventSource;
        if (sourceInput instanceof EventSourceImpl) eventSource = sourceInput.internalEventSource;
        else if (typeof sourceInput === 'boolean') {
            if (sourceInput) [eventSource] = hashValuesToArray(state.eventSources);
        } else if (sourceInput != null) {
            let sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function
            if (!sourceApi) {
                console.warn(`Could not find an event source with ID "${sourceInput}"`); // TODO: test
                return null;
            }
            eventSource = sourceApi.internalEventSource;
        }
        let tuple = parseEvent(eventInput, eventSource, state, false);
        if (tuple) {
            let newEventApi = new EventImpl(state, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
            this.dispatch({
                type: 'ADD_EVENTS',
                eventStore: eventTupleToStore(tuple)
            });
            this.triggerEventAdd(newEventApi);
            return newEventApi;
        }
        return null;
    }
    triggerEventAdd(eventApi) {
        let { emitter } = this.getCurrentData();
        emitter.trigger('eventAdd', {
            event: eventApi,
            relatedEvents: [],
            revert: ()=>{
                this.dispatch({
                    type: 'REMOVE_EVENTS',
                    eventStore: eventApiToStore(eventApi)
                });
            }
        });
    }
    // TODO: optimize
    getEventById(id) {
        let state = this.getCurrentData();
        let { defs, instances } = state.eventStore;
        id = String(id);
        for(let defId in defs){
            let def = defs[defId];
            if (def.publicId === id) {
                if (def.recurringDef) return new EventImpl(state, def, null);
                for(let instanceId in instances){
                    let instance = instances[instanceId];
                    if (instance.defId === def.defId) return new EventImpl(state, def, instance);
                }
            }
        }
        return null;
    }
    getEvents() {
        let currentData = this.getCurrentData();
        return buildEventApis(currentData.eventStore, currentData);
    }
    removeAllEvents() {
        this.dispatch({
            type: 'REMOVE_ALL_EVENTS'
        });
    }
    // Public Event Sources API
    // -----------------------------------------------------------------------------------------------------------------
    getEventSources() {
        let state = this.getCurrentData();
        let sourceHash = state.eventSources;
        let sourceApis = [];
        for(let internalId in sourceHash)sourceApis.push(new EventSourceImpl(state, sourceHash[internalId]));
        return sourceApis;
    }
    getEventSourceById(id) {
        let state = this.getCurrentData();
        let sourceHash = state.eventSources;
        id = String(id);
        for(let sourceId in sourceHash){
            if (sourceHash[sourceId].publicId === id) return new EventSourceImpl(state, sourceHash[sourceId]);
        }
        return null;
    }
    addEventSource(sourceInput) {
        let state = this.getCurrentData();
        if (sourceInput instanceof EventSourceImpl) {
            // not already present? don't want to add an old snapshot
            if (!state.eventSources[sourceInput.internalEventSource.sourceId]) this.dispatch({
                type: 'ADD_EVENT_SOURCES',
                sources: [
                    sourceInput.internalEventSource
                ]
            });
            return sourceInput;
        }
        let eventSource = parseEventSource(sourceInput, state);
        if (eventSource) {
            this.dispatch({
                type: 'ADD_EVENT_SOURCES',
                sources: [
                    eventSource
                ]
            });
            return new EventSourceImpl(state, eventSource);
        }
        return null;
    }
    removeAllEventSources() {
        this.dispatch({
            type: 'REMOVE_ALL_EVENT_SOURCES'
        });
    }
    refetchEvents() {
        this.dispatch({
            type: 'FETCH_EVENT_SOURCES',
            isRefetch: true
        });
    }
    // Scroll
    // -----------------------------------------------------------------------------------------------------------------
    scrollToTime(timeInput) {
        let time = createDuration(timeInput);
        if (time) this.trigger('_scrollRequest', {
            time
        });
    }
}
function pointInsideRect(point, rect) {
    return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
}
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
function intersectRects(rect1, rect2) {
    let res = {
        left: Math.max(rect1.left, rect2.left),
        right: Math.min(rect1.right, rect2.right),
        top: Math.max(rect1.top, rect2.top),
        bottom: Math.min(rect1.bottom, rect2.bottom)
    };
    if (res.left < res.right && res.top < res.bottom) return res;
    return false;
}
function translateRect(rect, deltaX, deltaY) {
    return {
        left: rect.left + deltaX,
        right: rect.right + deltaX,
        top: rect.top + deltaY,
        bottom: rect.bottom + deltaY
    };
}
// Returns a new point that will have been moved to reside within the given rectangle
function constrainPoint(point, rect) {
    return {
        left: Math.min(Math.max(point.left, rect.left), rect.right),
        top: Math.min(Math.max(point.top, rect.top), rect.bottom)
    };
}
// Returns a point that is the center of the given rectangle
function getRectCenter(rect) {
    return {
        left: (rect.left + rect.right) / 2,
        top: (rect.top + rect.bottom) / 2
    };
}
// Subtracts point2's coordinates from point1's coordinates, returning a delta
function diffPoints(point1, point2) {
    return {
        left: point1.left - point2.left,
        top: point1.top - point2.top
    };
}
const EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere
class Splitter {
    constructor(){
        this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
        this.splitDateSelection = memoize(this._splitDateSpan);
        this.splitEventStore = memoize(this._splitEventStore);
        this.splitIndividualUi = memoize(this._splitIndividualUi);
        this.splitEventDrag = memoize(this._splitInteraction);
        this.splitEventResize = memoize(this._splitInteraction);
        this.eventUiBuilders = {}; // TODO: typescript protection
    }
    splitProps(props) {
        let keyInfos = this.getKeyInfo(props);
        let defKeys = this.getKeysForEventDefs(props.eventStore);
        let dateSelections = this.splitDateSelection(props.dateSelection);
        let individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*
        let eventStores = this.splitEventStore(props.eventStore, defKeys);
        let eventDrags = this.splitEventDrag(props.eventDrag);
        let eventResizes = this.splitEventResize(props.eventResize);
        let splitProps = {};
        this.eventUiBuilders = mapHash(keyInfos, (info, key)=>this.eventUiBuilders[key] || memoize(buildEventUiForKey));
        for(let key in keyInfos){
            let keyInfo = keyInfos[key];
            let eventStore = eventStores[key] || EMPTY_EVENT_STORE;
            let buildEventUi = this.eventUiBuilders[key];
            splitProps[key] = {
                businessHours: keyInfo.businessHours || props.businessHours,
                dateSelection: dateSelections[key] || null,
                eventStore,
                eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
                eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
                eventDrag: eventDrags[key] || null,
                eventResize: eventResizes[key] || null
            };
        }
        return splitProps;
    }
    _splitDateSpan(dateSpan) {
        let dateSpans = {};
        if (dateSpan) {
            let keys = this.getKeysForDateSpan(dateSpan);
            for (let key of keys)dateSpans[key] = dateSpan;
        }
        return dateSpans;
    }
    _getKeysForEventDefs(eventStore) {
        return mapHash(eventStore.defs, (eventDef)=>this.getKeysForEventDef(eventDef));
    }
    _splitEventStore(eventStore, defKeys) {
        let { defs, instances } = eventStore;
        let splitStores = {};
        for(let defId in defs)for (let key of defKeys[defId]){
            if (!splitStores[key]) splitStores[key] = createEmptyEventStore();
            splitStores[key].defs[defId] = defs[defId];
        }
        for(let instanceId in instances){
            let instance = instances[instanceId];
            for (let key of defKeys[instance.defId])if (splitStores[key]) splitStores[key].instances[instanceId] = instance;
        }
        return splitStores;
    }
    _splitIndividualUi(eventUiBases, defKeys) {
        let splitHashes = {};
        for(let defId in eventUiBases){
            if (defId) for (let key of defKeys[defId]){
                if (!splitHashes[key]) splitHashes[key] = {};
                splitHashes[key][defId] = eventUiBases[defId];
            }
        }
        return splitHashes;
    }
    _splitInteraction(interaction) {
        let splitStates = {};
        if (interaction) {
            let affectedStores = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents));
            // can't rely on defKeys because event data is mutated
            let mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);
            let mutatedStores = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);
            let populate = (key)=>{
                if (!splitStates[key]) splitStates[key] = {
                    affectedEvents: affectedStores[key] || EMPTY_EVENT_STORE,
                    mutatedEvents: mutatedStores[key] || EMPTY_EVENT_STORE,
                    isEvent: interaction.isEvent
                };
            };
            for(let key in affectedStores)populate(key);
            for(let key in mutatedStores)populate(key);
        }
        return splitStates;
    }
}
function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
    let baseParts = [];
    if (allUi) baseParts.push(allUi);
    if (eventUiForKey) baseParts.push(eventUiForKey);
    let stuff = {
        '': combineEventUis(baseParts)
    };
    if (individualUi) Object.assign(stuff, individualUi);
    return stuff;
}
function getDateMeta(date, todayRange, nowDate, dateProfile) {
    return {
        dow: date.getUTCDay(),
        isDisabled: Boolean(dateProfile && (!dateProfile.activeRange || !rangeContainsMarker(dateProfile.activeRange, date))),
        isOther: Boolean(dateProfile && !rangeContainsMarker(dateProfile.currentRange, date)),
        isToday: Boolean(todayRange && rangeContainsMarker(todayRange, date)),
        isPast: Boolean(nowDate ? date < nowDate : todayRange ? date < todayRange.start : false),
        isFuture: Boolean(nowDate ? date > nowDate : todayRange ? date >= todayRange.end : false)
    };
}
function getDayClassNames(meta, theme) {
    let classNames = [
        'fc-day',
        `fc-day-${DAY_IDS[meta.dow]}`
    ];
    if (meta.isDisabled) classNames.push('fc-day-disabled');
    else {
        if (meta.isToday) {
            classNames.push('fc-day-today');
            classNames.push(theme.getClass('today'));
        }
        if (meta.isPast) classNames.push('fc-day-past');
        if (meta.isFuture) classNames.push('fc-day-future');
        if (meta.isOther) classNames.push('fc-day-other');
    }
    return classNames;
}
function getSlotClassNames(meta, theme) {
    let classNames = [
        'fc-slot',
        `fc-slot-${DAY_IDS[meta.dow]}`
    ];
    if (meta.isDisabled) classNames.push('fc-slot-disabled');
    else {
        if (meta.isToday) {
            classNames.push('fc-slot-today');
            classNames.push(theme.getClass('today'));
        }
        if (meta.isPast) classNames.push('fc-slot-past');
        if (meta.isFuture) classNames.push('fc-slot-future');
    }
    return classNames;
}
const DAY_FORMAT = createFormatter({
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});
const WEEK_FORMAT = createFormatter({
    week: 'long'
});
function buildNavLinkAttrs(context, dateMarker, viewType = 'day', isTabbable = true) {
    const { dateEnv, options, calendarApi } = context;
    let dateStr = dateEnv.format(dateMarker, viewType === 'week' ? WEEK_FORMAT : DAY_FORMAT);
    if (options.navLinks) {
        let zonedDate = dateEnv.toDate(dateMarker);
        const handleInteraction = (ev)=>{
            let customAction = viewType === 'day' ? options.navLinkDayClick : viewType === 'week' ? options.navLinkWeekClick : null;
            if (typeof customAction === 'function') customAction.call(calendarApi, dateEnv.toDate(dateMarker), ev);
            else {
                if (typeof customAction === 'string') viewType = customAction;
                calendarApi.zoomTo(dateMarker, viewType);
            }
        };
        return Object.assign({
            title: formatWithOrdinals(options.navLinkHint, [
                dateStr,
                zonedDate
            ], dateStr),
            'data-navlink': ''
        }, isTabbable ? createAriaClickAttrs(handleInteraction) : {
            onClick: handleInteraction
        });
    }
    return {
        'aria-label': dateStr
    };
}
let _isRtlScrollbarOnLeft = null;
function getIsRtlScrollbarOnLeft() {
    if (_isRtlScrollbarOnLeft === null) _isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
    return _isRtlScrollbarOnLeft;
}
function computeIsRtlScrollbarOnLeft() {
    let outerEl = document.createElement('div');
    applyStyle(outerEl, {
        position: 'absolute',
        top: -1000,
        left: 0,
        border: 0,
        padding: 0,
        overflow: 'scroll',
        direction: 'rtl'
    });
    outerEl.innerHTML = '<div></div>';
    document.body.appendChild(outerEl);
    let innerEl = outerEl.firstChild;
    let res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
    removeElement(outerEl);
    return res;
}
let _scrollbarWidths;
function getScrollbarWidths() {
    if (!_scrollbarWidths) _scrollbarWidths = computeScrollbarWidths();
    return _scrollbarWidths;
}
function computeScrollbarWidths() {
    let el = document.createElement('div');
    el.style.overflow = 'scroll';
    el.style.position = 'absolute';
    el.style.top = '-9999px';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    let res = computeScrollbarWidthsForEl(el);
    document.body.removeChild(el);
    return res;
}
// WARNING: will include border
function computeScrollbarWidthsForEl(el) {
    return {
        x: el.offsetHeight - el.clientHeight,
        y: el.offsetWidth - el.clientWidth
    };
}
function computeEdges(el, getPadding = false) {
    let computedStyle = window.getComputedStyle(el);
    let borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
    let borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
    let borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
    let borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
    let badScrollbarWidths = computeScrollbarWidthsForEl(el); // includes border!
    let scrollbarLeftRight = badScrollbarWidths.y - borderLeft - borderRight;
    let scrollbarBottom = badScrollbarWidths.x - borderTop - borderBottom;
    let res = {
        borderLeft,
        borderRight,
        borderTop,
        borderBottom,
        scrollbarBottom,
        scrollbarLeft: 0,
        scrollbarRight: 0
    };
    if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') res.scrollbarLeft = scrollbarLeftRight;
    else res.scrollbarRight = scrollbarLeftRight;
    if (getPadding) {
        res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
        res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
        res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
        res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
    }
    return res;
}
function computeInnerRect(el, goWithinPadding = false, doFromWindowViewport) {
    let outerRect = doFromWindowViewport ? el.getBoundingClientRect() : computeRect(el);
    let edges = computeEdges(el, goWithinPadding);
    let res = {
        left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
        right: outerRect.right - edges.borderRight - edges.scrollbarRight,
        top: outerRect.top + edges.borderTop,
        bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
    };
    if (goWithinPadding) {
        res.left += edges.paddingLeft;
        res.right -= edges.paddingRight;
        res.top += edges.paddingTop;
        res.bottom -= edges.paddingBottom;
    }
    return res;
}
function computeRect(el) {
    let rect = el.getBoundingClientRect();
    return {
        left: rect.left + window.scrollX,
        top: rect.top + window.scrollY,
        right: rect.right + window.scrollX,
        bottom: rect.bottom + window.scrollY
    };
}
function computeClippedClientRect(el) {
    let clippingParents = getClippingParents(el);
    let rect = el.getBoundingClientRect();
    for (let clippingParent of clippingParents){
        let intersection = intersectRects(rect, clippingParent.getBoundingClientRect());
        if (intersection) rect = intersection;
        else return null;
    }
    return rect;
}
// does not return window
function getClippingParents(el) {
    let parents = [];
    while(el instanceof HTMLElement){
        let computedStyle = window.getComputedStyle(el);
        if (computedStyle.position === 'fixed') break;
        if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) parents.push(el);
        el = el.parentNode;
    }
    return parents;
}
/*
Records offset information for a set of elements, relative to an origin element.
Can record the left/right OR the top/bottom OR both.
Provides methods for querying the cache by position.
*/ class PositionCache {
    constructor(originEl, els, isHorizontal, isVertical){
        this.els = els;
        let originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left
        if (isHorizontal) this.buildElHorizontals(originClientRect.left);
        if (isVertical) this.buildElVerticals(originClientRect.top);
    }
    // Populates the left/right internal coordinate arrays
    buildElHorizontals(originClientLeft) {
        let lefts = [];
        let rights = [];
        for (let el of this.els){
            let rect = el.getBoundingClientRect();
            lefts.push(rect.left - originClientLeft);
            rights.push(rect.right - originClientLeft);
        }
        this.lefts = lefts;
        this.rights = rights;
    }
    // Populates the top/bottom internal coordinate arrays
    buildElVerticals(originClientTop) {
        let tops = [];
        let bottoms = [];
        for (let el of this.els){
            let rect = el.getBoundingClientRect();
            tops.push(rect.top - originClientTop);
            bottoms.push(rect.bottom - originClientTop);
        }
        this.tops = tops;
        this.bottoms = bottoms;
    }
    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
    // If no intersection is made, returns undefined.
    leftToIndex(leftPosition) {
        let { lefts, rights } = this;
        let len = lefts.length;
        let i;
        for(i = 0; i < len; i += 1){
            if (leftPosition >= lefts[i] && leftPosition < rights[i]) return i;
        }
        return undefined; // TODO: better
    }
    // Given a top offset (from document top), returns the index of the el that it vertically intersects.
    // If no intersection is made, returns undefined.
    topToIndex(topPosition) {
        let { tops, bottoms } = this;
        let len = tops.length;
        let i;
        for(i = 0; i < len; i += 1){
            if (topPosition >= tops[i] && topPosition < bottoms[i]) return i;
        }
        return undefined; // TODO: better
    }
    // Gets the width of the element at the given index
    getWidth(leftIndex) {
        return this.rights[leftIndex] - this.lefts[leftIndex];
    }
    // Gets the height of the element at the given index
    getHeight(topIndex) {
        return this.bottoms[topIndex] - this.tops[topIndex];
    }
    similarTo(otherCache) {
        return similarNumArrays(this.tops || [], otherCache.tops || []) && similarNumArrays(this.bottoms || [], otherCache.bottoms || []) && similarNumArrays(this.lefts || [], otherCache.lefts || []) && similarNumArrays(this.rights || [], otherCache.rights || []);
    }
}
function similarNumArrays(a, b) {
    const len = a.length;
    if (len !== b.length) return false;
    for(let i = 0; i < len; i++){
        if (Math.round(a[i]) !== Math.round(b[i])) return false;
    }
    return true;
}
/* eslint max-classes-per-file: "off" */ /*
An object for getting/setting scroll-related information for an element.
Internally, this is done very differently for window versus DOM element,
so this object serves as a common interface.
*/ class ScrollController {
    getMaxScrollTop() {
        return this.getScrollHeight() - this.getClientHeight();
    }
    getMaxScrollLeft() {
        return this.getScrollWidth() - this.getClientWidth();
    }
    canScrollVertically() {
        return this.getMaxScrollTop() > 0;
    }
    canScrollHorizontally() {
        return this.getMaxScrollLeft() > 0;
    }
    canScrollUp() {
        return this.getScrollTop() > 0;
    }
    canScrollDown() {
        return this.getScrollTop() < this.getMaxScrollTop();
    }
    canScrollLeft() {
        return this.getScrollLeft() > 0;
    }
    canScrollRight() {
        return this.getScrollLeft() < this.getMaxScrollLeft();
    }
}
class ElementScrollController extends ScrollController {
    constructor(el){
        super();
        this.el = el;
    }
    getScrollTop() {
        return this.el.scrollTop;
    }
    getScrollLeft() {
        return this.el.scrollLeft;
    }
    setScrollTop(top) {
        this.el.scrollTop = top;
    }
    setScrollLeft(left) {
        this.el.scrollLeft = left;
    }
    getScrollWidth() {
        return this.el.scrollWidth;
    }
    getScrollHeight() {
        return this.el.scrollHeight;
    }
    getClientHeight() {
        return this.el.clientHeight;
    }
    getClientWidth() {
        return this.el.clientWidth;
    }
}
class WindowScrollController extends ScrollController {
    getScrollTop() {
        return window.scrollY;
    }
    getScrollLeft() {
        return window.scrollX;
    }
    setScrollTop(n) {
        window.scroll(window.scrollX, n);
    }
    setScrollLeft(n) {
        window.scroll(n, window.scrollY);
    }
    getScrollWidth() {
        return document.documentElement.scrollWidth;
    }
    getScrollHeight() {
        return document.documentElement.scrollHeight;
    }
    getClientHeight() {
        return document.documentElement.clientHeight;
    }
    getClientWidth() {
        return document.documentElement.clientWidth;
    }
}
/*
an INTERACTABLE date component

PURPOSES:
- hook up to fg, fill, and mirror renderers
- interface for dragging and hits
*/ class DateComponent extends BaseComponent {
    constructor(){
        super(...arguments);
        this.uid = guid();
    }
    // Hit System
    // -----------------------------------------------------------------------------------------------------------------
    prepareHits() {}
    queryHit(positionLeft, positionTop, elWidth, elHeight) {
        return null; // this should be abstract
    }
    // Pointer Interaction Utils
    // -----------------------------------------------------------------------------------------------------------------
    isValidSegDownEl(el) {
        return !this.props.eventDrag && // HACK
        !this.props.eventResize && // HACK
        !elementClosest(el, '.fc-event-mirror');
    }
    isValidDateDownEl(el) {
        return !elementClosest(el, '.fc-event:not(.fc-bg-event)') && !elementClosest(el, '.fc-more-link') && // a "more.." link
        !elementClosest(el, 'a[data-navlink]') && // a clickable nav link
        !elementClosest(el, '.fc-popover'); // hack
    }
}
class NamedTimeZoneImpl {
    constructor(timeZoneName){
        this.timeZoneName = timeZoneName;
    }
}
class SegHierarchy {
    constructor(getEntryThickness = (entry)=>{
        // if no thickness known, assume 1 (if 0, so small it always fits)
        return entry.thickness || 1;
    }){
        this.getEntryThickness = getEntryThickness;
        // settings
        this.strictOrder = false;
        this.allowReslicing = false;
        this.maxCoord = -1; // -1 means no max
        this.maxStackCnt = -1; // -1 means no max
        this.levelCoords = []; // ordered
        this.entriesByLevel = []; // parallel with levelCoords
        this.stackCnts = {}; // TODO: use better technique!?
    }
    addSegs(inputs) {
        let hiddenEntries = [];
        for (let input of inputs)this.insertEntry(input, hiddenEntries);
        return hiddenEntries;
    }
    insertEntry(entry, hiddenEntries) {
        let insertion = this.findInsertion(entry);
        if (this.isInsertionValid(insertion, entry)) this.insertEntryAt(entry, insertion);
        else this.handleInvalidInsertion(insertion, entry, hiddenEntries);
    }
    isInsertionValid(insertion, entry) {
        return (this.maxCoord === -1 || insertion.levelCoord + this.getEntryThickness(entry) <= this.maxCoord) && (this.maxStackCnt === -1 || insertion.stackCnt < this.maxStackCnt);
    }
    handleInvalidInsertion(insertion, entry, hiddenEntries) {
        if (this.allowReslicing && insertion.touchingEntry) {
            const hiddenEntry = Object.assign(Object.assign({}, entry), {
                span: intersectSpans(entry.span, insertion.touchingEntry.span)
            });
            hiddenEntries.push(hiddenEntry);
            this.splitEntry(entry, insertion.touchingEntry, hiddenEntries);
        } else hiddenEntries.push(entry);
    }
    /*
    Does NOT add what hit the `barrier` into hiddenEntries. Should already be done.
    */ splitEntry(entry, barrier, hiddenEntries) {
        let entrySpan = entry.span;
        let barrierSpan = barrier.span;
        if (entrySpan.start < barrierSpan.start) this.insertEntry({
            index: entry.index,
            thickness: entry.thickness,
            span: {
                start: entrySpan.start,
                end: barrierSpan.start
            }
        }, hiddenEntries);
        if (entrySpan.end > barrierSpan.end) this.insertEntry({
            index: entry.index,
            thickness: entry.thickness,
            span: {
                start: barrierSpan.end,
                end: entrySpan.end
            }
        }, hiddenEntries);
    }
    insertEntryAt(entry, insertion) {
        let { entriesByLevel, levelCoords } = this;
        if (insertion.lateral === -1) {
            // create a new level
            insertAt(levelCoords, insertion.level, insertion.levelCoord);
            insertAt(entriesByLevel, insertion.level, [
                entry
            ]);
        } else // insert into existing level
        insertAt(entriesByLevel[insertion.level], insertion.lateral, entry);
        this.stackCnts[buildEntryKey(entry)] = insertion.stackCnt;
    }
    /*
    does not care about limits
    */ findInsertion(newEntry) {
        let { levelCoords, entriesByLevel, strictOrder, stackCnts } = this;
        let levelCnt = levelCoords.length;
        let candidateCoord = 0;
        let touchingLevel = -1;
        let touchingLateral = -1;
        let touchingEntry = null;
        let stackCnt = 0;
        for(let trackingLevel = 0; trackingLevel < levelCnt; trackingLevel += 1){
            const trackingCoord = levelCoords[trackingLevel];
            // if the current level is past the placed entry, we have found a good empty space and can stop.
            // if strictOrder, keep finding more lateral intersections.
            if (!strictOrder && trackingCoord >= candidateCoord + this.getEntryThickness(newEntry)) break;
            let trackingEntries = entriesByLevel[trackingLevel];
            let trackingEntry;
            let searchRes = binarySearch(trackingEntries, newEntry.span.start, getEntrySpanEnd); // find first entry after newEntry's end
            let lateralIndex = searchRes[0] + searchRes[1]; // if exact match (which doesn't collide), go to next one
            while((trackingEntry = trackingEntries[lateralIndex]) && // but not past the whole entry list
            trackingEntry.span.start < newEntry.span.end // and not entirely past newEntry
            ){
                let trackingEntryBottom = trackingCoord + this.getEntryThickness(trackingEntry);
                // intersects into the top of the candidate?
                if (trackingEntryBottom > candidateCoord) {
                    candidateCoord = trackingEntryBottom;
                    touchingEntry = trackingEntry;
                    touchingLevel = trackingLevel;
                    touchingLateral = lateralIndex;
                }
                // butts up against top of candidate? (will happen if just intersected as well)
                if (trackingEntryBottom === candidateCoord) // accumulate the highest possible stackCnt of the trackingEntries that butt up
                stackCnt = Math.max(stackCnt, stackCnts[buildEntryKey(trackingEntry)] + 1);
                lateralIndex += 1;
            }
        }
        // the destination level will be after touchingEntry's level. find it
        let destLevel = 0;
        if (touchingEntry) {
            destLevel = touchingLevel + 1;
            while(destLevel < levelCnt && levelCoords[destLevel] < candidateCoord)destLevel += 1;
        }
        // if adding to an existing level, find where to insert
        let destLateral = -1;
        if (destLevel < levelCnt && levelCoords[destLevel] === candidateCoord) destLateral = binarySearch(entriesByLevel[destLevel], newEntry.span.end, getEntrySpanEnd)[0];
        return {
            touchingLevel,
            touchingLateral,
            touchingEntry,
            stackCnt,
            levelCoord: candidateCoord,
            level: destLevel,
            lateral: destLateral
        };
    }
    // sorted by levelCoord (lowest to highest)
    toRects() {
        let { entriesByLevel, levelCoords } = this;
        let levelCnt = entriesByLevel.length;
        let rects = [];
        for(let level = 0; level < levelCnt; level += 1){
            let entries = entriesByLevel[level];
            let levelCoord = levelCoords[level];
            for (let entry of entries)rects.push(Object.assign(Object.assign({}, entry), {
                thickness: this.getEntryThickness(entry),
                levelCoord
            }));
        }
        return rects;
    }
}
function getEntrySpanEnd(entry) {
    return entry.span.end;
}
function buildEntryKey(entry) {
    return entry.index + ':' + entry.span.start;
}
// returns groups with entries sorted by input order
function groupIntersectingEntries(entries) {
    let merges = [];
    for (let entry of entries){
        let filteredMerges = [];
        let hungryMerge = {
            span: entry.span,
            entries: [
                entry
            ]
        };
        for (let merge of merges)if (intersectSpans(merge.span, hungryMerge.span)) hungryMerge = {
            entries: merge.entries.concat(hungryMerge.entries),
            span: joinSpans(merge.span, hungryMerge.span)
        };
        else filteredMerges.push(merge);
        filteredMerges.push(hungryMerge);
        merges = filteredMerges;
    }
    return merges;
}
function joinSpans(span0, span1) {
    return {
        start: Math.min(span0.start, span1.start),
        end: Math.max(span0.end, span1.end)
    };
}
function intersectSpans(span0, span1) {
    let start = Math.max(span0.start, span1.start);
    let end = Math.min(span0.end, span1.end);
    if (start < end) return {
        start,
        end
    };
    return null;
}
// general util
// ---------------------------------------------------------------------------------------------------------------------
function insertAt(arr, index, item) {
    arr.splice(index, 0, item);
}
function binarySearch(a, searchVal, getItemVal) {
    let startIndex = 0;
    let endIndex = a.length; // exclusive
    if (!endIndex || searchVal < getItemVal(a[startIndex])) return [
        0,
        0
    ];
    if (searchVal > getItemVal(a[endIndex - 1])) return [
        endIndex,
        0
    ];
    while(startIndex < endIndex){
        let middleIndex = Math.floor(startIndex + (endIndex - startIndex) / 2);
        let middleVal = getItemVal(a[middleIndex]);
        if (searchVal < middleVal) endIndex = middleIndex;
        else if (searchVal > middleVal) startIndex = middleIndex + 1;
        else return [
            middleIndex,
            1
        ];
    }
    return [
        startIndex,
        0
    ];
}
/*
An abstraction for a dragging interaction originating on an event.
Does higher-level things than PointerDragger, such as possibly:
- a "mirror" that moves with the pointer
- a minimum number of pixels or other criteria for a true drag to begin

subclasses must emit:
- pointerdown
- dragstart
- dragmove
- pointerup
- dragend
*/ class ElementDragging {
    constructor(el, selector){
        this.emitter = new Emitter();
    }
    destroy() {}
    setMirrorIsVisible(bool) {
    // optional if subclass doesn't want to support a mirror
    }
    setMirrorNeedsRevert(bool) {
    // optional if subclass doesn't want to support a mirror
    }
    setAutoScrollEnabled(bool) {
    // optional
    }
}
// TODO: get rid of this in favor of options system,
// tho it's really easy to access this globally rather than pass thru options.
const config = {};
/*
Information about what will happen when an external element is dragged-and-dropped
onto a calendar. Contains information for creating an event.
*/ const DRAG_META_REFINERS = {
    startTime: createDuration,
    duration: createDuration,
    create: Boolean,
    sourceId: String
};
function parseDragMeta(raw) {
    let { refined, extra } = refineProps(raw, DRAG_META_REFINERS);
    return {
        startTime: refined.startTime || null,
        duration: refined.duration || null,
        create: refined.create != null ? refined.create : true,
        sourceId: refined.sourceId,
        leftoverProps: extra
    };
}
// Computes a default column header formatting string if `colFormat` is not explicitly defined
function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
    // if more than one week row, or if there are a lot of columns with not much space,
    // put just the day numbers will be in each cell
    if (!datesRepDistinctDays || dayCnt > 10) return createFormatter({
        weekday: 'short'
    }); // "Sat"
    if (dayCnt > 1) return createFormatter({
        weekday: 'short',
        month: 'numeric',
        day: 'numeric',
        omitCommas: true
    }); // "Sat 11/12"
    return createFormatter({
        weekday: 'long'
    }); // "Saturday"
}
const CLASS_NAME = 'fc-col-header-cell'; // do the cushion too? no
function renderInner$1(renderProps) {
    return renderProps.text;
}
// BAD name for this class now. used in the Header
class TableDateCell extends BaseComponent {
    render() {
        let { dateEnv, options, theme, viewApi } = this.context;
        let { props } = this;
        let { date, dateProfile } = props;
        let dayMeta = getDateMeta(date, props.todayRange, null, dateProfile);
        let classNames = [
            CLASS_NAME
        ].concat(getDayClassNames(dayMeta, theme));
        let text = dateEnv.format(date, props.dayHeaderFormat);
        // if colCnt is 1, we are already in a day-view and don't need a navlink
        let navLinkAttrs = !dayMeta.isDisabled && props.colCnt > 1 ? buildNavLinkAttrs(this.context, date) : {};
        let publicDate = dateEnv.toDate(date);
        // workaround for Luxon (and maybe moment) returning prior-days when start-of-day
        // in DST gap: https://github.com/fullcalendar/fullcalendar/issues/7633
        if (dateEnv.namedTimeZoneImpl) publicDate = addMs(publicDate, 3600000); // add an hour
        let renderProps = Object.assign(Object.assign(Object.assign({
            date: publicDate,
            view: viewApi
        }, props.extraRenderProps), {
            text
        }), dayMeta);
        return (0, _preact.createElement)(ContentContainer, {
            elTag: "th",
            elClasses: classNames,
            elAttrs: Object.assign({
                role: 'columnheader',
                colSpan: props.colSpan,
                'data-date': !dayMeta.isDisabled ? formatDayString(date) : undefined
            }, props.extraDataAttrs),
            renderProps: renderProps,
            generatorName: "dayHeaderContent",
            customGenerator: options.dayHeaderContent,
            defaultGenerator: renderInner$1,
            classNameGenerator: options.dayHeaderClassNames,
            didMount: options.dayHeaderDidMount,
            willUnmount: options.dayHeaderWillUnmount
        }, (InnerContainer)=>(0, _preact.createElement)("div", {
                className: "fc-scrollgrid-sync-inner"
            }, !dayMeta.isDisabled && (0, _preact.createElement)(InnerContainer, {
                elTag: "a",
                elAttrs: navLinkAttrs,
                elClasses: [
                    'fc-col-header-cell-cushion',
                    props.isSticky && 'fc-sticky'
                ]
            })));
    }
}
const WEEKDAY_FORMAT = createFormatter({
    weekday: 'long'
});
class TableDowCell extends BaseComponent {
    render() {
        let { props } = this;
        let { dateEnv, theme, viewApi, options } = this.context;
        let date = addDays(new Date(259200000), props.dow); // start with Sun, 04 Jan 1970 00:00:00 GMT
        let dateMeta = {
            dow: props.dow,
            isDisabled: false,
            isFuture: false,
            isPast: false,
            isToday: false,
            isOther: false
        };
        let text = dateEnv.format(date, props.dayHeaderFormat);
        let renderProps = Object.assign(Object.assign(Object.assign(Object.assign({
            date
        }, dateMeta), {
            view: viewApi
        }), props.extraRenderProps), {
            text
        });
        return (0, _preact.createElement)(ContentContainer, {
            elTag: "th",
            elClasses: [
                CLASS_NAME,
                ...getDayClassNames(dateMeta, theme),
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign({
                role: 'columnheader',
                colSpan: props.colSpan
            }, props.extraDataAttrs),
            renderProps: renderProps,
            generatorName: "dayHeaderContent",
            customGenerator: options.dayHeaderContent,
            defaultGenerator: renderInner$1,
            classNameGenerator: options.dayHeaderClassNames,
            didMount: options.dayHeaderDidMount,
            willUnmount: options.dayHeaderWillUnmount
        }, (InnerContent)=>(0, _preact.createElement)("div", {
                className: "fc-scrollgrid-sync-inner"
            }, (0, _preact.createElement)(InnerContent, {
                elTag: "a",
                elClasses: [
                    'fc-col-header-cell-cushion',
                    props.isSticky && 'fc-sticky'
                ],
                elAttrs: {
                    'aria-label': dateEnv.format(date, WEEKDAY_FORMAT)
                }
            })));
    }
}
class DayHeader extends BaseComponent {
    constructor(){
        super(...arguments);
        this.createDayHeaderFormatter = memoize(createDayHeaderFormatter);
    }
    render() {
        let { context } = this;
        let { dates, dateProfile, datesRepDistinctDays, renderIntro } = this.props;
        let dayHeaderFormat = this.createDayHeaderFormatter(context.options.dayHeaderFormat, datesRepDistinctDays, dates.length);
        return (0, _preact.createElement)(NowTimer, {
            unit: "day"
        }, (nowDate, todayRange)=>(0, _preact.createElement)("tr", {
                role: "row"
            }, renderIntro && renderIntro('day'), dates.map((date)=>datesRepDistinctDays ? (0, _preact.createElement)(TableDateCell, {
                    key: date.toISOString(),
                    date: date,
                    dateProfile: dateProfile,
                    todayRange: todayRange,
                    colCnt: dates.length,
                    dayHeaderFormat: dayHeaderFormat
                }) : (0, _preact.createElement)(TableDowCell, {
                    key: date.getUTCDay(),
                    dow: date.getUTCDay(),
                    dayHeaderFormat: dayHeaderFormat
                }))));
    }
}
function createDayHeaderFormatter(explicitFormat, datesRepDistinctDays, dateCnt) {
    return explicitFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dateCnt);
}
class DaySeriesModel {
    constructor(range, dateProfileGenerator){
        let date = range.start;
        let { end } = range;
        let indices = [];
        let dates = [];
        let dayIndex = -1;
        while(date < end){
            if (dateProfileGenerator.isHiddenDay(date)) indices.push(dayIndex + 0.5); // mark that it's between indices
            else {
                dayIndex += 1;
                indices.push(dayIndex);
                dates.push(date);
            }
            date = addDays(date, 1);
        }
        this.dates = dates;
        this.indices = indices;
        this.cnt = dates.length;
    }
    sliceRange(range) {
        let firstIndex = this.getDateDayIndex(range.start); // inclusive first index
        let lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index
        let clippedFirstIndex = Math.max(0, firstIndex);
        let clippedLastIndex = Math.min(this.cnt - 1, lastIndex);
        // deal with in-between indices
        clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell
        clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell
        if (clippedFirstIndex <= clippedLastIndex) return {
            firstIndex: clippedFirstIndex,
            lastIndex: clippedLastIndex,
            isStart: firstIndex === clippedFirstIndex,
            isEnd: lastIndex === clippedLastIndex
        };
        return null;
    }
    // Given a date, returns its chronolocial cell-index from the first cell of the grid.
    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
    // If before the first offset, returns a negative number.
    // If after the last offset, returns an offset past the last cell offset.
    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
    getDateDayIndex(date) {
        let { indices } = this;
        let dayOffset = Math.floor(diffDays(this.dates[0], date));
        if (dayOffset < 0) return indices[0] - 1;
        if (dayOffset >= indices.length) return indices[indices.length - 1] + 1;
        return indices[dayOffset];
    }
}
class DayTableModel {
    constructor(daySeries, breakOnWeeks){
        let { dates } = daySeries;
        let daysPerRow;
        let firstDay;
        let rowCnt;
        if (breakOnWeeks) {
            // count columns until the day-of-week repeats
            firstDay = dates[0].getUTCDay();
            for(daysPerRow = 1; daysPerRow < dates.length; daysPerRow += 1){
                if (dates[daysPerRow].getUTCDay() === firstDay) break;
            }
            rowCnt = Math.ceil(dates.length / daysPerRow);
        } else {
            rowCnt = 1;
            daysPerRow = dates.length;
        }
        this.rowCnt = rowCnt;
        this.colCnt = daysPerRow;
        this.daySeries = daySeries;
        this.cells = this.buildCells();
        this.headerDates = this.buildHeaderDates();
    }
    buildCells() {
        let rows = [];
        for(let row = 0; row < this.rowCnt; row += 1){
            let cells = [];
            for(let col = 0; col < this.colCnt; col += 1)cells.push(this.buildCell(row, col));
            rows.push(cells);
        }
        return rows;
    }
    buildCell(row, col) {
        let date = this.daySeries.dates[row * this.colCnt + col];
        return {
            key: date.toISOString(),
            date
        };
    }
    buildHeaderDates() {
        let dates = [];
        for(let col = 0; col < this.colCnt; col += 1)dates.push(this.cells[0][col].date);
        return dates;
    }
    sliceRange(range) {
        let { colCnt } = this;
        let seriesSeg = this.daySeries.sliceRange(range);
        let segs = [];
        if (seriesSeg) {
            let { firstIndex, lastIndex } = seriesSeg;
            let index = firstIndex;
            while(index <= lastIndex){
                let row = Math.floor(index / colCnt);
                let nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
                segs.push({
                    row,
                    firstCol: index % colCnt,
                    lastCol: (nextIndex - 1) % colCnt,
                    isStart: seriesSeg.isStart && index === firstIndex,
                    isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
                });
                index = nextIndex;
            }
        }
        return segs;
    }
}
class Slicer {
    constructor(){
        this.sliceBusinessHours = memoize(this._sliceBusinessHours);
        this.sliceDateSelection = memoize(this._sliceDateSpan);
        this.sliceEventStore = memoize(this._sliceEventStore);
        this.sliceEventDrag = memoize(this._sliceInteraction);
        this.sliceEventResize = memoize(this._sliceInteraction);
        this.forceDayIfListItem = false; // hack
    }
    sliceProps(props, dateProfile, nextDayThreshold, context, ...extraArgs) {
        let { eventUiBases } = props;
        let eventSegs = this.sliceEventStore(props.eventStore, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs);
        return {
            dateSelectionSegs: this.sliceDateSelection(props.dateSelection, dateProfile, nextDayThreshold, eventUiBases, context, ...extraArgs),
            businessHourSegs: this.sliceBusinessHours(props.businessHours, dateProfile, nextDayThreshold, context, ...extraArgs),
            fgEventSegs: eventSegs.fg,
            bgEventSegs: eventSegs.bg,
            eventDrag: this.sliceEventDrag(props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs),
            eventResize: this.sliceEventResize(props.eventResize, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs),
            eventSelection: props.eventSelection
        }; // TODO: give interactionSegs?
    }
    sliceNowDate(date, dateProfile, nextDayThreshold, context, ...extraArgs) {
        return this._sliceDateSpan({
            range: {
                start: date,
                end: addMs(date, 1)
            },
            allDay: false
        }, dateProfile, nextDayThreshold, {}, context, ...extraArgs);
    }
    _sliceBusinessHours(businessHours, dateProfile, nextDayThreshold, context, ...extraArgs) {
        if (!businessHours) return [];
        return this._sliceEventStore(expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), context), {}, dateProfile, nextDayThreshold, ...extraArgs).bg;
    }
    _sliceEventStore(eventStore, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs) {
        if (eventStore) {
            let rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
            return {
                bg: this.sliceEventRanges(rangeRes.bg, extraArgs),
                fg: this.sliceEventRanges(rangeRes.fg, extraArgs)
            };
        }
        return {
            bg: [],
            fg: []
        };
    }
    _sliceInteraction(interaction, eventUiBases, dateProfile, nextDayThreshold, ...extraArgs) {
        if (!interaction) return null;
        let rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
        return {
            segs: this.sliceEventRanges(rangeRes.fg, extraArgs),
            affectedInstances: interaction.affectedEvents.instances,
            isEvent: interaction.isEvent
        };
    }
    _sliceDateSpan(dateSpan, dateProfile, nextDayThreshold, eventUiBases, context, ...extraArgs) {
        if (!dateSpan) return [];
        let activeRange = computeActiveRange(dateProfile, Boolean(nextDayThreshold));
        let activeDateSpanRange = intersectRanges(dateSpan.range, activeRange);
        if (activeDateSpanRange) {
            dateSpan = Object.assign(Object.assign({}, dateSpan), {
                range: activeDateSpanRange
            });
            let eventRange = fabricateEventRange(dateSpan, eventUiBases, context);
            let segs = this.sliceRange(dateSpan.range, ...extraArgs);
            for (let seg of segs)seg.eventRange = eventRange;
            return segs;
        }
        return [];
    }
    /*
    "complete" seg means it has component and eventRange
    */ sliceEventRanges(eventRanges, extraArgs) {
        let segs = [];
        for (let eventRange of eventRanges)segs.push(...this.sliceEventRange(eventRange, extraArgs));
        return segs;
    }
    /*
    "complete" seg means it has component and eventRange
    */ sliceEventRange(eventRange, extraArgs) {
        let dateRange = eventRange.range;
        // hack to make multi-day events that are being force-displayed as list-items to take up only one day
        if (this.forceDayIfListItem && eventRange.ui.display === 'list-item') dateRange = {
            start: dateRange.start,
            end: addDays(dateRange.start, 1)
        };
        let segs = this.sliceRange(dateRange, ...extraArgs);
        for (let seg of segs){
            seg.eventRange = eventRange;
            seg.isStart = eventRange.isStart && seg.isStart;
            seg.isEnd = eventRange.isEnd && seg.isEnd;
        }
        return segs;
    }
}
/*
for incorporating slotMinTime/slotMaxTime if appropriate
TODO: should be part of DateProfile!
TimelineDateProfile already does this btw
*/ function computeActiveRange(dateProfile, isComponentAllDay) {
    let range = dateProfile.activeRange;
    if (isComponentAllDay) return range;
    return {
        start: addMs(range.start, dateProfile.slotMinTime.milliseconds),
        end: addMs(range.end, dateProfile.slotMaxTime.milliseconds - 864e5)
    };
}
// high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionValid(interaction, dateProfile, context) {
    let { instances } = interaction.mutatedEvents;
    for(let instanceId in instances){
        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) return false;
    }
    return isNewPropsValid({
        eventDrag: interaction
    }, context); // HACK: the eventDrag props is used for ALL interactions
}
function isDateSelectionValid(dateSelection, dateProfile, context) {
    if (!rangeContainsRange(dateProfile.validRange, dateSelection.range)) return false;
    return isNewPropsValid({
        dateSelection
    }, context);
}
function isNewPropsValid(newProps, context) {
    let calendarState = context.getCurrentData();
    let props = Object.assign({
        businessHours: calendarState.businessHours,
        dateSelection: '',
        eventStore: calendarState.eventStore,
        eventUiBases: calendarState.eventUiBases,
        eventSelection: '',
        eventDrag: null,
        eventResize: null
    }, newProps);
    return (context.pluginHooks.isPropsValid || isPropsValid)(props, context);
}
function isPropsValid(state, context, dateSpanMeta = {}, filterConfig) {
    if (state.eventDrag && !isInteractionPropsValid(state, context, dateSpanMeta, filterConfig)) return false;
    if (state.dateSelection && !isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig)) return false;
    return true;
}
// Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionPropsValid(state, context, dateSpanMeta, filterConfig) {
    let currentState = context.getCurrentData();
    let interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions
    let subjectEventStore = interaction.mutatedEvents;
    let subjectDefs = subjectEventStore.defs;
    let subjectInstances = subjectEventStore.instances;
    let subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
        '': currentState.selectionConfig
    });
    if (filterConfig) subjectConfigs = mapHash(subjectConfigs, filterConfig);
    // exclude the subject events. TODO: exclude defs too?
    let otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances);
    let otherDefs = otherEventStore.defs;
    let otherInstances = otherEventStore.instances;
    let otherConfigs = compileEventUis(otherDefs, state.eventUiBases);
    for(let subjectInstanceId in subjectInstances){
        let subjectInstance = subjectInstances[subjectInstanceId];
        let subjectRange = subjectInstance.range;
        let subjectConfig = subjectConfigs[subjectInstance.defId];
        let subjectDef = subjectDefs[subjectInstance.defId];
        // constraint
        if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, context)) return false;
        // overlap
        let { eventOverlap } = context.options;
        let eventOverlapFunc = typeof eventOverlap === 'function' ? eventOverlap : null;
        for(let otherInstanceId in otherInstances){
            let otherInstance = otherInstances[otherInstanceId];
            // intersect! evaluate
            if (rangesIntersect(subjectRange, otherInstance.range)) {
                let otherOverlap = otherConfigs[otherInstance.defId].overlap;
                // consider the other event's overlap. only do this if the subject event is a "real" event
                if (otherOverlap === false && interaction.isEvent) return false;
                if (subjectConfig.overlap === false) return false;
                if (eventOverlapFunc && !eventOverlapFunc(new EventImpl(context, otherDefs[otherInstance.defId], otherInstance), new EventImpl(context, subjectDef, subjectInstance))) return false;
            }
        }
        // allow (a function)
        let calendarEventStore = currentState.eventStore; // need global-to-calendar, not local to component (splittable)state
        for (let subjectAllow of subjectConfig.allows){
            let subjectDateSpan = Object.assign(Object.assign({}, dateSpanMeta), {
                range: subjectInstance.range,
                allDay: subjectDef.allDay
            });
            let origDef = calendarEventStore.defs[subjectDef.defId];
            let origInstance = calendarEventStore.instances[subjectInstanceId];
            let eventApi;
            if (origDef) eventApi = new EventImpl(context, origDef, origInstance);
            else eventApi = new EventImpl(context, subjectDef); // no instance, because had no dates
            if (!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan, context), eventApi)) return false;
        }
    }
    return true;
}
// Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------
function isDateSelectionPropsValid(state, context, dateSpanMeta, filterConfig) {
    let relevantEventStore = state.eventStore;
    let relevantDefs = relevantEventStore.defs;
    let relevantInstances = relevantEventStore.instances;
    let selection = state.dateSelection;
    let selectionRange = selection.range;
    let { selectionConfig } = context.getCurrentData();
    if (filterConfig) selectionConfig = filterConfig(selectionConfig);
    // constraint
    if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, context)) return false;
    // overlap
    let { selectOverlap } = context.options;
    let selectOverlapFunc = typeof selectOverlap === 'function' ? selectOverlap : null;
    for(let relevantInstanceId in relevantInstances){
        let relevantInstance = relevantInstances[relevantInstanceId];
        // intersect! evaluate
        if (rangesIntersect(selectionRange, relevantInstance.range)) {
            if (selectionConfig.overlap === false) return false;
            if (selectOverlapFunc && !selectOverlapFunc(new EventImpl(context, relevantDefs[relevantInstance.defId], relevantInstance), null)) return false;
        }
    }
    // allow (a function)
    for (let selectionAllow of selectionConfig.allows){
        let fullDateSpan = Object.assign(Object.assign({}, dateSpanMeta), selection);
        if (!selectionAllow(buildDateSpanApiWithContext(fullDateSpan, context), null)) return false;
    }
    return true;
}
// Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------
function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, context) {
    for (let constraint of constraints){
        if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context), subjectRange)) return false;
    }
    return true;
}
function constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, context) {
    if (constraint === 'businessHours') return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, context));
    if (typeof constraint === 'string') return eventStoreToRanges(filterEventStoreDefs(otherEventStore, (eventDef)=>eventDef.groupId === constraint));
    if (typeof constraint === 'object' && constraint) return eventStoreToRanges(expandRecurring(constraint, subjectRange, context));
    return []; // if it's false
}
// TODO: move to event-store file?
function eventStoreToRanges(eventStore) {
    let { instances } = eventStore;
    let ranges = [];
    for(let instanceId in instances)ranges.push(instances[instanceId].range);
    return ranges;
}
// TODO: move to geom file?
function anyRangesContainRange(outerRanges, innerRange) {
    for (let outerRange of outerRanges){
        if (rangeContainsRange(outerRange, innerRange)) return true;
    }
    return false;
}
const VISIBLE_HIDDEN_RE = /^(visible|hidden)$/;
class Scroller extends BaseComponent {
    constructor(){
        super(...arguments);
        this.handleEl = (el)=>{
            this.el = el;
            setRef(this.props.elRef, el);
        };
    }
    render() {
        let { props } = this;
        let { liquid, liquidIsAbsolute } = props;
        let isAbsolute = liquid && liquidIsAbsolute;
        let className = [
            'fc-scroller'
        ];
        if (liquid) {
            if (liquidIsAbsolute) className.push('fc-scroller-liquid-absolute');
            else className.push('fc-scroller-liquid');
        }
        return (0, _preact.createElement)("div", {
            ref: this.handleEl,
            className: className.join(' '),
            style: {
                overflowX: props.overflowX,
                overflowY: props.overflowY,
                left: isAbsolute && -(props.overcomeLeft || 0) || '',
                right: isAbsolute && -(props.overcomeRight || 0) || '',
                bottom: isAbsolute && -(props.overcomeBottom || 0) || '',
                marginLeft: !isAbsolute && -(props.overcomeLeft || 0) || '',
                marginRight: !isAbsolute && -(props.overcomeRight || 0) || '',
                marginBottom: !isAbsolute && -(props.overcomeBottom || 0) || '',
                maxHeight: props.maxHeight || ''
            }
        }, props.children);
    }
    needsXScrolling() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) return false;
        // testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.
        // much more reliable to see if children are taller than the scroller, even tho doesn't account for
        // inner-child margins and absolute positioning
        let { el } = this;
        let realClientWidth = this.el.getBoundingClientRect().width - this.getYScrollbarWidth();
        let { children } = el;
        for(let i = 0; i < children.length; i += 1){
            let childEl = children[i];
            if (childEl.getBoundingClientRect().width > realClientWidth) return true;
        }
        return false;
    }
    needsYScrolling() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) return false;
        // testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.
        // much more reliable to see if children are taller than the scroller, even tho doesn't account for
        // inner-child margins and absolute positioning
        let { el } = this;
        let realClientHeight = this.el.getBoundingClientRect().height - this.getXScrollbarWidth();
        let { children } = el;
        for(let i = 0; i < children.length; i += 1){
            let childEl = children[i];
            if (childEl.getBoundingClientRect().height > realClientHeight) return true;
        }
        return false;
    }
    getXScrollbarWidth() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowX)) return 0;
        return this.el.offsetHeight - this.el.clientHeight; // only works because we guarantee no borders. TODO: add to CSS with important?
    }
    getYScrollbarWidth() {
        if (VISIBLE_HIDDEN_RE.test(this.props.overflowY)) return 0;
        return this.el.offsetWidth - this.el.clientWidth; // only works because we guarantee no borders. TODO: add to CSS with important?
    }
}
/*
TODO: somehow infer OtherArgs from masterCallback?
TODO: infer RefType from masterCallback if provided
*/ class RefMap {
    constructor(masterCallback){
        this.masterCallback = masterCallback;
        this.currentMap = {};
        this.depths = {};
        this.callbackMap = {};
        this.handleValue = (val, key)=>{
            let { depths, currentMap } = this;
            let removed = false;
            let added = false;
            if (val !== null) {
                // for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore
                removed = key in currentMap;
                currentMap[key] = val;
                depths[key] = (depths[key] || 0) + 1;
                added = true;
            } else {
                depths[key] -= 1;
                if (!depths[key]) {
                    delete currentMap[key];
                    delete this.callbackMap[key];
                    removed = true;
                }
            }
            if (this.masterCallback) {
                if (removed) this.masterCallback(null, String(key));
                if (added) this.masterCallback(val, String(key));
            }
        };
    }
    createRef(key) {
        let refCallback = this.callbackMap[key];
        if (!refCallback) refCallback = this.callbackMap[key] = (val)=>{
            this.handleValue(val, String(key));
        };
        return refCallback;
    }
    // TODO: check callers that don't care about order. should use getAll instead
    // NOTE: this method has become less valuable now that we are encouraged to map order by some other index
    // TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and "collect"
    collect(startIndex, endIndex, step) {
        return collectFromHash(this.currentMap, startIndex, endIndex, step);
    }
    getAll() {
        return hashValuesToArray(this.currentMap);
    }
}
function computeShrinkWidth(chunkEls) {
    let shrinkCells = findElements(chunkEls, '.fc-scrollgrid-shrink');
    let largestWidth = 0;
    for (let shrinkCell of shrinkCells)largestWidth = Math.max(largestWidth, computeSmallestCellWidth(shrinkCell));
    return Math.ceil(largestWidth); // <table> elements work best with integers. round up to ensure contents fits
}
function getSectionHasLiquidHeight(props, sectionConfig) {
    return props.liquid && sectionConfig.liquid; // does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)
}
function getAllowYScrolling(props, sectionConfig) {
    return sectionConfig.maxHeight != null || // if its possible for the height to max out, we might need scrollbars
    getSectionHasLiquidHeight(props, sectionConfig); // if the section is liquid height, it might condense enough to require scrollbars
}
// TODO: ONLY use `arg`. force out internal function to use same API
function renderChunkContent(sectionConfig, chunkConfig, arg, isHeader) {
    let { expandRows } = arg;
    let content = typeof chunkConfig.content === 'function' ? chunkConfig.content(arg) : (0, _preact.createElement)('table', {
        role: 'presentation',
        className: [
            chunkConfig.tableClassName,
            sectionConfig.syncRowHeights ? 'fc-scrollgrid-sync-table' : ''
        ].join(' '),
        style: {
            minWidth: arg.tableMinWidth,
            width: arg.clientWidth,
            height: expandRows ? arg.clientHeight : ''
        }
    }, arg.tableColGroupNode, (0, _preact.createElement)(isHeader ? 'thead' : 'tbody', {
        role: 'presentation'
    }, typeof chunkConfig.rowContent === 'function' ? chunkConfig.rowContent(arg) : chunkConfig.rowContent));
    return content;
}
function isColPropsEqual(cols0, cols1) {
    return isArraysEqual(cols0, cols1, isPropsEqual);
}
function renderMicroColGroup(cols, shrinkWidth) {
    let colNodes = [];
    /*
    for ColProps with spans, it would have been great to make a single <col span="">
    HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.
    SOLUTION: making individual <col> elements makes Chrome behave.
    */ for (let colProps of cols){
        let span = colProps.span || 1;
        for(let i = 0; i < span; i += 1)colNodes.push((0, _preact.createElement)("col", {
            style: {
                width: colProps.width === 'shrink' ? sanitizeShrinkWidth(shrinkWidth) : colProps.width || '',
                minWidth: colProps.minWidth || ''
            }
        }));
    }
    return (0, _preact.createElement)('colgroup', {}, ...colNodes);
}
function sanitizeShrinkWidth(shrinkWidth) {
    /* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth
    4 accounts for 2 2-pixel borders. TODO: better solution? */ return shrinkWidth == null ? 4 : shrinkWidth;
}
function hasShrinkWidth(cols) {
    for (let col of cols){
        if (col.width === 'shrink') return true;
    }
    return false;
}
function getScrollGridClassNames(liquid, context) {
    let classNames = [
        'fc-scrollgrid',
        context.theme.getClass('table')
    ];
    if (liquid) classNames.push('fc-scrollgrid-liquid');
    return classNames;
}
function getSectionClassNames(sectionConfig, wholeTableVGrow) {
    let classNames = [
        'fc-scrollgrid-section',
        `fc-scrollgrid-section-${sectionConfig.type}`,
        sectionConfig.className
    ];
    if (wholeTableVGrow && sectionConfig.liquid && sectionConfig.maxHeight == null) classNames.push('fc-scrollgrid-section-liquid');
    if (sectionConfig.isSticky) classNames.push('fc-scrollgrid-section-sticky');
    return classNames;
}
function renderScrollShim(arg) {
    return (0, _preact.createElement)("div", {
        className: "fc-scrollgrid-sticky-shim",
        style: {
            width: arg.clientWidth,
            minWidth: arg.tableMinWidth
        }
    });
}
function getStickyHeaderDates(options) {
    let { stickyHeaderDates } = options;
    if (stickyHeaderDates == null || stickyHeaderDates === 'auto') stickyHeaderDates = options.height === 'auto' || options.viewHeight === 'auto';
    return stickyHeaderDates;
}
function getStickyFooterScrollbar(options) {
    let { stickyFooterScrollbar } = options;
    if (stickyFooterScrollbar == null || stickyFooterScrollbar === 'auto') stickyFooterScrollbar = options.height === 'auto' || options.viewHeight === 'auto';
    return stickyFooterScrollbar;
}
class SimpleScrollGrid extends BaseComponent {
    constructor(){
        super(...arguments);
        this.processCols = memoize((a)=>a, isColPropsEqual); // so we get same `cols` props every time
        // yucky to memoize VNodes, but much more efficient for consumers
        this.renderMicroColGroup = memoize(renderMicroColGroup);
        this.scrollerRefs = new RefMap();
        this.scrollerElRefs = new RefMap(this._handleScrollerEl.bind(this));
        this.state = {
            shrinkWidth: null,
            forceYScrollbars: false,
            scrollerClientWidths: {},
            scrollerClientHeights: {}
        };
        // TODO: can do a really simple print-view. dont need to join rows
        this.handleSizing = ()=>{
            this.safeSetState(Object.assign({
                shrinkWidth: this.computeShrinkWidth()
            }, this.computeScrollerDims()));
        };
    }
    render() {
        let { props, state, context } = this;
        let sectionConfigs = props.sections || [];
        let cols = this.processCols(props.cols);
        let microColGroupNode = this.renderMicroColGroup(cols, state.shrinkWidth);
        let classNames = getScrollGridClassNames(props.liquid, context);
        if (props.collapsibleWidth) classNames.push('fc-scrollgrid-collapsible');
        // TODO: make DRY
        let configCnt = sectionConfigs.length;
        let configI = 0;
        let currentConfig;
        let headSectionNodes = [];
        let bodySectionNodes = [];
        let footSectionNodes = [];
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'header'){
            headSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));
            configI += 1;
        }
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'body'){
            bodySectionNodes.push(this.renderSection(currentConfig, microColGroupNode, false));
            configI += 1;
        }
        while(configI < configCnt && (currentConfig = sectionConfigs[configI]).type === 'footer'){
            footSectionNodes.push(this.renderSection(currentConfig, microColGroupNode, true));
            configI += 1;
        }
        // firefox bug: when setting height on table and there is a thead or tfoot,
        // the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)
        // use getCanVGrowWithinCell as a way to detect table-stupid firefox.
        // if so, use a simpler dom structure, jam everything into a lone tbody.
        let isBuggy = !getCanVGrowWithinCell();
        const roleAttrs = {
            role: 'rowgroup'
        };
        return (0, _preact.createElement)('table', {
            role: 'grid',
            className: classNames.join(' '),
            style: {
                height: props.height
            }
        }, Boolean(!isBuggy && headSectionNodes.length) && (0, _preact.createElement)('thead', roleAttrs, ...headSectionNodes), Boolean(!isBuggy && bodySectionNodes.length) && (0, _preact.createElement)('tbody', roleAttrs, ...bodySectionNodes), Boolean(!isBuggy && footSectionNodes.length) && (0, _preact.createElement)('tfoot', roleAttrs, ...footSectionNodes), isBuggy && (0, _preact.createElement)('tbody', roleAttrs, ...headSectionNodes, ...bodySectionNodes, ...footSectionNodes));
    }
    renderSection(sectionConfig, microColGroupNode, isHeader) {
        if ('outerContent' in sectionConfig) return (0, _preact.createElement)((0, _preact.Fragment), {
            key: sectionConfig.key
        }, sectionConfig.outerContent);
        return (0, _preact.createElement)("tr", {
            key: sectionConfig.key,
            role: "presentation",
            className: getSectionClassNames(sectionConfig, this.props.liquid).join(' ')
        }, this.renderChunkTd(sectionConfig, microColGroupNode, sectionConfig.chunk, isHeader));
    }
    renderChunkTd(sectionConfig, microColGroupNode, chunkConfig, isHeader) {
        if ('outerContent' in chunkConfig) return chunkConfig.outerContent;
        let { props } = this;
        let { forceYScrollbars, scrollerClientWidths, scrollerClientHeights } = this.state;
        let needsYScrolling = getAllowYScrolling(props, sectionConfig); // TODO: do lazily. do in section config?
        let isLiquid = getSectionHasLiquidHeight(props, sectionConfig);
        // for `!props.liquid` - is WHOLE scrollgrid natural height?
        // TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars
        let overflowY = !props.liquid ? 'visible' : forceYScrollbars ? 'scroll' : !needsYScrolling ? 'hidden' : 'auto';
        let sectionKey = sectionConfig.key;
        let content = renderChunkContent(sectionConfig, chunkConfig, {
            tableColGroupNode: microColGroupNode,
            tableMinWidth: '',
            clientWidth: !props.collapsibleWidth && scrollerClientWidths[sectionKey] !== undefined ? scrollerClientWidths[sectionKey] : null,
            clientHeight: scrollerClientHeights[sectionKey] !== undefined ? scrollerClientHeights[sectionKey] : null,
            expandRows: sectionConfig.expandRows,
            syncRowHeights: false,
            rowSyncHeights: [],
            reportRowHeightChange: ()=>{}
        }, isHeader);
        return (0, _preact.createElement)(isHeader ? 'th' : 'td', {
            ref: chunkConfig.elRef,
            role: 'presentation'
        }, (0, _preact.createElement)("div", {
            className: `fc-scroller-harness${isLiquid ? ' fc-scroller-harness-liquid' : ''}`
        }, (0, _preact.createElement)(Scroller, {
            ref: this.scrollerRefs.createRef(sectionKey),
            elRef: this.scrollerElRefs.createRef(sectionKey),
            overflowY: overflowY,
            overflowX: !props.liquid ? 'visible' : 'hidden' /* natural height? */ ,
            maxHeight: sectionConfig.maxHeight,
            liquid: isLiquid,
            liquidIsAbsolute: true
        }, content)));
    }
    _handleScrollerEl(scrollerEl, key) {
        let section = getSectionByKey(this.props.sections, key);
        if (section) setRef(section.chunk.scrollerElRef, scrollerEl);
    }
    componentDidMount() {
        this.handleSizing();
        this.context.addResizeHandler(this.handleSizing);
    }
    componentDidUpdate() {
        // TODO: need better solution when state contains non-sizing things
        this.handleSizing();
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleSizing);
    }
    computeShrinkWidth() {
        return hasShrinkWidth(this.props.cols) ? computeShrinkWidth(this.scrollerElRefs.getAll()) : 0;
    }
    computeScrollerDims() {
        let scrollbarWidth = getScrollbarWidths();
        let { scrollerRefs, scrollerElRefs } = this;
        let forceYScrollbars = false;
        let scrollerClientWidths = {};
        let scrollerClientHeights = {};
        for(let sectionKey in scrollerRefs.currentMap){
            let scroller = scrollerRefs.currentMap[sectionKey];
            if (scroller && scroller.needsYScrolling()) {
                forceYScrollbars = true;
                break;
            }
        }
        for (let section of this.props.sections){
            let sectionKey = section.key;
            let scrollerEl = scrollerElRefs.currentMap[sectionKey];
            if (scrollerEl) {
                let harnessEl = scrollerEl.parentNode; // TODO: weird way to get this. need harness b/c doesn't include table borders
                scrollerClientWidths[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().width - (forceYScrollbars ? scrollbarWidth.y // use global because scroller might not have scrollbars yet but will need them in future
                 : 0));
                scrollerClientHeights[sectionKey] = Math.floor(harnessEl.getBoundingClientRect().height);
            }
        }
        return {
            forceYScrollbars,
            scrollerClientWidths,
            scrollerClientHeights
        };
    }
}
SimpleScrollGrid.addStateEquality({
    scrollerClientWidths: isPropsEqual,
    scrollerClientHeights: isPropsEqual
});
function getSectionByKey(sections, key) {
    for (let section of sections){
        if (section.key === key) return section;
    }
    return null;
}
class EventContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        // memo
        this.buildPublicEvent = memoize((context, eventDef, eventInstance)=>new EventImpl(context, eventDef, eventInstance));
        this.handleEl = (el)=>{
            this.el = el;
            setRef(this.props.elRef, el);
            if (el) setElSeg(el, this.props.seg);
        };
    }
    render() {
        const { props, context } = this;
        const { options } = context;
        const { seg } = props;
        const { eventRange } = seg;
        const { ui } = eventRange;
        const renderProps = {
            event: this.buildPublicEvent(context, eventRange.def, eventRange.instance),
            view: context.viewApi,
            timeText: props.timeText,
            textColor: ui.textColor,
            backgroundColor: ui.backgroundColor,
            borderColor: ui.borderColor,
            isDraggable: !props.disableDragging && computeSegDraggable(seg, context),
            isStartResizable: !props.disableResizing && computeSegStartResizable(seg, context),
            isEndResizable: !props.disableResizing && computeSegEndResizable(seg),
            isMirror: Boolean(props.isDragging || props.isResizing || props.isDateSelecting),
            isStart: Boolean(seg.isStart),
            isEnd: Boolean(seg.isEnd),
            isPast: Boolean(props.isPast),
            isFuture: Boolean(props.isFuture),
            isToday: Boolean(props.isToday),
            isSelected: Boolean(props.isSelected),
            isDragging: Boolean(props.isDragging),
            isResizing: Boolean(props.isResizing)
        };
        return (0, _preact.createElement)(ContentContainer, {
            elRef: this.handleEl,
            elTag: props.elTag,
            elAttrs: props.elAttrs,
            elClasses: [
                ...getEventClassNames(renderProps),
                ...seg.eventRange.ui.classNames,
                ...props.elClasses || []
            ],
            elStyle: props.elStyle,
            renderProps: renderProps,
            generatorName: "eventContent",
            customGenerator: options.eventContent,
            defaultGenerator: props.defaultGenerator,
            classNameGenerator: options.eventClassNames,
            didMount: options.eventDidMount,
            willUnmount: options.eventWillUnmount
        }, props.children);
    }
    componentDidUpdate(prevProps) {
        if (this.el && this.props.seg !== prevProps.seg) setElSeg(this.el, this.props.seg);
    }
}
// should not be a purecomponent
class StandardEvent extends BaseComponent {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { seg } = props;
        let { ui } = seg.eventRange;
        let timeFormat = options.eventTimeFormat || props.defaultTimeFormat;
        let timeText = buildSegTimeText(seg, timeFormat, context, props.defaultDisplayEventTime, props.defaultDisplayEventEnd);
        return (0, _preact.createElement)(EventContainer, Object.assign({}, props /* includes elRef */ , {
            elTag: "a",
            elStyle: {
                borderColor: ui.borderColor,
                backgroundColor: ui.backgroundColor
            },
            elAttrs: getSegAnchorAttrs(seg, context),
            defaultGenerator: renderInnerContent$1,
            timeText: timeText
        }), (InnerContent, eventContentArg)=>(0, _preact.createElement)((0, _preact.Fragment), null, (0, _preact.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-event-main'
                ],
                elStyle: {
                    color: eventContentArg.textColor
                }
            }), Boolean(eventContentArg.isStartResizable) && (0, _preact.createElement)("div", {
                className: "fc-event-resizer fc-event-resizer-start"
            }), Boolean(eventContentArg.isEndResizable) && (0, _preact.createElement)("div", {
                className: "fc-event-resizer fc-event-resizer-end"
            })));
    }
}
StandardEvent.addPropsEquality({
    seg: isPropsEqual
});
function renderInnerContent$1(innerProps) {
    return (0, _preact.createElement)("div", {
        className: "fc-event-main-frame"
    }, innerProps.timeText && (0, _preact.createElement)("div", {
        className: "fc-event-time"
    }, innerProps.timeText), (0, _preact.createElement)("div", {
        className: "fc-event-title-container"
    }, (0, _preact.createElement)("div", {
        className: "fc-event-title fc-sticky"
    }, innerProps.event.title || (0, _preact.createElement)((0, _preact.Fragment), null, "\u00A0"))));
}
const NowIndicatorContainer = (props)=>(0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
        let { options } = context;
        let renderProps = {
            isAxis: props.isAxis,
            date: context.dateEnv.toDate(props.date),
            view: context.viewApi
        };
        return (0, _preact.createElement)(ContentContainer, {
            elRef: props.elRef,
            elTag: props.elTag || 'div',
            elAttrs: props.elAttrs,
            elClasses: props.elClasses,
            elStyle: props.elStyle,
            renderProps: renderProps,
            generatorName: "nowIndicatorContent",
            customGenerator: options.nowIndicatorContent,
            classNameGenerator: options.nowIndicatorClassNames,
            didMount: options.nowIndicatorDidMount,
            willUnmount: options.nowIndicatorWillUnmount
        }, props.children);
    });
const DAY_NUM_FORMAT = createFormatter({
    day: 'numeric'
});
class DayCellContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        this.refineRenderProps = memoizeObjArg(refineRenderProps);
    }
    render() {
        let { props, context } = this;
        let { options } = context;
        let renderProps = this.refineRenderProps({
            date: props.date,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            isMonthStart: props.isMonthStart || false,
            showDayNumber: props.showDayNumber,
            extraRenderProps: props.extraRenderProps,
            viewApi: context.viewApi,
            dateEnv: context.dateEnv,
            monthStartFormat: options.monthStartFormat
        });
        return (0, _preact.createElement)(ContentContainer, {
            elRef: props.elRef,
            elTag: props.elTag,
            elAttrs: Object.assign(Object.assign({}, props.elAttrs), renderProps.isDisabled ? {} : {
                'data-date': formatDayString(props.date)
            }),
            elClasses: [
                ...getDayClassNames(renderProps, context.theme),
                ...props.elClasses || []
            ],
            elStyle: props.elStyle,
            renderProps: renderProps,
            generatorName: "dayCellContent",
            customGenerator: options.dayCellContent,
            defaultGenerator: props.defaultGenerator,
            classNameGenerator: // don't use custom classNames if disabled
            renderProps.isDisabled ? undefined : options.dayCellClassNames,
            didMount: options.dayCellDidMount,
            willUnmount: options.dayCellWillUnmount
        }, props.children);
    }
}
function hasCustomDayCellContent(options) {
    return Boolean(options.dayCellContent || hasCustomRenderingHandler('dayCellContent', options));
}
function refineRenderProps(raw) {
    let { date, dateEnv, dateProfile, isMonthStart } = raw;
    let dayMeta = getDateMeta(date, raw.todayRange, null, dateProfile);
    let dayNumberText = raw.showDayNumber ? dateEnv.format(date, isMonthStart ? raw.monthStartFormat : DAY_NUM_FORMAT) : '';
    return Object.assign(Object.assign(Object.assign({
        date: dateEnv.toDate(date),
        view: raw.viewApi
    }, dayMeta), {
        isMonthStart,
        dayNumberText
    }), raw.extraRenderProps);
}
class BgEvent extends BaseComponent {
    render() {
        let { props } = this;
        let { seg } = props;
        return (0, _preact.createElement)(EventContainer, {
            elTag: "div",
            elClasses: [
                'fc-bg-event'
            ],
            elStyle: {
                backgroundColor: seg.eventRange.ui.backgroundColor
            },
            defaultGenerator: renderInnerContent,
            seg: seg,
            timeText: "",
            isDragging: false,
            isResizing: false,
            isDateSelecting: false,
            isSelected: false,
            isPast: props.isPast,
            isFuture: props.isFuture,
            isToday: props.isToday,
            disableDragging: true,
            disableResizing: true
        });
    }
}
function renderInnerContent(props) {
    let { title } = props.event;
    return title && (0, _preact.createElement)("div", {
        className: "fc-event-title"
    }, props.event.title);
}
function renderFill(fillType) {
    return (0, _preact.createElement)("div", {
        className: `fc-${fillType}`
    });
}
const WeekNumberContainer = (props)=>(0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
        let { dateEnv, options } = context;
        let { date } = props;
        let format = options.weekNumberFormat || props.defaultFormat;
        let num = dateEnv.computeWeekNumber(date); // TODO: somehow use for formatting as well?
        let text = dateEnv.format(date, format);
        let renderProps = {
            num,
            text,
            date
        };
        return (0, _preact.createElement)(ContentContainer // why isn't WeekNumberContentArg being auto-detected?
        , {
            elRef: props.elRef,
            elTag: props.elTag,
            elAttrs: props.elAttrs,
            elClasses: props.elClasses,
            elStyle: props.elStyle,
            renderProps: renderProps,
            generatorName: "weekNumberContent",
            customGenerator: options.weekNumberContent,
            defaultGenerator: renderInner,
            classNameGenerator: options.weekNumberClassNames,
            didMount: options.weekNumberDidMount,
            willUnmount: options.weekNumberWillUnmount
        }, props.children);
    });
function renderInner(innerProps) {
    return innerProps.text;
}
const PADDING_FROM_VIEWPORT = 10;
class Popover extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            titleId: getUniqueDomId()
        };
        this.handleRootEl = (el)=>{
            this.rootEl = el;
            if (this.props.elRef) setRef(this.props.elRef, el);
        };
        // Triggered when the user clicks *anywhere* in the document, for the autoHide feature
        this.handleDocumentMouseDown = (ev)=>{
            // only hide the popover if the click happened outside the popover
            const target = getEventTargetViaRoot(ev);
            if (!this.rootEl.contains(target)) this.handleCloseClick();
        };
        this.handleDocumentKeyDown = (ev)=>{
            if (ev.key === 'Escape') this.handleCloseClick();
        };
        this.handleCloseClick = ()=>{
            let { onClose } = this.props;
            if (onClose) onClose();
        };
    }
    render() {
        let { theme, options } = this.context;
        let { props, state } = this;
        let classNames = [
            'fc-popover',
            theme.getClass('popover')
        ].concat(props.extraClassNames || []);
        return (0, _compat.createPortal)((0, _preact.createElement)("div", Object.assign({}, props.extraAttrs, {
            id: props.id,
            className: classNames.join(' '),
            "aria-labelledby": state.titleId,
            ref: this.handleRootEl
        }), (0, _preact.createElement)("div", {
            className: 'fc-popover-header ' + theme.getClass('popoverHeader')
        }, (0, _preact.createElement)("span", {
            className: "fc-popover-title",
            id: state.titleId
        }, props.title), (0, _preact.createElement)("span", {
            className: 'fc-popover-close ' + theme.getIconClass('close'),
            title: options.closeHint,
            onClick: this.handleCloseClick
        })), (0, _preact.createElement)("div", {
            className: 'fc-popover-body ' + theme.getClass('popoverContent')
        }, props.children)), props.parentEl);
    }
    componentDidMount() {
        document.addEventListener('mousedown', this.handleDocumentMouseDown);
        document.addEventListener('keydown', this.handleDocumentKeyDown);
        this.updateSize();
    }
    componentWillUnmount() {
        document.removeEventListener('mousedown', this.handleDocumentMouseDown);
        document.removeEventListener('keydown', this.handleDocumentKeyDown);
    }
    updateSize() {
        let { isRtl } = this.context;
        let { alignmentEl, alignGridTop } = this.props;
        let { rootEl } = this;
        let alignmentRect = computeClippedClientRect(alignmentEl);
        if (alignmentRect) {
            let popoverDims = rootEl.getBoundingClientRect();
            // position relative to viewport
            let popoverTop = alignGridTop ? elementClosest(alignmentEl, '.fc-scrollgrid').getBoundingClientRect().top : alignmentRect.top;
            let popoverLeft = isRtl ? alignmentRect.right - popoverDims.width : alignmentRect.left;
            // constrain
            popoverTop = Math.max(popoverTop, PADDING_FROM_VIEWPORT);
            popoverLeft = Math.min(popoverLeft, document.documentElement.clientWidth - PADDING_FROM_VIEWPORT - popoverDims.width);
            popoverLeft = Math.max(popoverLeft, PADDING_FROM_VIEWPORT);
            let origin = rootEl.offsetParent.getBoundingClientRect();
            applyStyle(rootEl, {
                top: popoverTop - origin.top,
                left: popoverLeft - origin.left
            });
        }
    }
}
class MorePopover extends DateComponent {
    constructor(){
        super(...arguments);
        this.handleRootEl = (rootEl)=>{
            this.rootEl = rootEl;
            if (rootEl) this.context.registerInteractiveComponent(this, {
                el: rootEl,
                useEventCenter: false
            });
            else this.context.unregisterInteractiveComponent(this);
        };
    }
    render() {
        let { options, dateEnv } = this.context;
        let { props } = this;
        let { startDate, todayRange, dateProfile } = props;
        let title = dateEnv.format(startDate, options.dayPopoverFormat);
        return (0, _preact.createElement)(DayCellContainer, {
            elRef: this.handleRootEl,
            date: startDate,
            dateProfile: dateProfile,
            todayRange: todayRange
        }, (InnerContent, renderProps, elAttrs)=>(0, _preact.createElement)(Popover, {
                elRef: elAttrs.ref,
                id: props.id,
                title: title,
                extraClassNames: [
                    'fc-more-popover'
                ].concat(elAttrs.className || []),
                extraAttrs: elAttrs /* TODO: make these time-based when not whole-day? */ ,
                parentEl: props.parentEl,
                alignmentEl: props.alignmentEl,
                alignGridTop: props.alignGridTop,
                onClose: props.onClose
            }, hasCustomDayCellContent(options) && (0, _preact.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-more-popover-misc'
                ]
            }), props.children));
    }
    queryHit(positionLeft, positionTop, elWidth, elHeight) {
        let { rootEl, props } = this;
        if (positionLeft >= 0 && positionLeft < elWidth && positionTop >= 0 && positionTop < elHeight) return {
            dateProfile: props.dateProfile,
            dateSpan: Object.assign({
                allDay: !props.forceTimed,
                range: {
                    start: props.startDate,
                    end: props.endDate
                }
            }, props.extraDateSpan),
            dayEl: rootEl,
            rect: {
                left: 0,
                top: 0,
                right: elWidth,
                bottom: elHeight
            },
            layer: 1
        };
        return null;
    }
}
class MoreLinkContainer extends BaseComponent {
    constructor(){
        super(...arguments);
        this.state = {
            isPopoverOpen: false,
            popoverId: getUniqueDomId()
        };
        this.handleLinkEl = (linkEl)=>{
            this.linkEl = linkEl;
            if (this.props.elRef) setRef(this.props.elRef, linkEl);
        };
        this.handleClick = (ev)=>{
            let { props, context } = this;
            let { moreLinkClick } = context.options;
            let date = computeRange(props).start;
            function buildPublicSeg(seg) {
                let { def, instance, range } = seg.eventRange;
                return {
                    event: new EventImpl(context, def, instance),
                    start: context.dateEnv.toDate(range.start),
                    end: context.dateEnv.toDate(range.end),
                    isStart: seg.isStart,
                    isEnd: seg.isEnd
                };
            }
            if (typeof moreLinkClick === 'function') moreLinkClick = moreLinkClick({
                date,
                allDay: Boolean(props.allDayDate),
                allSegs: props.allSegs.map(buildPublicSeg),
                hiddenSegs: props.hiddenSegs.map(buildPublicSeg),
                jsEvent: ev,
                view: context.viewApi
            });
            if (!moreLinkClick || moreLinkClick === 'popover') this.setState({
                isPopoverOpen: true
            });
            else if (typeof moreLinkClick === 'string') context.calendarApi.zoomTo(date, moreLinkClick);
        };
        this.handlePopoverClose = ()=>{
            this.setState({
                isPopoverOpen: false
            });
        };
    }
    render() {
        let { props, state } = this;
        return (0, _preact.createElement)(ViewContextType.Consumer, null, (context)=>{
            let { viewApi, options, calendarApi } = context;
            let { moreLinkText } = options;
            let { moreCnt } = props;
            let range = computeRange(props);
            let text = typeof moreLinkText === 'function' // TODO: eventually use formatWithOrdinals
             ? moreLinkText.call(calendarApi, moreCnt) : `+${moreCnt} ${moreLinkText}`;
            let hint = formatWithOrdinals(options.moreLinkHint, [
                moreCnt
            ], text);
            let renderProps = {
                num: moreCnt,
                shortText: `+${moreCnt}`,
                text,
                view: viewApi
            };
            return (0, _preact.createElement)((0, _preact.Fragment), null, Boolean(props.moreCnt) && (0, _preact.createElement)(ContentContainer, {
                elTag: props.elTag || 'a',
                elRef: this.handleLinkEl,
                elClasses: [
                    ...props.elClasses || [],
                    'fc-more-link'
                ],
                elStyle: props.elStyle,
                elAttrs: Object.assign(Object.assign(Object.assign({}, props.elAttrs), createAriaClickAttrs(this.handleClick)), {
                    title: hint,
                    'aria-expanded': state.isPopoverOpen,
                    'aria-controls': state.isPopoverOpen ? state.popoverId : ''
                }),
                renderProps: renderProps,
                generatorName: "moreLinkContent",
                customGenerator: options.moreLinkContent,
                defaultGenerator: props.defaultGenerator || renderMoreLinkInner,
                classNameGenerator: options.moreLinkClassNames,
                didMount: options.moreLinkDidMount,
                willUnmount: options.moreLinkWillUnmount
            }, props.children), state.isPopoverOpen && (0, _preact.createElement)(MorePopover, {
                id: state.popoverId,
                startDate: range.start,
                endDate: range.end,
                dateProfile: props.dateProfile,
                todayRange: props.todayRange,
                extraDateSpan: props.extraDateSpan,
                parentEl: this.parentEl,
                alignmentEl: props.alignmentElRef ? props.alignmentElRef.current : this.linkEl,
                alignGridTop: props.alignGridTop,
                forceTimed: props.forceTimed,
                onClose: this.handlePopoverClose
            }, props.popoverContent()));
        });
    }
    componentDidMount() {
        this.updateParentEl();
    }
    componentDidUpdate() {
        this.updateParentEl();
    }
    updateParentEl() {
        if (this.linkEl) this.parentEl = elementClosest(this.linkEl, '.fc-view-harness');
    }
}
function renderMoreLinkInner(props) {
    return props.text;
}
function computeRange(props) {
    if (props.allDayDate) return {
        start: props.allDayDate,
        end: addDays(props.allDayDate, 1)
    };
    let { hiddenSegs } = props;
    return {
        start: computeEarliestSegStart(hiddenSegs),
        end: computeLatestSegEnd(hiddenSegs)
    };
}
function computeEarliestSegStart(segs) {
    return segs.reduce(pickEarliestStart).eventRange.range.start;
}
function pickEarliestStart(seg0, seg1) {
    return seg0.eventRange.range.start < seg1.eventRange.range.start ? seg0 : seg1;
}
function computeLatestSegEnd(segs) {
    return segs.reduce(pickLatestEnd).eventRange.range.end;
}
function pickLatestEnd(seg0, seg1) {
    return seg0.eventRange.range.end > seg1.eventRange.range.end ? seg0 : seg1;
}
class Store {
    constructor(){
        this.handlers = [];
    }
    set(value) {
        this.currentValue = value;
        for (let handler of this.handlers)handler(value);
    }
    subscribe(handler) {
        this.handlers.push(handler);
        if (this.currentValue !== undefined) handler(this.currentValue);
    }
}
/*
Subscribers will get a LIST of CustomRenderings
*/ class CustomRenderingStore extends Store {
    constructor(){
        super(...arguments);
        this.map = new Map();
    }
    // for consistent order
    handle(customRendering) {
        const { map } = this;
        let updated = false;
        if (customRendering.isActive) {
            map.set(customRendering.id, customRendering);
            updated = true;
        } else if (map.has(customRendering.id)) {
            map.delete(customRendering.id);
            updated = true;
        }
        if (updated) this.set(map);
    }
}

},{"preact":"agj7k","preact/compat":"cjkvk","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"agj7k":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>x);
parcelHelpers.export(exports, "Fragment", ()=>_);
parcelHelpers.export(exports, "cloneElement", ()=>F);
parcelHelpers.export(exports, "createContext", ()=>G);
parcelHelpers.export(exports, "createElement", ()=>y);
parcelHelpers.export(exports, "createRef", ()=>d);
parcelHelpers.export(exports, "h", ()=>y);
parcelHelpers.export(exports, "hydrate", ()=>E);
parcelHelpers.export(exports, "isValidElement", ()=>i);
parcelHelpers.export(exports, "options", ()=>l);
parcelHelpers.export(exports, "render", ()=>D);
parcelHelpers.export(exports, "toChildArray", ()=>j);
var n, l, u, i, t, r, o, f, e, c = {}, s = [], a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function h(n, l) {
    for(var u in l)n[u] = l[u];
    return n;
}
function v(n) {
    var l = n.parentNode;
    l && l.removeChild(n);
}
function y(l, u, i) {
    var t, r, o, f = {};
    for(o in u)"key" == o ? t = u[o] : "ref" == o ? r = u[o] : f[o] = u[o];
    if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for(o in l.defaultProps)void 0 === f[o] && (f[o] = l.defaultProps[o]);
    return p(l, f, t, r, null);
}
function p(n, i, t, r, o) {
    var f = {
        type: n,
        props: i,
        key: t,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == o ? ++u : o
    };
    return null == o && null != l.vnode && l.vnode(f), f;
}
function d() {
    return {
        current: null
    };
}
function _(n) {
    return n.children;
}
function k(n, l, u, i, t) {
    var r;
    for(r in u)"children" === r || "key" === r || r in l || g(n, r, null, u[r], i);
    for(r in l)t && "function" != typeof l[r] || "children" === r || "key" === r || "value" === r || "checked" === r || u[r] === l[r] || g(n, r, l[r], u[r], i);
}
function b(n, l, u) {
    "-" === l[0] ? n.setProperty(l, null == u ? "" : u) : n[l] = null == u ? "" : "number" != typeof u || a.test(l) ? u : u + "px";
}
function g(n, l, u, i, t) {
    var r;
    n: if ("style" === l) {
        if ("string" == typeof u) n.style.cssText = u;
        else {
            if ("string" == typeof i && (n.style.cssText = i = ""), i) for(l in i)u && l in u || b(n.style, l, "");
            if (u) for(l in u)i && u[l] === i[l] || b(n.style, l, u[l]);
        }
    } else if ("o" === l[0] && "n" === l[1]) r = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + r] = u, u ? i || n.addEventListener(l, r ? w : m, r) : n.removeEventListener(l, r ? w : m, r);
    else if ("dangerouslySetInnerHTML" !== l) {
        if (t) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" !== l && "height" !== l && "href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
            n[l] = null == u ? "" : u;
            break n;
        } catch (n) {}
        "function" == typeof u || (null == u || !1 === u && -1 == l.indexOf("-") ? n.removeAttribute(l) : n.setAttribute(l, u));
    }
}
function m(n) {
    t = !0;
    try {
        return this.l[n.type + !1](l.event ? l.event(n) : n);
    } finally{
        t = !1;
    }
}
function w(n) {
    t = !0;
    try {
        return this.l[n.type + !0](l.event ? l.event(n) : n);
    } finally{
        t = !1;
    }
}
function x(n, l) {
    this.props = n, this.context = l;
}
function A(n, l) {
    if (null == l) return n.__ ? A(n.__, n.__.__k.indexOf(n) + 1) : null;
    for(var u; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
    return "function" == typeof n.type ? A(n) : null;
}
function P(n) {
    var l, u;
    if (null != (n = n.__) && null != n.__c) {
        for(n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++)if (null != (u = n.__k[l]) && null != u.__e) {
            n.__e = n.__c.base = u.__e;
            break;
        }
        return P(n);
    }
}
function C(n) {
    t ? setTimeout(n) : f(n);
}
function T(n) {
    (!n.__d && (n.__d = !0) && r.push(n) && !$.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || C)($);
}
function $() {
    var n, l, u, i, t, o, f, e;
    for(r.sort(function(n, l) {
        return n.__v.__b - l.__v.__b;
    }); n = r.shift();)n.__d && (l = r.length, i = void 0, t = void 0, f = (o = (u = n).__v).__e, (e = u.__P) && (i = [], (t = h({}, o)).__v = o.__v + 1, M(e, o, t, u.__n, void 0 !== e.ownerSVGElement, null != o.__h ? [
        f
    ] : null, i, null == f ? A(o) : f, o.__h), N(i, o), o.__e != f && P(o)), r.length > l && r.sort(function(n, l) {
        return n.__v.__b - l.__v.__b;
    }));
    $.__r = 0;
}
function H(n, l, u, i, t, r, o, f, e, a) {
    var h, v, y, d, k, b, g, m = i && i.__k || s, w = m.length;
    for(u.__k = [], h = 0; h < l.length; h++)if (null != (d = u.__k[h] = null == (d = l[h]) || "boolean" == typeof d ? null : "string" == typeof d || "number" == typeof d || "bigint" == typeof d ? p(null, d, null, null, d) : Array.isArray(d) ? p(_, {
        children: d
    }, null, null, null) : d.__b > 0 ? p(d.type, d.props, d.key, d.ref ? d.ref : null, d.__v) : d)) {
        if (d.__ = u, d.__b = u.__b + 1, null === (y = m[h]) || y && d.key == y.key && d.type === y.type) m[h] = void 0;
        else for(v = 0; v < w; v++){
            if ((y = m[v]) && d.key == y.key && d.type === y.type) {
                m[v] = void 0;
                break;
            }
            y = null;
        }
        M(n, d, y = y || c, t, r, o, f, e, a), k = d.__e, (v = d.ref) && y.ref != v && (g || (g = []), y.ref && g.push(y.ref, null, d), g.push(v, d.__c || k, d)), null != k ? (null == b && (b = k), "function" == typeof d.type && d.__k === y.__k ? d.__d = e = I(d, e, n) : e = z(n, d, y, m, k, e), "function" == typeof u.type && (u.__d = e)) : e && y.__e == e && e.parentNode != n && (e = A(y));
    }
    for(u.__e = b, h = w; h--;)null != m[h] && ("function" == typeof u.type && null != m[h].__e && m[h].__e == u.__d && (u.__d = L(i).nextSibling), q(m[h], m[h]));
    if (g) for(h = 0; h < g.length; h++)S(g[h], g[++h], g[++h]);
}
function I(n, l, u) {
    for(var i, t = n.__k, r = 0; t && r < t.length; r++)(i = t[r]) && (i.__ = n, l = "function" == typeof i.type ? I(i, l, u) : z(u, i, i, t, i.__e, l));
    return l;
}
function j(n, l) {
    return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function(n) {
        j(n, l);
    }) : l.push(n)), l;
}
function z(n, l, u, i, t, r) {
    var o, f, e;
    if (void 0 !== l.__d) o = l.__d, l.__d = void 0;
    else if (null == u || t != r || null == t.parentNode) n: if (null == r || r.parentNode !== n) n.appendChild(t), o = null;
    else {
        for(f = r, e = 0; (f = f.nextSibling) && e < i.length; e += 1)if (f == t) break n;
        n.insertBefore(t, r), o = r;
    }
    return void 0 !== o ? o : t.nextSibling;
}
function L(n) {
    var l, u, i;
    if (null == n.type || "string" == typeof n.type) return n.__e;
    if (n.__k) {
        for(l = n.__k.length - 1; l >= 0; l--)if ((u = n.__k[l]) && (i = L(u))) return i;
    }
    return null;
}
function M(n, u, i, t, r, o, f, e, c) {
    var s, a, v, y, p, d, k, b, g, m, w, A, P, C, T, $ = u.type;
    if (void 0 !== u.constructor) return null;
    null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, o = [
        e
    ]), (s = l.__b) && s(u);
    try {
        n: if ("function" == typeof $) {
            if (b = u.props, g = (s = $.contextType) && t[s.__c], m = s ? g ? g.props.value : s.__ : t, i.__c ? k = (a = u.__c = i.__c).__ = a.__E : ("prototype" in $ && $.prototype.render ? u.__c = a = new $(b, m) : (u.__c = a = new x(b, m), a.constructor = $, a.render = B), g && g.sub(a), a.props = b, a.state || (a.state = {}), a.context = m, a.__n = t, v = a.__d = !0, a.__h = [], a._sb = []), null == a.__s && (a.__s = a.state), null != $.getDerivedStateFromProps && (a.__s == a.state && (a.__s = h({}, a.__s)), h(a.__s, $.getDerivedStateFromProps(b, a.__s))), y = a.props, p = a.state, a.__v = u, v) null == $.getDerivedStateFromProps && null != a.componentWillMount && a.componentWillMount(), null != a.componentDidMount && a.__h.push(a.componentDidMount);
            else {
                if (null == $.getDerivedStateFromProps && b !== y && null != a.componentWillReceiveProps && a.componentWillReceiveProps(b, m), !a.__e && null != a.shouldComponentUpdate && !1 === a.shouldComponentUpdate(b, a.__s, m) || u.__v === i.__v) {
                    for(u.__v !== i.__v && (a.props = b, a.state = a.__s, a.__d = !1), u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function(n) {
                        n && (n.__ = u);
                    }), w = 0; w < a._sb.length; w++)a.__h.push(a._sb[w]);
                    a._sb = [], a.__h.length && f.push(a);
                    break n;
                }
                null != a.componentWillUpdate && a.componentWillUpdate(b, a.__s, m), null != a.componentDidUpdate && a.__h.push(function() {
                    a.componentDidUpdate(y, p, d);
                });
            }
            if (a.context = m, a.props = b, a.__P = n, A = l.__r, P = 0, "prototype" in $ && $.prototype.render) {
                for(a.state = a.__s, a.__d = !1, A && A(u), s = a.render(a.props, a.state, a.context), C = 0; C < a._sb.length; C++)a.__h.push(a._sb[C]);
                a._sb = [];
            } else do a.__d = !1, A && A(u), s = a.render(a.props, a.state, a.context), a.state = a.__s;
            while (a.__d && ++P < 25);
            a.state = a.__s, null != a.getChildContext && (t = h(h({}, t), a.getChildContext())), v || null == a.getSnapshotBeforeUpdate || (d = a.getSnapshotBeforeUpdate(y, p)), T = null != s && s.type === _ && null == s.key ? s.props.children : s, H(n, Array.isArray(T) ? T : [
                T
            ], u, i, t, r, o, f, e, c), a.base = u.__e, u.__h = null, a.__h.length && f.push(a), k && (a.__E = a.__ = null), a.__e = !1;
        } else null == o && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = O(i.__e, u, i, t, r, o, f, c);
        (s = l.diffed) && s(u);
    } catch (n) {
        u.__v = null, (c || null != o) && (u.__e = e, u.__h = !!c, o[o.indexOf(e)] = null), l.__e(n, u, i);
    }
}
function N(n, u) {
    l.__c && l.__c(u, n), n.some(function(u) {
        try {
            n = u.__h, u.__h = [], n.some(function(n) {
                n.call(u);
            });
        } catch (n) {
            l.__e(n, u.__v);
        }
    });
}
function O(l, u, i, t, r, o, f, e) {
    var s, a, h, y = i.props, p = u.props, d = u.type, _ = 0;
    if ("svg" === d && (r = !0), null != o) {
        for(; _ < o.length; _++)if ((s = o[_]) && "setAttribute" in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
            l = s, o[_] = null;
            break;
        }
    }
    if (null == l) {
        if (null === d) return document.createTextNode(p);
        l = r ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), o = null, e = !1;
    }
    if (null === d) y === p || e && l.data === p || (l.data = p);
    else {
        if (o = o && n.call(l.childNodes), a = (y = i.props || c).dangerouslySetInnerHTML, h = p.dangerouslySetInnerHTML, !e) {
            if (null != o) for(y = {}, _ = 0; _ < l.attributes.length; _++)y[l.attributes[_].name] = l.attributes[_].value;
            (h || a) && (h && (a && h.__html == a.__html || h.__html === l.innerHTML) || (l.innerHTML = h && h.__html || ""));
        }
        if (k(l, p, y, r, e), h) u.__k = [];
        else if (_ = u.props.children, H(l, Array.isArray(_) ? _ : [
            _
        ], u, i, t, r && "foreignObject" !== d, o, f, o ? o[0] : i.__k && A(i, 0), e), null != o) for(_ = o.length; _--;)null != o[_] && v(o[_]);
        e || ("value" in p && void 0 !== (_ = p.value) && (_ !== l.value || "progress" === d && !_ || "option" === d && _ !== y.value) && g(l, "value", _, y.value, !1), "checked" in p && void 0 !== (_ = p.checked) && _ !== l.checked && g(l, "checked", _, y.checked, !1));
    }
    return l;
}
function S(n, u, i) {
    try {
        "function" == typeof n ? n(u) : n.current = u;
    } catch (n) {
        l.__e(n, i);
    }
}
function q(n, u, i) {
    var t, r;
    if (l.unmount && l.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || S(t, null, u)), null != (t = n.__c)) {
        if (t.componentWillUnmount) try {
            t.componentWillUnmount();
        } catch (n) {
            l.__e(n, u);
        }
        t.base = t.__P = null, n.__c = void 0;
    }
    if (t = n.__k) for(r = 0; r < t.length; r++)t[r] && q(t[r], u, i || "function" != typeof n.type);
    i || null == n.__e || v(n.__e), n.__ = n.__e = n.__d = void 0;
}
function B(n, l, u) {
    return this.constructor(n, u);
}
function D(u, i, t) {
    var r, o, f;
    l.__ && l.__(u, i), o = (r = "function" == typeof t) ? null : t && t.__k || i.__k, f = [], M(i, u = (!r && t || i).__k = y(_, null, [
        u
    ]), o || c, c, void 0 !== i.ownerSVGElement, !r && t ? [
        t
    ] : o ? null : i.firstChild ? n.call(i.childNodes) : null, f, !r && t ? t : o ? o.__e : i.firstChild, r), N(f, u);
}
function E(n, l) {
    D(n, l, E);
}
function F(l, u, i) {
    var t, r, o, f = h({}, l.props);
    for(o in u)"key" == o ? t = u[o] : "ref" == o ? r = u[o] : f[o] = u[o];
    return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), p(l.type, f, t || l.key, r || l.ref, null);
}
function G(n, l) {
    var u = {
        __c: l = "__cC" + e++,
        __: n,
        Consumer: function(n, l) {
            return n.children(l);
        },
        Provider: function(n) {
            var u, i;
            return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function() {
                return i;
            }, this.shouldComponentUpdate = function(n) {
                this.props.value !== n.value && u.some(function(n) {
                    n.__e = !0, T(n);
                });
            }, this.sub = function(n) {
                u.push(n);
                var l = n.componentWillUnmount;
                n.componentWillUnmount = function() {
                    u.splice(u.indexOf(n), 1), l && l.call(n);
                };
            }), n.children;
        }
    };
    return u.Provider.__ = u.Consumer.contextType = u;
}
n = s.slice, l = {
    __e: function(n, l, u, i) {
        for(var t, r, o; l = l.__;)if ((t = l.__c) && !t.__) try {
            if ((r = t.constructor) && null != r.getDerivedStateFromError && (t.setState(r.getDerivedStateFromError(n)), o = t.__d), null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), o = t.__d), o) return t.__E = t;
        } catch (l) {
            n = l;
        }
        throw n;
    }
}, u = 0, i = function(n) {
    return null != n && void 0 === n.constructor;
}, t = !1, x.prototype.setState = function(n, l) {
    var u;
    u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = h({}, this.state), "function" == typeof n && (n = n(h({}, u), this.props)), n && h(u, n), null != n && this.__v && (l && this._sb.push(l), T(this));
}, x.prototype.forceUpdate = function(n) {
    this.__v && (this.__e = !0, n && this.__h.push(n), T(this));
}, x.prototype.render = _, r = [], f = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $.__r = 0, e = 0;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cjkvk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>(0, _preact.Component));
parcelHelpers.export(exports, "Fragment", ()=>(0, _preact.Fragment));
parcelHelpers.export(exports, "createContext", ()=>(0, _preact.createContext));
parcelHelpers.export(exports, "createElement", ()=>(0, _preact.createElement));
parcelHelpers.export(exports, "createRef", ()=>(0, _preact.createRef));
parcelHelpers.export(exports, "Children", ()=>O);
parcelHelpers.export(exports, "PureComponent", ()=>w);
parcelHelpers.export(exports, "StrictMode", ()=>vn);
parcelHelpers.export(exports, "Suspense", ()=>D);
parcelHelpers.export(exports, "SuspenseList", ()=>V);
parcelHelpers.export(exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", ()=>rn);
parcelHelpers.export(exports, "cloneElement", ()=>cn);
parcelHelpers.export(exports, "createFactory", ()=>on);
parcelHelpers.export(exports, "createPortal", ()=>j);
parcelHelpers.export(exports, "default", ()=>bn);
parcelHelpers.export(exports, "findDOMNode", ()=>an);
parcelHelpers.export(exports, "flushSync", ()=>hn);
parcelHelpers.export(exports, "forwardRef", ()=>k);
parcelHelpers.export(exports, "hydrate", ()=>q);
parcelHelpers.export(exports, "isValidElement", ()=>ln);
parcelHelpers.export(exports, "lazy", ()=>M);
parcelHelpers.export(exports, "memo", ()=>R);
parcelHelpers.export(exports, "render", ()=>Y);
parcelHelpers.export(exports, "startTransition", ()=>dn);
parcelHelpers.export(exports, "unmountComponentAtNode", ()=>fn);
parcelHelpers.export(exports, "unstable_batchedUpdates", ()=>sn);
parcelHelpers.export(exports, "useDeferredValue", ()=>pn);
parcelHelpers.export(exports, "useInsertionEffect", ()=>yn);
parcelHelpers.export(exports, "useSyncExternalStore", ()=>_n);
parcelHelpers.export(exports, "useTransition", ()=>mn);
parcelHelpers.export(exports, "version", ()=>un);
var _preact = require("preact");
var _hooks = require("preact/hooks");
parcelHelpers.exportAll(_hooks, exports);
function g(n, t) {
    for(var e in t)n[e] = t[e];
    return n;
}
function C(n, t) {
    for(var e in n)if ("__source" !== e && !(e in t)) return !0;
    for(var r in t)if ("__source" !== r && n[r] !== t[r]) return !0;
    return !1;
}
function E(n, t) {
    return n === t && (0 !== n || 1 / n == 1 / t) || n != n && t != t;
}
function w(n) {
    this.props = n;
}
function R(n, e) {
    function r(n) {
        var t = this.props.ref, r = t == n.ref;
        return !r && t && (t.call ? t(null) : t.current = null), e ? !e(this.props, n) || !r : C(this.props, n);
    }
    function u(e) {
        return this.shouldComponentUpdate = r, (0, _preact.createElement)(n, e);
    }
    return u.displayName = "Memo(" + (n.displayName || n.name) + ")", u.prototype.isReactComponent = !0, u.__f = !0, u;
}
(w.prototype = new (0, _preact.Component)).isPureReactComponent = !0, w.prototype.shouldComponentUpdate = function(n, t) {
    return C(this.props, n) || C(this.state, t);
};
var x = (0, _preact.options).__b;
(0, _preact.options).__b = function(n) {
    n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), x && x(n);
};
var N = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function k(n) {
    function t(t) {
        var e = g({}, t);
        return delete e.ref, n(e, t.ref || null);
    }
    return t.$$typeof = N, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
}
var A = function(n, t) {
    return null == n ? null : (0, _preact.toChildArray)((0, _preact.toChildArray)(n).map(t));
}, O = {
    map: A,
    forEach: A,
    count: function(n) {
        return n ? (0, _preact.toChildArray)(n).length : 0;
    },
    only: function(n) {
        var t = (0, _preact.toChildArray)(n);
        if (1 !== t.length) throw "Children.only";
        return t[0];
    },
    toArray: (0, _preact.toChildArray)
}, T = (0, _preact.options).__e;
(0, _preact.options).__e = function(n, t, e, r) {
    if (n.then) {
        for(var u, o = t; o = o.__;)if ((u = o.__c) && u.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), u.__c(n, t);
    }
    T(n, t, e, r);
};
var I = (0, _preact.options).unmount;
function L(n, t, e) {
    return n && (n.__c && n.__c.__H && (n.__c.__H.__.forEach(function(n) {
        "function" == typeof n.__c && n.__c();
    }), n.__c.__H = null), null != (n = g({}, n)).__c && (n.__c.__P === e && (n.__c.__P = t), n.__c = null), n.__k = n.__k && n.__k.map(function(n) {
        return L(n, t, e);
    })), n;
}
function U(n, t, e) {
    return n && (n.__v = null, n.__k = n.__k && n.__k.map(function(n) {
        return U(n, t, e);
    }), n.__c && n.__c.__P === t && (n.__e && e.insertBefore(n.__e, n.__d), n.__c.__e = !0, n.__c.__P = e)), n;
}
function D() {
    this.__u = 0, this.t = null, this.__b = null;
}
function F(n) {
    var t = n.__.__c;
    return t && t.__a && t.__a(n);
}
function M(n) {
    var e, r, u;
    function o(o) {
        if (e || (e = n()).then(function(n) {
            r = n.default || n;
        }, function(n) {
            u = n;
        }), u) throw u;
        if (!r) throw e;
        return (0, _preact.createElement)(r, o);
    }
    return o.displayName = "Lazy", o.__f = !0, o;
}
function V() {
    this.u = null, this.o = null;
}
(0, _preact.options).unmount = function(n) {
    var t = n.__c;
    t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), I && I(n);
}, (D.prototype = new (0, _preact.Component)).__c = function(n, t) {
    var e = t.__c, r = this;
    null == r.t && (r.t = []), r.t.push(e);
    var u = F(r.__v), o = !1, i = function() {
        o || (o = !0, e.__R = null, u ? u(l) : l());
    };
    e.__R = i;
    var l = function() {
        if (!--r.__u) {
            if (r.state.__a) {
                var n = r.state.__a;
                r.__v.__k[0] = U(n, n.__c.__P, n.__c.__O);
            }
            var t;
            for(r.setState({
                __a: r.__b = null
            }); t = r.t.pop();)t.forceUpdate();
        }
    }, c = !0 === t.__h;
    r.__u++ || c || r.setState({
        __a: r.__b = r.__v.__k[0]
    }), n.then(i, i);
}, D.prototype.componentWillUnmount = function() {
    this.t = [];
}, D.prototype.render = function(n, e) {
    if (this.__b) {
        if (this.__v.__k) {
            var r = document.createElement("div"), o = this.__v.__k[0].__c;
            this.__v.__k[0] = L(this.__b, r, o.__O = o.__P);
        }
        this.__b = null;
    }
    var i = e.__a && (0, _preact.createElement)((0, _preact.Fragment), null, n.fallback);
    return i && (i.__h = null), [
        (0, _preact.createElement)((0, _preact.Fragment), null, e.__a ? null : n.children),
        i
    ];
};
var W = function(n, t, e) {
    if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for(e = n.u; e;){
        for(; e.length > 3;)e.pop()();
        if (e[1] < e[0]) break;
        n.u = e = e[2];
    }
};
function P(n) {
    return this.getChildContext = function() {
        return n.context;
    }, n.children;
}
function $(n) {
    var e = this, r = n.i;
    e.componentWillUnmount = function() {
        (0, _preact.render)(null, e.l), e.l = null, e.i = null;
    }, e.i && e.i !== r && e.componentWillUnmount(), n.__v ? (e.l || (e.i = r, e.l = {
        nodeType: 1,
        parentNode: r,
        childNodes: [],
        appendChild: function(n) {
            this.childNodes.push(n), e.i.appendChild(n);
        },
        insertBefore: function(n, t) {
            this.childNodes.push(n), e.i.appendChild(n);
        },
        removeChild: function(n) {
            this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), e.i.removeChild(n);
        }
    }), (0, _preact.render)((0, _preact.createElement)(P, {
        context: e.context
    }, n.__v), e.l)) : e.l && e.componentWillUnmount();
}
function j(n, e) {
    var r = (0, _preact.createElement)($, {
        __v: n,
        i: e
    });
    return r.containerInfo = e, r;
}
(V.prototype = new (0, _preact.Component)).__a = function(n) {
    var t = this, e = F(t.__v), r = t.o.get(n);
    return r[0]++, function(u) {
        var o = function() {
            t.props.revealOrder ? (r.push(u), W(t, n, r)) : u();
        };
        e ? e(o) : o();
    };
}, V.prototype.render = function(n) {
    this.u = null, this.o = new Map;
    var t = (0, _preact.toChildArray)(n.children);
    n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
    for(var e = t.length; e--;)this.o.set(t[e], this.u = [
        1,
        0,
        this.u
    ]);
    return n.children;
}, V.prototype.componentDidUpdate = V.prototype.componentDidMount = function() {
    var n = this;
    this.o.forEach(function(t, e) {
        W(n, e, t);
    });
};
var z = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, B = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, H = "undefined" != typeof document, Z = function(n) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
};
function Y(n, t, e) {
    return null == t.__k && (t.textContent = ""), (0, _preact.render)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
function q(n, t, e) {
    return (0, _preact.hydrate)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
(0, _preact.Component).prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(t) {
    Object.defineProperty((0, _preact.Component).prototype, t, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + t];
        },
        set: function(n) {
            Object.defineProperty(this, t, {
                configurable: !0,
                writable: !0,
                value: n
            });
        }
    });
});
var G = (0, _preact.options).event;
function J() {}
function K() {
    return this.cancelBubble;
}
function Q() {
    return this.defaultPrevented;
}
(0, _preact.options).event = function(n) {
    return G && (n = G(n)), n.persist = J, n.isPropagationStopped = K, n.isDefaultPrevented = Q, n.nativeEvent = n;
};
var X, nn = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, tn = (0, _preact.options).vnode;
(0, _preact.options).vnode = function(n) {
    var t = n.type, e = n.props, u = e;
    if ("string" == typeof t) {
        var o = -1 === t.indexOf("-");
        for(var i in u = {}, e){
            var l = e[i];
            H && "children" === i && "noscript" === t || "value" === i && "defaultValue" in e && null == l || ("defaultValue" === i && "value" in e && null == e.value ? i = "value" : "download" === i && !0 === l ? l = "" : /ondoubleclick/i.test(i) ? i = "ondblclick" : /^onchange(textarea|input)/i.test(i + t) && !Z(e.type) ? i = "oninput" : /^onfocus$/i.test(i) ? i = "onfocusin" : /^onblur$/i.test(i) ? i = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i) ? i = i.toLowerCase() : o && B.test(i) ? i = i.replace(/[A-Z0-9]/g, "-$&").toLowerCase() : null === l && (l = void 0), /^oninput$/i.test(i) && (i = i.toLowerCase(), u[i] && (i = "oninputCapture")), u[i] = l);
        }
        "select" == t && u.multiple && Array.isArray(u.value) && (u.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = -1 != u.value.indexOf(n.props.value);
        })), "select" == t && null != u.defaultValue && (u.value = (0, _preact.toChildArray)(e.children).forEach(function(n) {
            n.props.selected = u.multiple ? -1 != u.defaultValue.indexOf(n.props.value) : u.defaultValue == n.props.value;
        })), n.props = u, e.class != e.className && (nn.enumerable = "className" in e, null != e.className && (u.class = e.className), Object.defineProperty(u, "className", nn));
    }
    n.$$typeof = z, tn && tn(n);
};
var en = (0, _preact.options).__r;
(0, _preact.options).__r = function(n) {
    en && en(n), X = n.__c;
};
var rn = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n) {
                return X.__n[n.__c].props.value;
            }
        }
    }
}, un = "17.0.2";
function on(n) {
    return (0, _preact.createElement).bind(null, n);
}
function ln(n) {
    return !!n && n.$$typeof === z;
}
function cn(n) {
    return ln(n) ? (0, _preact.cloneElement).apply(null, arguments) : n;
}
function fn(n) {
    return !!n.__k && ((0, _preact.render)(null, n), !0);
}
function an(n) {
    return n && (n.base || 1 === n.nodeType && n) || null;
}
var sn = function(n, t) {
    return n(t);
}, hn = function(n, t) {
    return n(t);
}, vn = (0, _preact.Fragment);
function dn(n) {
    n();
}
function pn(n) {
    return n;
}
function mn() {
    return [
        !1,
        dn
    ];
}
var yn = (0, _hooks.useLayoutEffect);
function _n(n, t) {
    var e = t(), r = (0, _hooks.useState)({
        h: {
            __: e,
            v: t
        }
    }), u = r[0].h, o = r[1];
    return (0, _hooks.useLayoutEffect)(function() {
        u.__ = e, u.v = t, E(u.__, t()) || o({
            h: u
        });
    }, [
        n,
        e,
        t
    ]), (0, _hooks.useEffect)(function() {
        return E(u.__, u.v()) || o({
            h: u
        }), n(function() {
            E(u.__, u.v()) || o({
                h: u
            });
        });
    }, [
        n
    ]), e;
}
var bn = {
    useState: (0, _hooks.useState),
    useId: (0, _hooks.useId),
    useReducer: (0, _hooks.useReducer),
    useEffect: (0, _hooks.useEffect),
    useLayoutEffect: (0, _hooks.useLayoutEffect),
    useInsertionEffect: yn,
    useTransition: mn,
    useDeferredValue: pn,
    useSyncExternalStore: _n,
    startTransition: dn,
    useRef: (0, _hooks.useRef),
    useImperativeHandle: (0, _hooks.useImperativeHandle),
    useMemo: (0, _hooks.useMemo),
    useCallback: (0, _hooks.useCallback),
    useContext: (0, _hooks.useContext),
    useDebugValue: (0, _hooks.useDebugValue),
    version: "17.0.2",
    Children: O,
    render: Y,
    hydrate: q,
    unmountComponentAtNode: fn,
    createPortal: j,
    createElement: (0, _preact.createElement),
    createContext: (0, _preact.createContext),
    createFactory: on,
    cloneElement: cn,
    createRef: (0, _preact.createRef),
    Fragment: (0, _preact.Fragment),
    isValidElement: ln,
    findDOMNode: an,
    Component: (0, _preact.Component),
    PureComponent: w,
    memo: R,
    forwardRef: k,
    flushSync: hn,
    unstable_batchedUpdates: sn,
    StrictMode: vn,
    Suspense: D,
    SuspenseList: V,
    lazy: M,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: rn
};

},{"preact":"agj7k","preact/hooks":"83L4j","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"83L4j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useCallback", ()=>T);
parcelHelpers.export(exports, "useContext", ()=>q);
parcelHelpers.export(exports, "useDebugValue", ()=>x);
parcelHelpers.export(exports, "useEffect", ()=>h);
parcelHelpers.export(exports, "useErrorBoundary", ()=>P);
parcelHelpers.export(exports, "useId", ()=>V);
parcelHelpers.export(exports, "useImperativeHandle", ()=>A);
parcelHelpers.export(exports, "useLayoutEffect", ()=>s);
parcelHelpers.export(exports, "useMemo", ()=>F);
parcelHelpers.export(exports, "useReducer", ()=>y);
parcelHelpers.export(exports, "useRef", ()=>_);
parcelHelpers.export(exports, "useState", ()=>p);
var _preact = require("preact");
var t, r, u, i, o = 0, f = [], c = [], e = (0, _preact.options).__b, a = (0, _preact.options).__r, v = (0, _preact.options).diffed, l = (0, _preact.options).__c, m = (0, _preact.options).unmount;
function d(t, u) {
    (0, _preact.options).__h && (0, _preact.options).__h(r, t, o || u), o = 0;
    var i = r.__H || (r.__H = {
        __: [],
        __h: []
    });
    return t >= i.__.length && i.__.push({
        __V: c
    }), i.__[t];
}
function p(n) {
    return o = 1, y(B, n);
}
function y(n, u, i) {
    var o = d(t++, 2);
    if (o.t = n, !o.__c && (o.__ = [
        i ? i(u) : B(void 0, u),
        function(n) {
            var t = o.__N ? o.__N[0] : o.__[0], r = o.t(t, n);
            t !== r && (o.__N = [
                r,
                o.__[1]
            ], o.__c.setState({}));
        }
    ], o.__c = r, !r.u)) {
        r.u = !0;
        var f = r.shouldComponentUpdate;
        r.shouldComponentUpdate = function(n, t, r) {
            if (!o.__c.__H) return !0;
            var u = o.__c.__H.__.filter(function(n) {
                return n.__c;
            });
            if (u.every(function(n) {
                return !n.__N;
            })) return !f || f.call(this, n, t, r);
            var i = !1;
            return u.forEach(function(n) {
                if (n.__N) {
                    var t = n.__[0];
                    n.__ = n.__N, n.__N = void 0, t !== n.__[0] && (i = !0);
                }
            }), !(!i && o.__c.props === n) && (!f || f.call(this, n, t, r));
        };
    }
    return o.__N || o.__;
}
function h(u, i) {
    var o = d(t++, 3);
    !(0, _preact.options).__s && z(o.__H, i) && (o.__ = u, o.i = i, r.__H.__h.push(o));
}
function s(u, i) {
    var o = d(t++, 4);
    !(0, _preact.options).__s && z(o.__H, i) && (o.__ = u, o.i = i, r.__h.push(o));
}
function _(n) {
    return o = 5, F(function() {
        return {
            current: n
        };
    }, []);
}
function A(n, t, r) {
    o = 6, s(function() {
        return "function" == typeof n ? (n(t()), function() {
            return n(null);
        }) : n ? (n.current = t(), function() {
            return n.current = null;
        }) : void 0;
    }, null == r ? r : r.concat(n));
}
function F(n, r) {
    var u = d(t++, 7);
    return z(u.__H, r) ? (u.__V = n(), u.i = r, u.__h = n, u.__V) : u.__;
}
function T(n, t) {
    return o = 8, F(function() {
        return n;
    }, t);
}
function q(n) {
    var u = r.context[n.__c], i = d(t++, 9);
    return i.c = n, u ? (null == i.__ && (i.__ = !0, u.sub(r)), u.props.value) : n.__;
}
function x(t, r) {
    (0, _preact.options).useDebugValue && (0, _preact.options).useDebugValue(r ? r(t) : t);
}
function P(n) {
    var u = d(t++, 10), i = p();
    return u.__ = n, r.componentDidCatch || (r.componentDidCatch = function(n, t) {
        u.__ && u.__(n, t), i[1](n);
    }), [
        i[0],
        function() {
            i[1](void 0);
        }
    ];
}
function V() {
    var n = d(t++, 11);
    if (!n.__) {
        for(var u = r.__v; null !== u && !u.__m && null !== u.__;)u = u.__;
        var i = u.__m || (u.__m = [
            0,
            0
        ]);
        n.__ = "P" + i[0] + "-" + i[1]++;
    }
    return n.__;
}
function b() {
    for(var t; t = f.shift();)if (t.__P && t.__H) try {
        t.__H.__h.forEach(k), t.__H.__h.forEach(w), t.__H.__h = [];
    } catch (r) {
        t.__H.__h = [], (0, _preact.options).__e(r, t.__v);
    }
}
(0, _preact.options).__b = function(n) {
    r = null, e && e(n);
}, (0, _preact.options).__r = function(n) {
    a && a(n), t = 0;
    var i = (r = n.__c).__H;
    i && (u === r ? (i.__h = [], r.__h = [], i.__.forEach(function(n) {
        n.__N && (n.__ = n.__N), n.__V = c, n.__N = n.i = void 0;
    })) : (i.__h.forEach(k), i.__h.forEach(w), i.__h = [])), u = r;
}, (0, _preact.options).diffed = function(t) {
    v && v(t);
    var o = t.__c;
    o && o.__H && (o.__H.__h.length && (1 !== f.push(o) && i === (0, _preact.options).requestAnimationFrame || ((i = (0, _preact.options).requestAnimationFrame) || j)(b)), o.__H.__.forEach(function(n) {
        n.i && (n.__H = n.i), n.__V !== c && (n.__ = n.__V), n.i = void 0, n.__V = c;
    })), u = r = null;
}, (0, _preact.options).__c = function(t, r) {
    r.some(function(t) {
        try {
            t.__h.forEach(k), t.__h = t.__h.filter(function(n) {
                return !n.__ || w(n);
            });
        } catch (u) {
            r.some(function(n) {
                n.__h && (n.__h = []);
            }), r = [], (0, _preact.options).__e(u, t.__v);
        }
    }), l && l(t, r);
}, (0, _preact.options).unmount = function(t) {
    m && m(t);
    var r, u = t.__c;
    u && u.__H && (u.__H.__.forEach(function(n) {
        try {
            k(n);
        } catch (n) {
            r = n;
        }
    }), u.__H = void 0, r && (0, _preact.options).__e(r, u.__v));
};
var g = "function" == typeof requestAnimationFrame;
function j(n) {
    var t, r = function() {
        clearTimeout(u), g && cancelAnimationFrame(t), setTimeout(n);
    }, u = setTimeout(r, 100);
    g && (t = requestAnimationFrame(r));
}
function k(n) {
    var t = r, u = n.__c;
    "function" == typeof u && (n.__c = void 0, u()), r = t;
}
function w(n) {
    var t = r;
    n.__c = n.__(), r = t;
}
function z(n, t) {
    return !n || n.length !== t.length || t.some(function(t, r) {
        return t !== n[r];
    });
}
function B(n, t) {
    return "function" == typeof t ? t(n) : t;
}

},{"preact":"agj7k","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jiZAV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("./internal.js");
var _internalJs1 = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/daygrid',
    initialView: 'dayGridMonth',
    views: {
        dayGrid: {
            component: (0, _internalJs.DayGridView),
            dateProfileGeneratorClass: (0, _internalJs.TableDateProfileGenerator)
        },
        dayGridDay: {
            type: 'dayGrid',
            duration: {
                days: 1
            }
        },
        dayGridWeek: {
            type: 'dayGrid',
            duration: {
                weeks: 1
            }
        },
        dayGridMonth: {
            type: 'dayGrid',
            duration: {
                months: 1
            },
            fixedWeekCount: true
        },
        dayGridYear: {
            type: 'dayGrid',
            duration: {
                years: 1
            }
        }
    }
});

},{"@fullcalendar/core/index.js":"9u9jF","./internal.js":"4zgAk","@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4zgAk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DayGridView", ()=>DayTableView);
parcelHelpers.export(exports, "DayTable", ()=>DayTable);
parcelHelpers.export(exports, "DayTableSlicer", ()=>DayTableSlicer);
parcelHelpers.export(exports, "Table", ()=>Table);
parcelHelpers.export(exports, "TableDateProfileGenerator", ()=>TableDateProfileGenerator);
parcelHelpers.export(exports, "TableRows", ()=>TableRows);
parcelHelpers.export(exports, "TableView", ()=>TableView);
parcelHelpers.export(exports, "buildDayTableModel", ()=>buildDayTableModel);
parcelHelpers.export(exports, "buildDayTableRenderRange", ()=>buildDayTableRenderRange);
var _internalJs = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.
----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a Table subcomponent, which does most of the heavy lifting.
// It is responsible for managing width/height.
class TableView extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.headerElRef = (0, _preactJs.createRef)();
    }
    renderSimpleLayout(headerRowContent, bodyContent) {
        let { props, context } = this;
        let sections = [];
        let stickyHeaderDates = (0, _internalJs.getStickyHeaderDates)(context.options);
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunk: {
                elRef: this.headerElRef,
                tableClassName: 'fc-col-header',
                rowContent: headerRowContent
            }
        });
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            chunk: {
                content: bodyContent
            }
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elClasses: [
                'fc-daygrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)((0, _internalJs.SimpleScrollGrid), {
            liquid: !props.isHeightAuto && !props.forPrint,
            collapsibleWidth: props.forPrint,
            cols: [],
            sections: sections
        }));
    }
    renderHScrollLayout(headerRowContent, bodyContent, colCnt, dayMinWidth) {
        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;
        if (!ScrollGrid) throw new Error('No ScrollGrid implementation');
        let { props, context } = this;
        let stickyHeaderDates = !props.forPrint && (0, _internalJs.getStickyHeaderDates)(context.options);
        let stickyFooterScrollbar = !props.forPrint && (0, _internalJs.getStickyFooterScrollbar)(context.options);
        let sections = [];
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunks: [
                {
                    key: 'main',
                    elRef: this.headerElRef,
                    tableClassName: 'fc-col-header',
                    rowContent: headerRowContent
                }
            ]
        });
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            chunks: [
                {
                    key: 'main',
                    content: bodyContent
                }
            ]
        });
        if (stickyFooterScrollbar) sections.push({
            type: 'footer',
            key: 'footer',
            isSticky: true,
            chunks: [
                {
                    key: 'main',
                    content: (0, _internalJs.renderScrollShim)
                }
            ]
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elClasses: [
                'fc-daygrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)(ScrollGrid, {
            liquid: !props.isHeightAuto && !props.forPrint,
            forPrint: props.forPrint,
            collapsibleWidth: props.forPrint,
            colGroups: [
                {
                    cols: [
                        {
                            span: colCnt,
                            minWidth: dayMinWidth
                        }
                    ]
                }
            ],
            sections: sections
        }));
    }
}
function splitSegsByRow(segs, rowCnt) {
    let byRow = [];
    for(let i = 0; i < rowCnt; i += 1)byRow[i] = [];
    for (let seg of segs)byRow[seg.row].push(seg);
    return byRow;
}
function splitSegsByFirstCol(segs, colCnt) {
    let byCol = [];
    for(let i = 0; i < colCnt; i += 1)byCol[i] = [];
    for (let seg of segs)byCol[seg.firstCol].push(seg);
    return byCol;
}
function splitInteractionByRow(ui, rowCnt) {
    let byRow = [];
    if (!ui) for(let i = 0; i < rowCnt; i += 1)byRow[i] = null;
    else {
        for(let i = 0; i < rowCnt; i += 1)byRow[i] = {
            affectedInstances: ui.affectedInstances,
            isEvent: ui.isEvent,
            segs: []
        };
        for (let seg of ui.segs)byRow[seg.row].segs.push(seg);
    }
    return byRow;
}
const DEFAULT_TABLE_EVENT_TIME_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    omitZeroMinute: true,
    meridiem: 'narrow'
});
function hasListItemDisplay(seg) {
    let { display } = seg.eventRange.ui;
    return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol && // can't be multi-day
    seg.isStart && // "
    seg.isEnd // "
    ;
}
class TableBlockEvent extends (0, _internalJs.BaseComponent) {
    render() {
        let { props } = this;
        return (0, _preactJs.createElement)((0, _internalJs.StandardEvent), Object.assign({}, props, {
            elClasses: [
                'fc-daygrid-event',
                'fc-daygrid-block-event',
                'fc-h-event'
            ],
            defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,
            defaultDisplayEventEnd: props.defaultDisplayEventEnd,
            disableResizing: !props.seg.eventRange.def.allDay
        }));
    }
}
class TableListItemEvent extends (0, _internalJs.BaseComponent) {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { seg } = props;
        let timeFormat = options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;
        let timeText = (0, _internalJs.buildSegTimeText)(seg, timeFormat, context, true, props.defaultDisplayEventEnd);
        return (0, _preactJs.createElement)((0, _internalJs.EventContainer), Object.assign({}, props, {
            elTag: "a",
            elClasses: [
                'fc-daygrid-event',
                'fc-daygrid-dot-event'
            ],
            elAttrs: (0, _internalJs.getSegAnchorAttrs)(props.seg, context),
            defaultGenerator: renderInnerContent,
            timeText: timeText,
            isResizing: false,
            isDateSelecting: false
        }));
    }
}
function renderInnerContent(renderProps) {
    return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, (0, _preactJs.createElement)("div", {
        className: "fc-daygrid-event-dot",
        style: {
            borderColor: renderProps.borderColor || renderProps.backgroundColor
        }
    }), renderProps.timeText && (0, _preactJs.createElement)("div", {
        className: "fc-event-time"
    }, renderProps.timeText), (0, _preactJs.createElement)("div", {
        className: "fc-event-title"
    }, renderProps.event.title || (0, _preactJs.createElement)((0, _preactJs.Fragment), null, "\u00A0")));
}
class TableCellMoreLink extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.compileSegs = (0, _internalJs.memoize)(compileSegs);
    }
    render() {
        let { props } = this;
        let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements);
        return (0, _preactJs.createElement)((0, _internalJs.MoreLinkContainer), {
            elClasses: [
                'fc-daygrid-more-link'
            ],
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            allDayDate: props.allDayDate,
            moreCnt: props.moreCnt,
            allSegs: allSegs,
            hiddenSegs: invisibleSegs,
            alignmentElRef: props.alignmentElRef,
            alignGridTop: props.alignGridTop,
            extraDateSpan: props.extraDateSpan,
            popoverContent: ()=>{
                let isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};
                return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, allSegs.map((seg)=>{
                    let instanceId = seg.eventRange.instance.instanceId;
                    return (0, _preactJs.createElement)("div", {
                        className: "fc-daygrid-event-harness",
                        key: instanceId,
                        style: {
                            visibility: isForcedInvisible[instanceId] ? 'hidden' : ''
                        }
                    }, hasListItemDisplay(seg) ? (0, _preactJs.createElement)(TableListItemEvent, Object.assign({
                        seg: seg,
                        isDragging: false,
                        isSelected: instanceId === props.eventSelection,
                        defaultDisplayEventEnd: false
                    }, (0, _internalJs.getSegMeta)(seg, props.todayRange))) : (0, _preactJs.createElement)(TableBlockEvent, Object.assign({
                        seg: seg,
                        isDragging: false,
                        isResizing: false,
                        isDateSelecting: false,
                        isSelected: instanceId === props.eventSelection,
                        defaultDisplayEventEnd: false
                    }, (0, _internalJs.getSegMeta)(seg, props.todayRange))));
                }));
            }
        });
    }
}
function compileSegs(singlePlacements) {
    let allSegs = [];
    let invisibleSegs = [];
    for (let placement of singlePlacements){
        allSegs.push(placement.seg);
        if (!placement.isVisible) invisibleSegs.push(placement.seg);
    }
    return {
        allSegs,
        invisibleSegs
    };
}
const DEFAULT_WEEK_NUM_FORMAT = (0, _internalJs.createFormatter)({
    week: 'narrow'
});
class TableCell extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.rootElRef = (0, _preactJs.createRef)();
        this.state = {
            dayNumberId: (0, _internalJs.getUniqueDomId)()
        };
        this.handleRootEl = (el)=>{
            (0, _internalJs.setRef)(this.rootElRef, el);
            (0, _internalJs.setRef)(this.props.elRef, el);
        };
    }
    render() {
        let { context, props, state, rootElRef } = this;
        let { options, dateEnv } = context;
        let { date, dateProfile } = props;
        // TODO: memoize this?
        const isMonthStart = props.showDayNumber && shouldDisplayMonthStart(date, dateProfile.currentRange, dateEnv);
        return (0, _preactJs.createElement)((0, _internalJs.DayCellContainer), {
            elTag: "td",
            elRef: this.handleRootEl,
            elClasses: [
                'fc-daygrid-day',
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign(Object.assign(Object.assign({}, props.extraDataAttrs), props.showDayNumber ? {
                'aria-labelledby': state.dayNumberId
            } : {}), {
                role: 'gridcell'
            }),
            defaultGenerator: renderTopInner,
            date: date,
            dateProfile: dateProfile,
            todayRange: props.todayRange,
            showDayNumber: props.showDayNumber,
            isMonthStart: isMonthStart,
            extraRenderProps: props.extraRenderProps
        }, (InnerContent, renderProps)=>(0, _preactJs.createElement)("div", {
                ref: props.innerElRef,
                className: "fc-daygrid-day-frame fc-scrollgrid-sync-inner",
                style: {
                    minHeight: props.minHeight
                }
            }, props.showWeekNumber && (0, _preactJs.createElement)((0, _internalJs.WeekNumberContainer), {
                elTag: "a",
                elClasses: [
                    'fc-daygrid-week-number'
                ],
                elAttrs: (0, _internalJs.buildNavLinkAttrs)(context, date, 'week'),
                date: date,
                defaultFormat: DEFAULT_WEEK_NUM_FORMAT
            }), !renderProps.isDisabled && (props.showDayNumber || (0, _internalJs.hasCustomDayCellContent)(options) || props.forceDayTop) ? (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-top"
            }, (0, _preactJs.createElement)(InnerContent, {
                elTag: "a",
                elClasses: [
                    'fc-daygrid-day-number',
                    isMonthStart && 'fc-daygrid-month-start'
                ],
                elAttrs: Object.assign(Object.assign({}, (0, _internalJs.buildNavLinkAttrs)(context, date)), {
                    id: state.dayNumberId
                })
            })) : props.showDayNumber ? // for creating correct amount of space (see issue #7162)
            (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-top",
                style: {
                    visibility: 'hidden'
                }
            }, (0, _preactJs.createElement)("a", {
                className: "fc-daygrid-day-number"
            }, "\u00A0")) : undefined, (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-events",
                ref: props.fgContentElRef
            }, props.fgContent, (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-bottom",
                style: {
                    marginTop: props.moreMarginTop
                }
            }, (0, _preactJs.createElement)(TableCellMoreLink, {
                allDayDate: date,
                singlePlacements: props.singlePlacements,
                moreCnt: props.moreCnt,
                alignmentElRef: rootElRef,
                alignGridTop: !props.showDayNumber,
                extraDateSpan: props.extraDateSpan,
                dateProfile: props.dateProfile,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                todayRange: props.todayRange
            }))), (0, _preactJs.createElement)("div", {
                className: "fc-daygrid-day-bg"
            }, props.bgContent)));
    }
}
function renderTopInner(props) {
    return props.dayNumberText || (0, _preactJs.createElement)((0, _preactJs.Fragment), null, "\u00A0");
}
function shouldDisplayMonthStart(date, currentRange, dateEnv) {
    const { start: currentStart, end: currentEnd } = currentRange;
    const currentEndIncl = (0, _internalJs.addMs)(currentEnd, -1);
    const currentFirstYear = dateEnv.getYear(currentStart);
    const currentFirstMonth = dateEnv.getMonth(currentStart);
    const currentLastYear = dateEnv.getYear(currentEndIncl);
    const currentLastMonth = dateEnv.getMonth(currentEndIncl);
    // spans more than one month?
    return !(currentFirstYear === currentLastYear && currentFirstMonth === currentLastMonth) && Boolean(// first date in current view?
    date.valueOf() === currentStart.valueOf() || // a month-start that's within the current range?
    dateEnv.getDay(date) === 1 && date.valueOf() < currentEnd.valueOf());
}
function generateSegKey(seg) {
    return seg.eventRange.instance.instanceId + ':' + seg.firstCol;
}
function generateSegUid(seg) {
    return generateSegKey(seg) + ':' + seg.lastCol;
}
function computeFgSegPlacement(segs, dayMaxEvents, dayMaxEventRows, strictOrder, segHeights, maxContentHeight, cells) {
    let hierarchy = new DayGridSegHierarchy((segEntry)=>{
        // TODO: more DRY with generateSegUid
        let segUid = segs[segEntry.index].eventRange.instance.instanceId + ':' + segEntry.span.start + ':' + (segEntry.span.end - 1);
        // if no thickness known, assume 1 (if 0, so small it always fits)
        return segHeights[segUid] || 1;
    });
    hierarchy.allowReslicing = true;
    hierarchy.strictOrder = strictOrder;
    if (dayMaxEvents === true || dayMaxEventRows === true) {
        hierarchy.maxCoord = maxContentHeight;
        hierarchy.hiddenConsumes = true;
    } else if (typeof dayMaxEvents === 'number') hierarchy.maxStackCnt = dayMaxEvents;
    else if (typeof dayMaxEventRows === 'number') {
        hierarchy.maxStackCnt = dayMaxEventRows;
        hierarchy.hiddenConsumes = true;
    }
    // create segInputs only for segs with known heights
    let segInputs = [];
    let unknownHeightSegs = [];
    for(let i = 0; i < segs.length; i += 1){
        let seg = segs[i];
        let segUid = generateSegUid(seg);
        let eventHeight = segHeights[segUid];
        if (eventHeight != null) segInputs.push({
            index: i,
            span: {
                start: seg.firstCol,
                end: seg.lastCol + 1
            }
        });
        else unknownHeightSegs.push(seg);
    }
    let hiddenEntries = hierarchy.addSegs(segInputs);
    let segRects = hierarchy.toRects();
    let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells);
    let moreCnts = [];
    let moreMarginTops = [];
    // add segs with unknown heights
    for (let seg of unknownHeightSegs){
        multiColPlacements[seg.firstCol].push({
            seg,
            isVisible: false,
            isAbsolute: true,
            absoluteTop: 0,
            marginTop: 0
        });
        for(let col = seg.firstCol; col <= seg.lastCol; col += 1)singleColPlacements[col].push({
            seg: resliceSeg(seg, col, col + 1, cells),
            isVisible: false,
            isAbsolute: false,
            absoluteTop: 0,
            marginTop: 0
        });
    }
    // add the hidden entries
    for(let col = 0; col < cells.length; col += 1)moreCnts.push(0);
    for (let hiddenEntry of hiddenEntries){
        let seg = segs[hiddenEntry.index];
        let hiddenSpan = hiddenEntry.span;
        multiColPlacements[hiddenSpan.start].push({
            seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),
            isVisible: false,
            isAbsolute: true,
            absoluteTop: 0,
            marginTop: 0
        });
        for(let col = hiddenSpan.start; col < hiddenSpan.end; col += 1){
            moreCnts[col] += 1;
            singleColPlacements[col].push({
                seg: resliceSeg(seg, col, col + 1, cells),
                isVisible: false,
                isAbsolute: false,
                absoluteTop: 0,
                marginTop: 0
            });
        }
    }
    // deal with leftover margins
    for(let col = 0; col < cells.length; col += 1)moreMarginTops.push(leftoverMargins[col]);
    return {
        singleColPlacements,
        multiColPlacements,
        moreCnts,
        moreMarginTops
    };
}
// rects ordered by top coord, then left
function placeRects(allRects, segs, cells) {
    let rectsByEachCol = groupRectsByEachCol(allRects, cells.length);
    let singleColPlacements = [];
    let multiColPlacements = [];
    let leftoverMargins = [];
    for(let col = 0; col < cells.length; col += 1){
        let rects = rectsByEachCol[col];
        // compute all static segs in singlePlacements
        let singlePlacements = [];
        let currentHeight = 0;
        let currentMarginTop = 0;
        for (let rect of rects){
            let seg = segs[rect.index];
            singlePlacements.push({
                seg: resliceSeg(seg, col, col + 1, cells),
                isVisible: true,
                isAbsolute: false,
                absoluteTop: rect.levelCoord,
                marginTop: rect.levelCoord - currentHeight
            });
            currentHeight = rect.levelCoord + rect.thickness;
        }
        // compute mixed static/absolute segs in multiPlacements
        let multiPlacements = [];
        currentHeight = 0;
        currentMarginTop = 0;
        for (let rect of rects){
            let seg = segs[rect.index];
            let isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?
            let isFirstCol = rect.span.start === col;
            currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg
            currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg
            if (isAbsolute) {
                currentMarginTop += rect.thickness;
                if (isFirstCol) multiPlacements.push({
                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),
                    isVisible: true,
                    isAbsolute: true,
                    absoluteTop: rect.levelCoord,
                    marginTop: 0
                });
            } else if (isFirstCol) {
                multiPlacements.push({
                    seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),
                    isVisible: true,
                    isAbsolute: false,
                    absoluteTop: rect.levelCoord,
                    marginTop: currentMarginTop
                });
                currentMarginTop = 0;
            }
        }
        singleColPlacements.push(singlePlacements);
        multiColPlacements.push(multiPlacements);
        leftoverMargins.push(currentMarginTop);
    }
    return {
        singleColPlacements,
        multiColPlacements,
        leftoverMargins
    };
}
function groupRectsByEachCol(rects, colCnt) {
    let rectsByEachCol = [];
    for(let col = 0; col < colCnt; col += 1)rectsByEachCol.push([]);
    for (let rect of rects)for(let col = rect.span.start; col < rect.span.end; col += 1)rectsByEachCol[col].push(rect);
    return rectsByEachCol;
}
function resliceSeg(seg, spanStart, spanEnd, cells) {
    if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) return seg;
    let eventRange = seg.eventRange;
    let origRange = eventRange.range;
    let slicedRange = (0, _internalJs.intersectRanges)(origRange, {
        start: cells[spanStart].date,
        end: (0, _internalJs.addDays)(cells[spanEnd - 1].date, 1)
    });
    return Object.assign(Object.assign({}, seg), {
        firstCol: spanStart,
        lastCol: spanEnd - 1,
        eventRange: {
            def: eventRange.def,
            ui: Object.assign(Object.assign({}, eventRange.ui), {
                durationEditable: false
            }),
            instance: eventRange.instance,
            range: slicedRange
        },
        isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),
        isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()
    });
}
class DayGridSegHierarchy extends (0, _internalJs.SegHierarchy) {
    constructor(){
        super(...arguments);
        // config
        this.hiddenConsumes = false;
        // allows us to keep hidden entries in the hierarchy so they take up space
        this.forceHidden = {};
    }
    addSegs(segInputs) {
        const hiddenSegs = super.addSegs(segInputs);
        const { entriesByLevel } = this;
        const excludeHidden = (entry)=>!this.forceHidden[(0, _internalJs.buildEntryKey)(entry)];
        // remove the forced-hidden segs
        for(let level = 0; level < entriesByLevel.length; level += 1)entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);
        return hiddenSegs;
    }
    handleInvalidInsertion(insertion, entry, hiddenEntries) {
        const { entriesByLevel, forceHidden } = this;
        const { touchingEntry, touchingLevel, touchingLateral } = insertion;
        // the entry that the new insertion is touching must be hidden
        if (this.hiddenConsumes && touchingEntry) {
            const touchingEntryId = (0, _internalJs.buildEntryKey)(touchingEntry);
            if (!forceHidden[touchingEntryId]) {
                if (this.allowReslicing) {
                    // split up the touchingEntry, reinsert it
                    const hiddenEntry = Object.assign(Object.assign({}, touchingEntry), {
                        span: (0, _internalJs.intersectSpans)(touchingEntry.span, entry.span)
                    });
                    // reinsert the area that turned into a "more" link (so no other entries try to
                    // occupy the space) but mark it forced-hidden
                    const hiddenEntryId = (0, _internalJs.buildEntryKey)(hiddenEntry);
                    forceHidden[hiddenEntryId] = true;
                    entriesByLevel[touchingLevel][touchingLateral] = hiddenEntry;
                    hiddenEntries.push(hiddenEntry);
                    this.splitEntry(touchingEntry, entry, hiddenEntries);
                } else {
                    forceHidden[touchingEntryId] = true;
                    hiddenEntries.push(touchingEntry);
                }
            }
        }
        // will try to reslice...
        super.handleInvalidInsertion(insertion, entry, hiddenEntries);
    }
}
class TableRow extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.cellElRefs = new (0, _internalJs.RefMap)(); // the <td>
        this.frameElRefs = new (0, _internalJs.RefMap)(); // the fc-daygrid-day-frame
        this.fgElRefs = new (0, _internalJs.RefMap)(); // the fc-daygrid-day-events
        this.segHarnessRefs = new (0, _internalJs.RefMap)(); // indexed by "instanceId:firstCol"
        this.rootElRef = (0, _preactJs.createRef)();
        this.state = {
            framePositions: null,
            maxContentHeight: null,
            segHeights: {}
        };
        this.handleResize = (isForced)=>{
            if (isForced) this.updateSizing(true); // isExternal=true
        };
    }
    render() {
        let { props, state, context } = this;
        let { options } = context;
        let colCnt = props.cells.length;
        let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);
        let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);
        let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);
        let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);
        let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement((0, _internalJs.sortEventSegs)(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.segHeights, state.maxContentHeight, props.cells);
        let isForcedInvisible = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};
        return (0, _preactJs.createElement)("tr", {
            ref: this.rootElRef,
            role: "row"
        }, props.renderIntro && props.renderIntro(), props.cells.map((cell, col)=>{
            let normalFgNodes = this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);
            let mirrorFgNodes = this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);
            return (0, _preactJs.createElement)(TableCell, {
                key: cell.key,
                elRef: this.cellElRefs.createRef(cell.key),
                innerElRef: this.frameElRefs.createRef(cell.key),
                dateProfile: props.dateProfile,
                date: cell.date,
                showDayNumber: props.showDayNumbers,
                showWeekNumber: props.showWeekNumbers && col === 0,
                forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */ ,
                todayRange: props.todayRange,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                extraRenderProps: cell.extraRenderProps,
                extraDataAttrs: cell.extraDataAttrs,
                extraClassNames: cell.extraClassNames,
                extraDateSpan: cell.extraDateSpan,
                moreCnt: moreCnts[col],
                moreMarginTop: moreMarginTops[col],
                singlePlacements: singleColPlacements[col],
                fgContentElRef: this.fgElRefs.createRef(cell.key),
                fgContent: (0, _preactJs.createElement)((0, _preactJs.Fragment), null, (0, _preactJs.createElement)((0, _preactJs.Fragment), null, normalFgNodes), (0, _preactJs.createElement)((0, _preactJs.Fragment), null, mirrorFgNodes)),
                bgContent: (0, _preactJs.createElement)((0, _preactJs.Fragment), null, this.renderFillSegs(highlightSegsByCol[col], 'highlight'), this.renderFillSegs(businessHoursByCol[col], 'non-business'), this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')),
                minHeight: props.cellMinHeight
            });
        }));
    }
    componentDidMount() {
        this.updateSizing(true);
        this.context.addResizeHandler(this.handleResize);
    }
    componentDidUpdate(prevProps, prevState) {
        let currentProps = this.props;
        this.updateSizing(!(0, _internalJs.isPropsEqual)(prevProps, currentProps));
    }
    componentWillUnmount() {
        this.context.removeResizeHandler(this.handleResize);
    }
    getHighlightSegs() {
        let { props } = this;
        if (props.eventDrag && props.eventDrag.segs.length) return props.eventDrag.segs;
        if (props.eventResize && props.eventResize.segs.length) return props.eventResize.segs;
        return props.dateSelectionSegs;
    }
    getMirrorSegs() {
        let { props } = this;
        if (props.eventResize && props.eventResize.segs.length) return props.eventResize.segs;
        return [];
    }
    renderFgSegs(col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {
        let { context } = this;
        let { eventSelection } = this.props;
        let { framePositions } = this.state;
        let defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1
        let isMirror = isDragging || isResizing || isDateSelecting;
        let nodes = [];
        if (framePositions) for (let placement of segPlacements){
            let { seg } = placement;
            let { instanceId } = seg.eventRange.instance;
            let isVisible = placement.isVisible && !isForcedInvisible[instanceId];
            let isAbsolute = placement.isAbsolute;
            let left = '';
            let right = '';
            if (isAbsolute) {
                if (context.isRtl) {
                    right = 0;
                    left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];
                } else {
                    left = 0;
                    right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];
                }
            }
            /*
                known bug: events that are force to be list-item but span multiple days still take up space in later columns
                todo: in print view, for multi-day events, don't display title within non-start/end segs
                */ nodes.push((0, _preactJs.createElement)("div", {
                className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),
                key: generateSegKey(seg),
                ref: isMirror ? null : this.segHarnessRefs.createRef(generateSegUid(seg)),
                style: {
                    visibility: isVisible ? '' : 'hidden',
                    marginTop: isAbsolute ? '' : placement.marginTop,
                    top: isAbsolute ? placement.absoluteTop : '',
                    left,
                    right
                }
            }, hasListItemDisplay(seg) ? (0, _preactJs.createElement)(TableListItemEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isSelected: instanceId === eventSelection,
                defaultDisplayEventEnd: defaultDisplayEventEnd
            }, (0, _internalJs.getSegMeta)(seg, todayRange))) : (0, _preactJs.createElement)(TableBlockEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isResizing: isResizing,
                isDateSelecting: isDateSelecting,
                isSelected: instanceId === eventSelection,
                defaultDisplayEventEnd: defaultDisplayEventEnd
            }, (0, _internalJs.getSegMeta)(seg, todayRange)))));
        }
        return nodes;
    }
    renderFillSegs(segs, fillType) {
        let { isRtl } = this.context;
        let { todayRange } = this.props;
        let { framePositions } = this.state;
        let nodes = [];
        if (framePositions) for (let seg of segs){
            let leftRightCss = isRtl ? {
                right: 0,
                left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]
            } : {
                left: 0,
                right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]
            };
            nodes.push((0, _preactJs.createElement)("div", {
                key: (0, _internalJs.buildEventRangeKey)(seg.eventRange),
                className: "fc-daygrid-bg-harness",
                style: leftRightCss
            }, fillType === 'bg-event' ? (0, _preactJs.createElement)((0, _internalJs.BgEvent), Object.assign({
                seg: seg
            }, (0, _internalJs.getSegMeta)(seg, todayRange))) : (0, _internalJs.renderFill)(fillType)));
        }
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), {}, ...nodes);
    }
    updateSizing(isExternalSizingChange) {
        let { props, state, frameElRefs } = this;
        if (!props.forPrint && props.clientWidth !== null // positioning ready?
        ) {
            if (isExternalSizingChange) {
                let frameEls = props.cells.map((cell)=>frameElRefs.currentMap[cell.key]);
                if (frameEls.length) {
                    let originEl = this.rootElRef.current;
                    let newPositionCache = new (0, _internalJs.PositionCache)(originEl, frameEls, true, false);
                    if (!state.framePositions || !state.framePositions.similarTo(newPositionCache)) this.setState({
                        framePositions: new (0, _internalJs.PositionCache)(originEl, frameEls, true, false)
                    });
                }
            }
            const oldSegHeights = this.state.segHeights;
            const newSegHeights = this.querySegHeights();
            const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;
            this.safeSetState({
                // HACK to prevent oscillations of events being shown/hidden from max-event-rows
                // Essentially, once you compute an element's height, never null-out.
                // TODO: always display all events, as visibility:hidden?
                segHeights: Object.assign(Object.assign({}, oldSegHeights), newSegHeights),
                maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null
            });
        }
    }
    querySegHeights() {
        let segElMap = this.segHarnessRefs.currentMap;
        let segHeights = {};
        // get the max height amongst instance segs
        for(let segUid in segElMap){
            let height = Math.round(segElMap[segUid].getBoundingClientRect().height);
            segHeights[segUid] = Math.max(segHeights[segUid] || 0, height);
        }
        return segHeights;
    }
    computeMaxContentHeight() {
        let firstKey = this.props.cells[0].key;
        let cellEl = this.cellElRefs.currentMap[firstKey];
        let fcContainerEl = this.fgElRefs.currentMap[firstKey];
        return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;
    }
    getCellEls() {
        let elMap = this.cellElRefs.currentMap;
        return this.props.cells.map((cell)=>elMap[cell.key]);
    }
}
TableRow.addStateEquality({
    segHeights: (0, _internalJs.isPropsEqual)
});
function buildMirrorPlacements(mirrorSegs, colPlacements) {
    if (!mirrorSegs.length) return [];
    let topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?
    return mirrorSegs.map((seg)=>({
            seg,
            isVisible: true,
            isAbsolute: true,
            absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],
            marginTop: 0
        }));
}
function buildAbsoluteTopHash(colPlacements) {
    let topsByInstanceId = {};
    for (let placements of colPlacements)for (let placement of placements)topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;
    return topsByInstanceId;
}
class TableRows extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.splitBusinessHourSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitBgEventSegs = (0, _internalJs.memoize)(splitAllDaySegsByRow);
        this.splitFgEventSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitDateSelectionSegs = (0, _internalJs.memoize)(splitSegsByRow);
        this.splitEventDrag = (0, _internalJs.memoize)(splitInteractionByRow);
        this.splitEventResize = (0, _internalJs.memoize)(splitInteractionByRow);
        this.rowRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        let rowCnt = props.cells.length;
        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);
        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);
        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);
        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);
        let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);
        let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);
        // for DayGrid view with many rows, force a min-height on cells so doesn't appear squished
        // choose 7 because a month view will have max 6 rows
        let cellMinHeight = rowCnt >= 7 && props.clientWidth ? props.clientWidth / context.options.aspectRatio / 6 : null;
        return (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
            unit: "day"
        }, (nowDate, todayRange)=>(0, _preactJs.createElement)((0, _preactJs.Fragment), null, props.cells.map((cells, row)=>(0, _preactJs.createElement)(TableRow, {
                    ref: this.rowRefs.createRef(row),
                    key: cells.length ? cells[0].date.toISOString() : row // in case there are no cells (like when resource view is loading)
                    ,
                    showDayNumbers: rowCnt > 1,
                    showWeekNumbers: props.showWeekNumbers,
                    todayRange: todayRange,
                    dateProfile: props.dateProfile,
                    cells: cells,
                    renderIntro: props.renderRowIntro,
                    businessHourSegs: businessHourSegsByRow[row],
                    eventSelection: props.eventSelection,
                    bgEventSegs: bgEventSegsByRow[row],
                    fgEventSegs: fgEventSegsByRow[row],
                    dateSelectionSegs: dateSelectionSegsByRow[row],
                    eventDrag: eventDragByRow[row],
                    eventResize: eventResizeByRow[row],
                    dayMaxEvents: props.dayMaxEvents,
                    dayMaxEventRows: props.dayMaxEventRows,
                    clientWidth: props.clientWidth,
                    clientHeight: props.clientHeight,
                    cellMinHeight: cellMinHeight,
                    forPrint: props.forPrint
                }))));
    }
    componentDidMount() {
        this.registerInteractiveComponent();
    }
    componentDidUpdate() {
        // for if started with zero cells
        this.registerInteractiveComponent();
    }
    registerInteractiveComponent() {
        if (!this.rootEl) {
            // HACK: need a daygrid wrapper parent to do positioning
            // NOTE: a daygrid resource view w/o resources can have zero cells
            const firstCellEl = this.rowRefs.currentMap[0].getCellEls()[0];
            const rootEl = firstCellEl ? firstCellEl.closest('.fc-daygrid-body') : null;
            if (rootEl) {
                this.rootEl = rootEl;
                this.context.registerInteractiveComponent(this, {
                    el: rootEl,
                    isHitComboAllowed: this.props.isHitComboAllowed
                });
            }
        }
    }
    componentWillUnmount() {
        if (this.rootEl) {
            this.context.unregisterInteractiveComponent(this);
            this.rootEl = null;
        }
    }
    // Hit System
    // ----------------------------------------------------------------------------------------------------
    prepareHits() {
        this.rowPositions = new (0, _internalJs.PositionCache)(this.rootEl, this.rowRefs.collect().map((rowObj)=>rowObj.getCellEls()[0]), false, true);
        this.colPositions = new (0, _internalJs.PositionCache)(this.rootEl, this.rowRefs.currentMap[0].getCellEls(), true, false);
    }
    queryHit(positionLeft, positionTop) {
        let { colPositions, rowPositions } = this;
        let col = colPositions.leftToIndex(positionLeft);
        let row = rowPositions.topToIndex(positionTop);
        if (row != null && col != null) {
            let cell = this.props.cells[row][col];
            return {
                dateProfile: this.props.dateProfile,
                dateSpan: Object.assign({
                    range: this.getCellRange(row, col),
                    allDay: true
                }, cell.extraDateSpan),
                dayEl: this.getCellEl(row, col),
                rect: {
                    left: colPositions.lefts[col],
                    right: colPositions.rights[col],
                    top: rowPositions.tops[row],
                    bottom: rowPositions.bottoms[row]
                },
                layer: 0
            };
        }
        return null;
    }
    getCellEl(row, col) {
        return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal
    }
    getCellRange(row, col) {
        let start = this.props.cells[row][col].date;
        let end = (0, _internalJs.addDays)(start, 1);
        return {
            start,
            end
        };
    }
}
function splitAllDaySegsByRow(segs, rowCnt) {
    return splitSegsByRow(segs.filter(isSegAllDay), rowCnt);
}
function isSegAllDay(seg) {
    return seg.eventRange.def.allDay;
}
class Table extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.elRef = (0, _preactJs.createRef)();
        this.needsScrollReset = false;
    }
    render() {
        let { props } = this;
        let { dayMaxEventRows, dayMaxEvents, expandRows } = props;
        let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;
        // if rows can't expand to fill fixed height, can't do balanced-height event limit
        // TODO: best place to normalize these options?
        if (limitViaBalanced && !expandRows) {
            limitViaBalanced = false;
            dayMaxEventRows = null;
            dayMaxEvents = null;
        }
        let classNames = [
            'fc-daygrid-body',
            limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced',
            expandRows ? '' : 'fc-daygrid-body-natural'
        ];
        return (0, _preactJs.createElement)("div", {
            ref: this.elRef,
            className: classNames.join(' '),
            style: {
                // these props are important to give this wrapper correct dimensions for interactions
                // TODO: if we set it here, can we avoid giving to inner tables?
                width: props.clientWidth,
                minWidth: props.tableMinWidth
            }
        }, (0, _preactJs.createElement)("table", {
            role: "presentation",
            className: "fc-scrollgrid-sync-table",
            style: {
                width: props.clientWidth,
                minWidth: props.tableMinWidth,
                height: expandRows ? props.clientHeight : ''
            }
        }, props.colGroupNode, (0, _preactJs.createElement)("tbody", {
            role: "presentation"
        }, (0, _preactJs.createElement)(TableRows, {
            dateProfile: props.dateProfile,
            cells: props.cells,
            renderRowIntro: props.renderRowIntro,
            showWeekNumbers: props.showWeekNumbers,
            clientWidth: props.clientWidth,
            clientHeight: props.clientHeight,
            businessHourSegs: props.businessHourSegs,
            bgEventSegs: props.bgEventSegs,
            fgEventSegs: props.fgEventSegs,
            dateSelectionSegs: props.dateSelectionSegs,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            dayMaxEvents: dayMaxEvents,
            dayMaxEventRows: dayMaxEventRows,
            forPrint: props.forPrint,
            isHitComboAllowed: props.isHitComboAllowed
        }))));
    }
    componentDidMount() {
        this.requestScrollReset();
    }
    componentDidUpdate(prevProps) {
        if (prevProps.dateProfile !== this.props.dateProfile) this.requestScrollReset();
        else this.flushScrollReset();
    }
    requestScrollReset() {
        this.needsScrollReset = true;
        this.flushScrollReset();
    }
    flushScrollReset() {
        if (this.needsScrollReset && this.props.clientWidth // sizes computed?
        ) {
            const subjectEl = getScrollSubjectEl(this.elRef.current, this.props.dateProfile);
            if (subjectEl) {
                const originEl = subjectEl.closest('.fc-daygrid-body');
                const scrollEl = originEl.closest('.fc-scroller');
                const scrollTop = subjectEl.getBoundingClientRect().top - originEl.getBoundingClientRect().top;
                scrollEl.scrollTop = scrollTop ? scrollTop + 1 : 0; // overcome border
            }
            this.needsScrollReset = false;
        }
    }
}
function getScrollSubjectEl(containerEl, dateProfile) {
    let el;
    if (dateProfile.currentRangeUnit.match(/year|month/)) el = containerEl.querySelector(`[data-date="${(0, _internalJs.formatIsoMonthStr)(dateProfile.currentDate)}-01"]`);
    if (!el) el = containerEl.querySelector(`[data-date="${(0, _internalJs.formatDayString)(dateProfile.currentDate)}"]`);
    return el;
}
class DayTableSlicer extends (0, _internalJs.Slicer) {
    constructor(){
        super(...arguments);
        this.forceDayIfListItem = true;
    }
    sliceRange(dateRange, dayTableModel) {
        return dayTableModel.sliceRange(dateRange);
    }
}
class DayTable extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.slicer = new DayTableSlicer();
        this.tableRef = (0, _preactJs.createRef)();
    }
    render() {
        let { props, context } = this;
        return (0, _preactJs.createElement)(Table, Object.assign({
            ref: this.tableRef
        }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {
            dateProfile: props.dateProfile,
            cells: props.dayTableModel.cells,
            colGroupNode: props.colGroupNode,
            tableMinWidth: props.tableMinWidth,
            renderRowIntro: props.renderRowIntro,
            dayMaxEvents: props.dayMaxEvents,
            dayMaxEventRows: props.dayMaxEventRows,
            showWeekNumbers: props.showWeekNumbers,
            expandRows: props.expandRows,
            headerAlignElRef: props.headerAlignElRef,
            clientWidth: props.clientWidth,
            clientHeight: props.clientHeight,
            forPrint: props.forPrint
        }));
    }
}
class DayTableView extends TableView {
    constructor(){
        super(...arguments);
        this.buildDayTableModel = (0, _internalJs.memoize)(buildDayTableModel);
        this.headerRef = (0, _preactJs.createRef)();
        this.tableRef = (0, _preactJs.createRef)();
    // can't override any lifecycle methods from parent
    }
    render() {
        let { options, dateProfileGenerator } = this.context;
        let { props } = this;
        let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);
        let headerContent = options.dayHeaders && (0, _preactJs.createElement)((0, _internalJs.DayHeader), {
            ref: this.headerRef,
            dateProfile: props.dateProfile,
            dates: dayTableModel.headerDates,
            datesRepDistinctDays: dayTableModel.rowCnt === 1
        });
        let bodyContent = (contentArg)=>(0, _preactJs.createElement)(DayTable, {
                ref: this.tableRef,
                dateProfile: props.dateProfile,
                dayTableModel: dayTableModel,
                businessHours: props.businessHours,
                dateSelection: props.dateSelection,
                eventStore: props.eventStore,
                eventUiBases: props.eventUiBases,
                eventSelection: props.eventSelection,
                eventDrag: props.eventDrag,
                eventResize: props.eventResize,
                nextDayThreshold: options.nextDayThreshold,
                colGroupNode: contentArg.tableColGroupNode,
                tableMinWidth: contentArg.tableMinWidth,
                dayMaxEvents: options.dayMaxEvents,
                dayMaxEventRows: options.dayMaxEventRows,
                showWeekNumbers: options.weekNumbers,
                expandRows: !props.isHeightAuto,
                headerAlignElRef: this.headerElRef,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                forPrint: props.forPrint
            });
        return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);
    }
}
function buildDayTableModel(dateProfile, dateProfileGenerator) {
    let daySeries = new (0, _internalJs.DaySeriesModel)(dateProfile.renderRange, dateProfileGenerator);
    return new (0, _internalJs.DayTableModel)(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));
}
class TableDateProfileGenerator extends (0, _internalJs.DateProfileGenerator) {
    // Computes the date range that will be rendered
    buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay) {
        let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay);
        let { props } = this;
        return buildDayTableRenderRange({
            currentRange: renderRange,
            snapToWeek: /^(year|month)$/.test(currentRangeUnit),
            fixedWeekCount: props.fixedWeekCount,
            dateEnv: props.dateEnv
        });
    }
}
function buildDayTableRenderRange(props) {
    let { dateEnv, currentRange } = props;
    let { start, end } = currentRange;
    let endOfWeek;
    // year and month views should be aligned with weeks. this is already done for week
    if (props.snapToWeek) {
        start = dateEnv.startOfWeek(start);
        // make end-of-week if not already
        endOfWeek = dateEnv.startOfWeek(end);
        if (endOfWeek.valueOf() !== end.valueOf()) end = (0, _internalJs.addWeeks)(endOfWeek, 1);
    }
    // ensure 6 weeks
    if (props.fixedWeekCount) {
        // TODO: instead of these date-math gymnastics (for multimonth view),
        // compute dateprofiles of all months, then use start of first and end of last.
        let lastMonthRenderStart = dateEnv.startOfWeek(dateEnv.startOfMonth((0, _internalJs.addDays)(currentRange.end, -1)));
        let rowCnt = Math.ceil((0, _internalJs.diffWeeks)(lastMonthRenderStart, end));
        end = (0, _internalJs.addWeeks)(end, 6 - rowCnt);
    }
    return {
        start,
        end
    };
}
var css_248z = ":root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:\"\";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:\"\";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}";
(0, _internalJs.injectStyles)(css_248z);

},{"@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4CP9d":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BASE_OPTION_DEFAULTS", ()=>(0, _internalCommonJs.e));
parcelHelpers.export(exports, "BaseComponent", ()=>(0, _internalCommonJs.B));
parcelHelpers.export(exports, "BgEvent", ()=>(0, _internalCommonJs.cm));
parcelHelpers.export(exports, "CalendarImpl", ()=>(0, _internalCommonJs.a7));
parcelHelpers.export(exports, "CalendarRoot", ()=>(0, _internalCommonJs.a9));
parcelHelpers.export(exports, "ContentContainer", ()=>(0, _internalCommonJs.C));
parcelHelpers.export(exports, "CustomRenderingStore", ()=>(0, _internalCommonJs.cv));
parcelHelpers.export(exports, "DateComponent", ()=>(0, _internalCommonJs.bc));
parcelHelpers.export(exports, "DateEnv", ()=>(0, _internalCommonJs.Q));
parcelHelpers.export(exports, "DateProfileGenerator", ()=>(0, _internalCommonJs.R));
parcelHelpers.export(exports, "DayCellContainer", ()=>(0, _internalCommonJs.ci));
parcelHelpers.export(exports, "DayHeader", ()=>(0, _internalCommonJs.bI));
parcelHelpers.export(exports, "DaySeriesModel", ()=>(0, _internalCommonJs.bM));
parcelHelpers.export(exports, "DayTableModel", ()=>(0, _internalCommonJs.bT));
parcelHelpers.export(exports, "DelayedRunner", ()=>(0, _internalCommonJs.D));
parcelHelpers.export(exports, "ElementDragging", ()=>(0, _internalCommonJs.bF));
parcelHelpers.export(exports, "ElementScrollController", ()=>(0, _internalCommonJs.ba));
parcelHelpers.export(exports, "Emitter", ()=>(0, _internalCommonJs.F));
parcelHelpers.export(exports, "EventContainer", ()=>(0, _internalCommonJs.ck));
parcelHelpers.export(exports, "EventImpl", ()=>(0, _internalCommonJs._));
parcelHelpers.export(exports, "Interaction", ()=>(0, _internalCommonJs.X));
parcelHelpers.export(exports, "MoreLinkContainer", ()=>(0, _internalCommonJs.co));
parcelHelpers.export(exports, "NamedTimeZoneImpl", ()=>(0, _internalCommonJs.bw));
parcelHelpers.export(exports, "NowIndicatorContainer", ()=>(0, _internalCommonJs.ch));
parcelHelpers.export(exports, "NowTimer", ()=>(0, _internalCommonJs.a6));
parcelHelpers.export(exports, "PositionCache", ()=>(0, _internalCommonJs.b8));
parcelHelpers.export(exports, "RefMap", ()=>(0, _internalCommonJs.cd));
parcelHelpers.export(exports, "ScrollController", ()=>(0, _internalCommonJs.b9));
parcelHelpers.export(exports, "ScrollResponder", ()=>(0, _internalCommonJs.cf));
parcelHelpers.export(exports, "Scroller", ()=>(0, _internalCommonJs.cb));
parcelHelpers.export(exports, "SegHierarchy", ()=>(0, _internalCommonJs.by));
parcelHelpers.export(exports, "SimpleScrollGrid", ()=>(0, _internalCommonJs.bZ));
parcelHelpers.export(exports, "Slicer", ()=>(0, _internalCommonJs.bU));
parcelHelpers.export(exports, "Splitter", ()=>(0, _internalCommonJs.aW));
parcelHelpers.export(exports, "StandardEvent", ()=>(0, _internalCommonJs.cg));
parcelHelpers.export(exports, "TableDateCell", ()=>(0, _internalCommonJs.bK));
parcelHelpers.export(exports, "TableDowCell", ()=>(0, _internalCommonJs.bL));
parcelHelpers.export(exports, "Theme", ()=>(0, _internalCommonJs.T));
parcelHelpers.export(exports, "ViewContainer", ()=>(0, _internalCommonJs.cq));
parcelHelpers.export(exports, "ViewContextType", ()=>(0, _internalCommonJs.V));
parcelHelpers.export(exports, "WeekNumberContainer", ()=>(0, _internalCommonJs.cn));
parcelHelpers.export(exports, "WindowScrollController", ()=>(0, _internalCommonJs.bb));
parcelHelpers.export(exports, "addDays", ()=>(0, _internalCommonJs.t));
parcelHelpers.export(exports, "addDurations", ()=>(0, _internalCommonJs.bn));
parcelHelpers.export(exports, "addMs", ()=>(0, _internalCommonJs.be));
parcelHelpers.export(exports, "addWeeks", ()=>(0, _internalCommonJs.bf));
parcelHelpers.export(exports, "allowContextMenu", ()=>(0, _internalCommonJs.as));
parcelHelpers.export(exports, "allowSelection", ()=>(0, _internalCommonJs.aq));
parcelHelpers.export(exports, "applyMutationToEventStore", ()=>(0, _internalCommonJs.bV));
parcelHelpers.export(exports, "applyStyle", ()=>(0, _internalCommonJs.aN));
parcelHelpers.export(exports, "asCleanDays", ()=>(0, _internalCommonJs.bl));
parcelHelpers.export(exports, "asRoughMinutes", ()=>(0, _internalCommonJs.bo));
parcelHelpers.export(exports, "asRoughMs", ()=>(0, _internalCommonJs.bq));
parcelHelpers.export(exports, "asRoughSeconds", ()=>(0, _internalCommonJs.bp));
parcelHelpers.export(exports, "binarySearch", ()=>(0, _internalCommonJs.bB));
parcelHelpers.export(exports, "buildElAttrs", ()=>(0, _internalCommonJs.cu));
parcelHelpers.export(exports, "buildEntryKey", ()=>(0, _internalCommonJs.bz));
parcelHelpers.export(exports, "buildEventApis", ()=>(0, _internalCommonJs.w));
parcelHelpers.export(exports, "buildEventRangeKey", ()=>(0, _internalCommonJs.bR));
parcelHelpers.export(exports, "buildIsoString", ()=>(0, _internalCommonJs.bu));
parcelHelpers.export(exports, "buildNavLinkAttrs", ()=>(0, _internalCommonJs.a_));
parcelHelpers.export(exports, "buildSegTimeText", ()=>(0, _internalCommonJs.bO));
parcelHelpers.export(exports, "collectFromHash", ()=>(0, _internalCommonJs.aJ));
parcelHelpers.export(exports, "combineEventUis", ()=>(0, _internalCommonJs.aV));
parcelHelpers.export(exports, "compareByFieldSpecs", ()=>(0, _internalCommonJs.an));
parcelHelpers.export(exports, "compareNumbers", ()=>(0, _internalCommonJs.at));
parcelHelpers.export(exports, "compareObjs", ()=>(0, _internalCommonJs.aI));
parcelHelpers.export(exports, "computeEarliestSegStart", ()=>(0, _internalCommonJs.cp));
parcelHelpers.export(exports, "computeEdges", ()=>(0, _internalCommonJs.b2));
parcelHelpers.export(exports, "computeFallbackHeaderFormat", ()=>(0, _internalCommonJs.bJ));
parcelHelpers.export(exports, "computeInnerRect", ()=>(0, _internalCommonJs.b1));
parcelHelpers.export(exports, "computeRect", ()=>(0, _internalCommonJs.b4));
parcelHelpers.export(exports, "computeShrinkWidth", ()=>(0, _internalCommonJs.c5));
parcelHelpers.export(exports, "computeVisibleDayRange", ()=>(0, _internalCommonJs.aw));
parcelHelpers.export(exports, "config", ()=>(0, _internalCommonJs.bG));
parcelHelpers.export(exports, "constrainPoint", ()=>(0, _internalCommonJs.aE));
parcelHelpers.export(exports, "createDuration", ()=>(0, _internalCommonJs.d));
parcelHelpers.export(exports, "createEmptyEventStore", ()=>(0, _internalCommonJs.H));
parcelHelpers.export(exports, "createEventInstance", ()=>(0, _internalCommonJs.ah));
parcelHelpers.export(exports, "createEventUi", ()=>(0, _internalCommonJs.S));
parcelHelpers.export(exports, "createFormatter", ()=>(0, _internalCommonJs.x));
parcelHelpers.export(exports, "diffDates", ()=>(0, _internalCommonJs.ay));
parcelHelpers.export(exports, "diffDayAndTime", ()=>(0, _internalCommonJs.bi));
parcelHelpers.export(exports, "diffDays", ()=>(0, _internalCommonJs.bj));
parcelHelpers.export(exports, "diffPoints", ()=>(0, _internalCommonJs.aG));
parcelHelpers.export(exports, "diffWeeks", ()=>(0, _internalCommonJs.bg));
parcelHelpers.export(exports, "diffWholeDays", ()=>(0, _internalCommonJs.y));
parcelHelpers.export(exports, "diffWholeWeeks", ()=>(0, _internalCommonJs.bh));
parcelHelpers.export(exports, "disableCursor", ()=>(0, _internalCommonJs.av));
parcelHelpers.export(exports, "elementClosest", ()=>(0, _internalCommonJs.Z));
parcelHelpers.export(exports, "elementMatches", ()=>(0, _internalCommonJs.aO));
parcelHelpers.export(exports, "enableCursor", ()=>(0, _internalCommonJs.au));
parcelHelpers.export(exports, "eventTupleToStore", ()=>(0, _internalCommonJs.aU));
parcelHelpers.export(exports, "filterHash", ()=>(0, _internalCommonJs.h));
parcelHelpers.export(exports, "findDirectChildren", ()=>(0, _internalCommonJs.aL));
parcelHelpers.export(exports, "findElements", ()=>(0, _internalCommonJs.aK));
parcelHelpers.export(exports, "flexibleCompare", ()=>(0, _internalCommonJs.ao));
parcelHelpers.export(exports, "formatDayString", ()=>(0, _internalCommonJs.bt));
parcelHelpers.export(exports, "formatIsoMonthStr", ()=>(0, _internalCommonJs.bv));
parcelHelpers.export(exports, "formatIsoTimeString", ()=>(0, _internalCommonJs.bs));
parcelHelpers.export(exports, "getAllowYScrolling", ()=>(0, _internalCommonJs.c3));
parcelHelpers.export(exports, "getCanVGrowWithinCell", ()=>(0, _internalCommonJs.aR));
parcelHelpers.export(exports, "getClippingParents", ()=>(0, _internalCommonJs.b3));
parcelHelpers.export(exports, "getDateMeta", ()=>(0, _internalCommonJs.aY));
parcelHelpers.export(exports, "getDayClassNames", ()=>(0, _internalCommonJs.aX));
parcelHelpers.export(exports, "getDefaultEventEnd", ()=>(0, _internalCommonJs.cs));
parcelHelpers.export(exports, "getElSeg", ()=>(0, _internalCommonJs.Y));
parcelHelpers.export(exports, "getEntrySpanEnd", ()=>(0, _internalCommonJs.bA));
parcelHelpers.export(exports, "getEventTargetViaRoot", ()=>(0, _internalCommonJs.aP));
parcelHelpers.export(exports, "getIsRtlScrollbarOnLeft", ()=>(0, _internalCommonJs.ce));
parcelHelpers.export(exports, "getRectCenter", ()=>(0, _internalCommonJs.aF));
parcelHelpers.export(exports, "getRelevantEvents", ()=>(0, _internalCommonJs.aT));
parcelHelpers.export(exports, "getScrollGridClassNames", ()=>(0, _internalCommonJs.c0));
parcelHelpers.export(exports, "getScrollbarWidths", ()=>(0, _internalCommonJs.cc));
parcelHelpers.export(exports, "getSectionClassNames", ()=>(0, _internalCommonJs.c1));
parcelHelpers.export(exports, "getSectionHasLiquidHeight", ()=>(0, _internalCommonJs.c2));
parcelHelpers.export(exports, "getSegAnchorAttrs", ()=>(0, _internalCommonJs.bS));
parcelHelpers.export(exports, "getSegMeta", ()=>(0, _internalCommonJs.bQ));
parcelHelpers.export(exports, "getSlotClassNames", ()=>(0, _internalCommonJs.aZ));
parcelHelpers.export(exports, "getStickyFooterScrollbar", ()=>(0, _internalCommonJs.c9));
parcelHelpers.export(exports, "getStickyHeaderDates", ()=>(0, _internalCommonJs.ca));
parcelHelpers.export(exports, "getUniqueDomId", ()=>(0, _internalCommonJs.a3));
parcelHelpers.export(exports, "greatestDurationDenominator", ()=>(0, _internalCommonJs.c));
parcelHelpers.export(exports, "groupIntersectingEntries", ()=>(0, _internalCommonJs.bC));
parcelHelpers.export(exports, "guid", ()=>(0, _internalCommonJs.g));
parcelHelpers.export(exports, "hasBgRendering", ()=>(0, _internalCommonJs.bN));
parcelHelpers.export(exports, "hasCustomDayCellContent", ()=>(0, _internalCommonJs.cj));
parcelHelpers.export(exports, "hasShrinkWidth", ()=>(0, _internalCommonJs.b_));
parcelHelpers.export(exports, "identity", ()=>(0, _internalCommonJs.n));
parcelHelpers.export(exports, "injectStyles", ()=>(0, _internalCommonJs.ct));
parcelHelpers.export(exports, "interactionSettingsStore", ()=>(0, _internalCommonJs.a5));
parcelHelpers.export(exports, "interactionSettingsToStore", ()=>(0, _internalCommonJs.bE));
parcelHelpers.export(exports, "intersectRanges", ()=>(0, _internalCommonJs.o));
parcelHelpers.export(exports, "intersectRects", ()=>(0, _internalCommonJs.aC));
parcelHelpers.export(exports, "intersectSpans", ()=>(0, _internalCommonJs.bD));
parcelHelpers.export(exports, "isArraysEqual", ()=>(0, _internalCommonJs.i));
parcelHelpers.export(exports, "isColPropsEqual", ()=>(0, _internalCommonJs.c7));
parcelHelpers.export(exports, "isDateSelectionValid", ()=>(0, _internalCommonJs.bY));
parcelHelpers.export(exports, "isDateSpansEqual", ()=>(0, _internalCommonJs.bd));
parcelHelpers.export(exports, "isInt", ()=>(0, _internalCommonJs.al));
parcelHelpers.export(exports, "isInteractionValid", ()=>(0, _internalCommonJs.bX));
parcelHelpers.export(exports, "isMultiDayRange", ()=>(0, _internalCommonJs.ax));
parcelHelpers.export(exports, "isPropsEqual", ()=>(0, _internalCommonJs.E));
parcelHelpers.export(exports, "isPropsValid", ()=>(0, _internalCommonJs.bW));
parcelHelpers.export(exports, "isValidDate", ()=>(0, _internalCommonJs.bk));
parcelHelpers.export(exports, "mapHash", ()=>(0, _internalCommonJs.a));
parcelHelpers.export(exports, "memoize", ()=>(0, _internalCommonJs.z));
parcelHelpers.export(exports, "memoizeArraylike", ()=>(0, _internalCommonJs.aA));
parcelHelpers.export(exports, "memoizeHashlike", ()=>(0, _internalCommonJs.aB));
parcelHelpers.export(exports, "memoizeObjArg", ()=>(0, _internalCommonJs.A));
parcelHelpers.export(exports, "mergeEventStores", ()=>(0, _internalCommonJs.aS));
parcelHelpers.export(exports, "multiplyDuration", ()=>(0, _internalCommonJs.bm));
parcelHelpers.export(exports, "padStart", ()=>(0, _internalCommonJs.ak));
parcelHelpers.export(exports, "parseBusinessHours", ()=>(0, _internalCommonJs.U));
parcelHelpers.export(exports, "parseClassNames", ()=>(0, _internalCommonJs.aQ));
parcelHelpers.export(exports, "parseDragMeta", ()=>(0, _internalCommonJs.bH));
parcelHelpers.export(exports, "parseEventDef", ()=>(0, _internalCommonJs.ai));
parcelHelpers.export(exports, "parseFieldSpecs", ()=>(0, _internalCommonJs.am));
parcelHelpers.export(exports, "parseMarker", ()=>(0, _internalCommonJs.bx));
parcelHelpers.export(exports, "pointInsideRect", ()=>(0, _internalCommonJs.aD));
parcelHelpers.export(exports, "preventContextMenu", ()=>(0, _internalCommonJs.ar));
parcelHelpers.export(exports, "preventDefault", ()=>(0, _internalCommonJs.a$));
parcelHelpers.export(exports, "preventSelection", ()=>(0, _internalCommonJs.ap));
parcelHelpers.export(exports, "rangeContainsMarker", ()=>(0, _internalCommonJs.G));
parcelHelpers.export(exports, "rangeContainsRange", ()=>(0, _internalCommonJs.b7));
parcelHelpers.export(exports, "rangesEqual", ()=>(0, _internalCommonJs.b5));
parcelHelpers.export(exports, "rangesIntersect", ()=>(0, _internalCommonJs.b6));
parcelHelpers.export(exports, "refineEventDef", ()=>(0, _internalCommonJs.aj));
parcelHelpers.export(exports, "refineProps", ()=>(0, _internalCommonJs.ag));
parcelHelpers.export(exports, "removeElement", ()=>(0, _internalCommonJs.aM));
parcelHelpers.export(exports, "removeExact", ()=>(0, _internalCommonJs.az));
parcelHelpers.export(exports, "renderChunkContent", ()=>(0, _internalCommonJs.c4));
parcelHelpers.export(exports, "renderFill", ()=>(0, _internalCommonJs.cl));
parcelHelpers.export(exports, "renderMicroColGroup", ()=>(0, _internalCommonJs.b$));
parcelHelpers.export(exports, "renderScrollShim", ()=>(0, _internalCommonJs.c8));
parcelHelpers.export(exports, "requestJson", ()=>(0, _internalCommonJs.r));
parcelHelpers.export(exports, "sanitizeShrinkWidth", ()=>(0, _internalCommonJs.c6));
parcelHelpers.export(exports, "setRef", ()=>(0, _internalCommonJs.W));
parcelHelpers.export(exports, "sliceEventStore", ()=>(0, _internalCommonJs.ad));
parcelHelpers.export(exports, "sortEventSegs", ()=>(0, _internalCommonJs.bP));
parcelHelpers.export(exports, "startOfDay", ()=>(0, _internalCommonJs.q));
parcelHelpers.export(exports, "translateRect", ()=>(0, _internalCommonJs.aH));
parcelHelpers.export(exports, "triggerDateSelect", ()=>(0, _internalCommonJs.cr));
parcelHelpers.export(exports, "unpromisify", ()=>(0, _internalCommonJs.u));
parcelHelpers.export(exports, "whenTransitionDone", ()=>(0, _internalCommonJs.b0));
parcelHelpers.export(exports, "wholeDivideDurations", ()=>(0, _internalCommonJs.br));
var _internalCommonJs = require("./internal-common.js");
var _preact = require("preact");
var _compat = require("preact/compat");

},{"./internal-common.js":"ixm8z","preact":"agj7k","preact/compat":"cjkvk","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lbU3B":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPortal", ()=>(0, _compat.createPortal));
parcelHelpers.export(exports, "createContext", ()=>(0, _internalCommonJs.af));
parcelHelpers.export(exports, "flushSync", ()=>(0, _internalCommonJs.a8));
var _preact = require("preact");
parcelHelpers.exportAll(_preact, exports);
var _compat = require("preact/compat");
var _internalCommonJs = require("./internal-common.js");

},{"preact":"agj7k","preact/compat":"cjkvk","./internal-common.js":"ixm8z","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"l0uCF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("./internal.js");
var _internalJs1 = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var _internalJs2 = require("@fullcalendar/daygrid/internal.js");
const OPTION_REFINERS = {
    allDaySlot: Boolean
};
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/timegrid',
    initialView: 'timeGridWeek',
    optionRefiners: OPTION_REFINERS,
    views: {
        timeGrid: {
            component: (0, _internalJs.DayTimeColsView),
            usesMinMaxTime: true,
            allDaySlot: true,
            slotDuration: '00:30:00',
            slotEventOverlap: true
        },
        timeGridDay: {
            type: 'timeGrid',
            duration: {
                days: 1
            }
        },
        timeGridWeek: {
            type: 'timeGrid',
            duration: {
                weeks: 1
            }
        }
    }
});

},{"@fullcalendar/core/index.js":"9u9jF","./internal.js":"10pnm","@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@fullcalendar/daygrid/internal.js":"4zgAk","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"10pnm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DayTimeCols", ()=>DayTimeCols);
parcelHelpers.export(exports, "DayTimeColsSlicer", ()=>DayTimeColsSlicer);
parcelHelpers.export(exports, "DayTimeColsView", ()=>DayTimeColsView);
parcelHelpers.export(exports, "TimeCols", ()=>TimeCols);
parcelHelpers.export(exports, "TimeColsSlatsCoords", ()=>TimeColsSlatsCoords);
parcelHelpers.export(exports, "TimeColsView", ()=>TimeColsView);
parcelHelpers.export(exports, "buildDayRanges", ()=>buildDayRanges);
parcelHelpers.export(exports, "buildSlatMetas", ()=>buildSlatMetas);
parcelHelpers.export(exports, "buildTimeColsModel", ()=>buildTimeColsModel);
var _internalJs = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
var _internalJs1 = require("@fullcalendar/daygrid/internal.js");
class AllDaySplitter extends (0, _internalJs.Splitter) {
    getKeyInfo() {
        return {
            allDay: {},
            timed: {}
        };
    }
    getKeysForDateSpan(dateSpan) {
        if (dateSpan.allDay) return [
            'allDay'
        ];
        return [
            'timed'
        ];
    }
    getKeysForEventDef(eventDef) {
        if (!eventDef.allDay) return [
            'timed'
        ];
        if ((0, _internalJs.hasBgRendering)(eventDef)) return [
            'timed',
            'allDay'
        ];
        return [
            'allDay'
        ];
    }
}
const DEFAULT_SLAT_LABEL_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    omitZeroMinute: true,
    meridiem: 'short'
});
function TimeColsAxisCell(props) {
    let classNames = [
        'fc-timegrid-slot',
        'fc-timegrid-slot-label',
        props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'
    ];
    return (0, _preactJs.createElement)((0, _internalJs.ViewContextType).Consumer, null, (context)=>{
        if (!props.isLabeled) return (0, _preactJs.createElement)("td", {
            className: classNames.join(' '),
            "data-time": props.isoTimeStr
        });
        let { dateEnv, options, viewApi } = context;
        let labelFormat = options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? (0, _internalJs.createFormatter)(options.slotLabelFormat[0]) : (0, _internalJs.createFormatter)(options.slotLabelFormat);
        let renderProps = {
            level: 0,
            time: props.time,
            date: dateEnv.toDate(props.date),
            view: viewApi,
            text: dateEnv.format(props.date, labelFormat)
        };
        return (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
            elTag: "td",
            elClasses: classNames,
            elAttrs: {
                'data-time': props.isoTimeStr
            },
            renderProps: renderProps,
            generatorName: "slotLabelContent",
            customGenerator: options.slotLabelContent,
            defaultGenerator: renderInnerContent,
            classNameGenerator: options.slotLabelClassNames,
            didMount: options.slotLabelDidMount,
            willUnmount: options.slotLabelWillUnmount
        }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                className: "fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame"
            }, (0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-slot-label-cushion',
                    'fc-scrollgrid-shrink-cushion'
                ]
            })));
    });
}
function renderInnerContent(props) {
    return props.text;
}
class TimeBodyAxis extends (0, _internalJs.BaseComponent) {
    render() {
        return this.props.slatMetas.map((slatMeta)=>(0, _preactJs.createElement)("tr", {
                key: slatMeta.key
            }, (0, _preactJs.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta))));
    }
}
const DEFAULT_WEEK_NUM_FORMAT = (0, _internalJs.createFormatter)({
    week: 'short'
});
const AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;
class TimeColsView extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.allDaySplitter = new AllDaySplitter(); // for use by subclasses
        this.headerElRef = (0, _preactJs.createRef)();
        this.rootElRef = (0, _preactJs.createRef)();
        this.scrollerElRef = (0, _preactJs.createRef)();
        this.state = {
            slatCoords: null
        };
        this.handleScrollTopRequest = (scrollTop)=>{
            let scrollerEl = this.scrollerElRef.current;
            if (scrollerEl) scrollerEl.scrollTop = scrollTop;
        };
        /* Header Render Methods
        ------------------------------------------------------------------------------------------------------------------*/ this.renderHeadAxis = (rowKey, frameHeight = '')=>{
            let { options } = this.context;
            let { dateProfile } = this.props;
            let range = dateProfile.renderRange;
            let dayCnt = (0, _internalJs.diffDays)(range.start, range.end);
            // only do in day views (to avoid doing in week views that dont need it)
            let navLinkAttrs = dayCnt === 1 ? (0, _internalJs.buildNavLinkAttrs)(this.context, range.start, 'week') : {};
            if (options.weekNumbers && rowKey === 'day') return (0, _preactJs.createElement)((0, _internalJs.WeekNumberContainer), {
                elTag: "th",
                elClasses: [
                    'fc-timegrid-axis',
                    'fc-scrollgrid-shrink'
                ],
                elAttrs: {
                    'aria-hidden': true
                },
                date: range.start,
                defaultFormat: DEFAULT_WEEK_NUM_FORMAT
            }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                    className: [
                        'fc-timegrid-axis-frame',
                        'fc-scrollgrid-shrink-frame',
                        'fc-timegrid-axis-frame-liquid'
                    ].join(' '),
                    style: {
                        height: frameHeight
                    }
                }, (0, _preactJs.createElement)(InnerContent, {
                    elTag: "a",
                    elClasses: [
                        'fc-timegrid-axis-cushion',
                        'fc-scrollgrid-shrink-cushion',
                        'fc-scrollgrid-sync-inner'
                    ],
                    elAttrs: navLinkAttrs
                })));
            return (0, _preactJs.createElement)("th", {
                "aria-hidden": true,
                className: "fc-timegrid-axis"
            }, (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-axis-frame",
                style: {
                    height: frameHeight
                }
            }));
        };
        /* Table Component Render Methods
        ------------------------------------------------------------------------------------------------------------------*/ // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,
        // but DayGrid still needs to have classNames on inner elements in order to measure.
        this.renderTableRowAxis = (rowHeight)=>{
            let { options, viewApi } = this.context;
            let renderProps = {
                text: options.allDayText,
                view: viewApi
            };
            return(// TODO: make reusable hook. used in list view too
            (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
                elTag: "td",
                elClasses: [
                    'fc-timegrid-axis',
                    'fc-scrollgrid-shrink'
                ],
                elAttrs: {
                    'aria-hidden': true
                },
                renderProps: renderProps,
                generatorName: "allDayContent",
                customGenerator: options.allDayContent,
                defaultGenerator: renderAllDayInner,
                classNameGenerator: options.allDayClassNames,
                didMount: options.allDayDidMount,
                willUnmount: options.allDayWillUnmount
            }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                    className: [
                        'fc-timegrid-axis-frame',
                        'fc-scrollgrid-shrink-frame',
                        rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''
                    ].join(' '),
                    style: {
                        height: rowHeight
                    }
                }, (0, _preactJs.createElement)(InnerContent, {
                    elTag: "span",
                    elClasses: [
                        'fc-timegrid-axis-cushion',
                        'fc-scrollgrid-shrink-cushion',
                        'fc-scrollgrid-sync-inner'
                    ]
                }))));
        };
        this.handleSlatCoords = (slatCoords)=>{
            this.setState({
                slatCoords
            });
        };
    }
    // rendering
    // ----------------------------------------------------------------------------------------------------
    renderSimpleLayout(headerRowContent, allDayContent, timeContent) {
        let { context, props } = this;
        let sections = [];
        let stickyHeaderDates = (0, _internalJs.getStickyHeaderDates)(context.options);
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            chunk: {
                elRef: this.headerElRef,
                tableClassName: 'fc-col-header',
                rowContent: headerRowContent
            }
        });
        if (allDayContent) {
            sections.push({
                type: 'body',
                key: 'all-day',
                chunk: {
                    content: allDayContent
                }
            });
            sections.push({
                type: 'body',
                key: 'all-day-divider',
                outerContent: (0, _preactJs.createElement)("tr", {
                    role: "presentation",
                    className: "fc-scrollgrid-section"
                }, (0, _preactJs.createElement)("td", {
                    className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')
                }))
            });
        }
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            expandRows: Boolean(context.options.expandRows),
            chunk: {
                scrollerElRef: this.scrollerElRef,
                content: timeContent
            }
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elRef: this.rootElRef,
            elClasses: [
                'fc-timegrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)((0, _internalJs.SimpleScrollGrid), {
            liquid: !props.isHeightAuto && !props.forPrint,
            collapsibleWidth: props.forPrint,
            cols: [
                {
                    width: 'shrink'
                }
            ],
            sections: sections
        }));
    }
    renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {
        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;
        if (!ScrollGrid) throw new Error('No ScrollGrid implementation');
        let { context, props } = this;
        let stickyHeaderDates = !props.forPrint && (0, _internalJs.getStickyHeaderDates)(context.options);
        let stickyFooterScrollbar = !props.forPrint && (0, _internalJs.getStickyFooterScrollbar)(context.options);
        let sections = [];
        if (headerRowContent) sections.push({
            type: 'header',
            key: 'header',
            isSticky: stickyHeaderDates,
            syncRowHeights: true,
            chunks: [
                {
                    key: 'axis',
                    rowContent: (arg)=>(0, _preactJs.createElement)("tr", {
                            role: "presentation"
                        }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))
                },
                {
                    key: 'cols',
                    elRef: this.headerElRef,
                    tableClassName: 'fc-col-header',
                    rowContent: headerRowContent
                }
            ]
        });
        if (allDayContent) {
            sections.push({
                type: 'body',
                key: 'all-day',
                syncRowHeights: true,
                chunks: [
                    {
                        key: 'axis',
                        rowContent: (contentArg)=>(0, _preactJs.createElement)("tr", {
                                role: "presentation"
                            }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))
                    },
                    {
                        key: 'cols',
                        content: allDayContent
                    }
                ]
            });
            sections.push({
                key: 'all-day-divider',
                type: 'body',
                outerContent: (0, _preactJs.createElement)("tr", {
                    role: "presentation",
                    className: "fc-scrollgrid-section"
                }, (0, _preactJs.createElement)("td", {
                    colSpan: 2,
                    className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')
                }))
            });
        }
        let isNowIndicator = context.options.nowIndicator;
        sections.push({
            type: 'body',
            key: 'body',
            liquid: true,
            expandRows: Boolean(context.options.expandRows),
            chunks: [
                {
                    key: 'axis',
                    content: (arg)=>// TODO: make this now-indicator arrow more DRY with TimeColsContent
                        (0, _preactJs.createElement)("div", {
                            className: "fc-timegrid-axis-chunk"
                        }, (0, _preactJs.createElement)("table", {
                            "aria-hidden": true,
                            style: {
                                height: arg.expandRows ? arg.clientHeight : ''
                            }
                        }, arg.tableColGroupNode, (0, _preactJs.createElement)("tbody", null, (0, _preactJs.createElement)(TimeBodyAxis, {
                            slatMetas: slatMetas
                        }))), (0, _preactJs.createElement)("div", {
                            className: "fc-timegrid-now-indicator-container"
                        }, (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
                            unit: isNowIndicator ? 'minute' : 'day' /* hacky */ 
                        }, (nowDate)=>{
                            let nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void
                            if (typeof nowIndicatorTop === 'number') return (0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
                                elClasses: [
                                    'fc-timegrid-now-indicator-arrow'
                                ],
                                elStyle: {
                                    top: nowIndicatorTop
                                },
                                isAxis: true,
                                date: nowDate
                            });
                            return null;
                        })))
                },
                {
                    key: 'cols',
                    scrollerElRef: this.scrollerElRef,
                    content: timeContent
                }
            ]
        });
        if (stickyFooterScrollbar) sections.push({
            key: 'footer',
            type: 'footer',
            isSticky: true,
            chunks: [
                {
                    key: 'axis',
                    content: (0, _internalJs.renderScrollShim)
                },
                {
                    key: 'cols',
                    content: (0, _internalJs.renderScrollShim)
                }
            ]
        });
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elRef: this.rootElRef,
            elClasses: [
                'fc-timegrid'
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)(ScrollGrid, {
            liquid: !props.isHeightAuto && !props.forPrint,
            forPrint: props.forPrint,
            collapsibleWidth: false,
            colGroups: [
                {
                    width: 'shrink',
                    cols: [
                        {
                            width: 'shrink'
                        }
                    ]
                },
                {
                    cols: [
                        {
                            span: colCnt,
                            minWidth: dayMinWidth
                        }
                    ]
                }
            ],
            sections: sections
        }));
    }
    /* Dimensions
    ------------------------------------------------------------------------------------------------------------------*/ getAllDayMaxEventProps() {
        let { dayMaxEvents, dayMaxEventRows } = this.context.options;
        if (dayMaxEvents === true || dayMaxEventRows === true) {
            dayMaxEvents = undefined;
            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure "auto" goes to a real number
        }
        return {
            dayMaxEvents,
            dayMaxEventRows
        };
    }
}
function renderAllDayInner(renderProps) {
    return renderProps.text;
}
class TimeColsSlatsCoords {
    constructor(positions, dateProfile, slotDuration){
        this.positions = positions;
        this.dateProfile = dateProfile;
        this.slotDuration = slotDuration;
    }
    safeComputeTop(date) {
        let { dateProfile } = this;
        if ((0, _internalJs.rangeContainsMarker)(dateProfile.currentRange, date)) {
            let startOfDayDate = (0, _internalJs.startOfDay)(date);
            let timeMs = date.valueOf() - startOfDayDate.valueOf();
            if (timeMs >= (0, _internalJs.asRoughMs)(dateProfile.slotMinTime) && timeMs < (0, _internalJs.asRoughMs)(dateProfile.slotMaxTime)) return this.computeTimeTop((0, _internalJs.createDuration)(timeMs));
        }
        return null;
    }
    // Computes the top coordinate, relative to the bounds of the grid, of the given date.
    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
    computeDateTop(when, startOfDayDate) {
        if (!startOfDayDate) startOfDayDate = (0, _internalJs.startOfDay)(when);
        return this.computeTimeTop((0, _internalJs.createDuration)(when.valueOf() - startOfDayDate.valueOf()));
    }
    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.
    // Eventually allow computation with arbirary slat dates.
    computeTimeTop(duration) {
        let { positions, dateProfile } = this;
        let len = positions.els.length;
        // floating-point value of # of slots covered
        let slatCoverage = (duration.milliseconds - (0, _internalJs.asRoughMs)(dateProfile.slotMinTime)) / (0, _internalJs.asRoughMs)(this.slotDuration);
        let slatIndex;
        let slatRemainder;
        // compute a floating-point number for how many slats should be progressed through.
        // from 0 to number of slats (inclusive)
        // constrained because slotMinTime/slotMaxTime might be customized.
        slatCoverage = Math.max(0, slatCoverage);
        slatCoverage = Math.min(len, slatCoverage);
        // an integer index of the furthest whole slat
        // from 0 to number slats (*exclusive*, so len-1)
        slatIndex = Math.floor(slatCoverage);
        slatIndex = Math.min(slatIndex, len - 1);
        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
        // could be 1.0 if slatCoverage is covering *all* the slots
        slatRemainder = slatCoverage - slatIndex;
        return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;
    }
}
class TimeColsSlatsBody extends (0, _internalJs.BaseComponent) {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { slatElRefs } = props;
        return (0, _preactJs.createElement)("tbody", null, props.slatMetas.map((slatMeta, i)=>{
            let renderProps = {
                time: slatMeta.time,
                date: context.dateEnv.toDate(slatMeta.date),
                view: context.viewApi
            };
            return (0, _preactJs.createElement)("tr", {
                key: slatMeta.key,
                ref: slatElRefs.createRef(slatMeta.key)
            }, props.axis && (0, _preactJs.createElement)(TimeColsAxisCell, Object.assign({}, slatMeta)), (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
                elTag: "td",
                elClasses: [
                    'fc-timegrid-slot',
                    'fc-timegrid-slot-lane',
                    !slatMeta.isLabeled && 'fc-timegrid-slot-minor'
                ],
                elAttrs: {
                    'data-time': slatMeta.isoTimeStr
                },
                renderProps: renderProps,
                generatorName: "slotLaneContent",
                customGenerator: options.slotLaneContent,
                classNameGenerator: options.slotLaneClassNames,
                didMount: options.slotLaneDidMount,
                willUnmount: options.slotLaneWillUnmount
            }));
        }));
    }
}
/*
for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
*/ class TimeColsSlats extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.rootElRef = (0, _preactJs.createRef)();
        this.slatElRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        return (0, _preactJs.createElement)("div", {
            ref: this.rootElRef,
            className: "fc-timegrid-slots"
        }, (0, _preactJs.createElement)("table", {
            "aria-hidden": true,
            className: context.theme.getClass('table'),
            style: {
                minWidth: props.tableMinWidth,
                width: props.clientWidth,
                height: props.minHeight
            }
        }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */ , (0, _preactJs.createElement)(TimeColsSlatsBody, {
            slatElRefs: this.slatElRefs,
            axis: props.axis,
            slatMetas: props.slatMetas
        })));
    }
    componentDidMount() {
        this.updateSizing();
    }
    componentDidUpdate() {
        this.updateSizing();
    }
    componentWillUnmount() {
        if (this.props.onCoords) this.props.onCoords(null);
    }
    updateSizing() {
        let { context, props } = this;
        if (props.onCoords && props.clientWidth !== null // means sizing has stabilized
        ) {
            let rootEl = this.rootElRef.current;
            if (rootEl.offsetHeight) props.onCoords(new TimeColsSlatsCoords(new (0, _internalJs.PositionCache)(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));
        }
    }
}
function collectSlatEls(elMap, slatMetas) {
    return slatMetas.map((slatMeta)=>elMap[slatMeta.key]);
}
function splitSegsByCol(segs, colCnt) {
    let segsByCol = [];
    let i;
    for(i = 0; i < colCnt; i += 1)segsByCol.push([]);
    if (segs) for(i = 0; i < segs.length; i += 1)segsByCol[segs[i].col].push(segs[i]);
    return segsByCol;
}
function splitInteractionByCol(ui, colCnt) {
    let byRow = [];
    if (!ui) for(let i = 0; i < colCnt; i += 1)byRow[i] = null;
    else {
        for(let i = 0; i < colCnt; i += 1)byRow[i] = {
            affectedInstances: ui.affectedInstances,
            isEvent: ui.isEvent,
            segs: []
        };
        for (let seg of ui.segs)byRow[seg.col].segs.push(seg);
    }
    return byRow;
}
class TimeColMoreLink extends (0, _internalJs.BaseComponent) {
    render() {
        let { props } = this;
        return (0, _preactJs.createElement)((0, _internalJs.MoreLinkContainer), {
            elClasses: [
                'fc-timegrid-more-link'
            ],
            elStyle: {
                top: props.top,
                bottom: props.bottom
            },
            allDayDate: null,
            moreCnt: props.hiddenSegs.length,
            allSegs: props.hiddenSegs,
            hiddenSegs: props.hiddenSegs,
            extraDateSpan: props.extraDateSpan,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            popoverContent: ()=>renderPlainFgSegs(props.hiddenSegs, props),
            defaultGenerator: renderMoreLinkInner,
            forceTimed: true
        }, (InnerContent)=>(0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-more-link-inner',
                    'fc-sticky'
                ]
            }));
    }
}
function renderMoreLinkInner(props) {
    return props.shortText;
}
// segInputs assumed sorted
function buildPositioning(segInputs, strictOrder, maxStackCnt) {
    let hierarchy = new (0, _internalJs.SegHierarchy)();
    if (strictOrder != null) hierarchy.strictOrder = strictOrder;
    if (maxStackCnt != null) hierarchy.maxStackCnt = maxStackCnt;
    let hiddenEntries = hierarchy.addSegs(segInputs);
    let hiddenGroups = (0, _internalJs.groupIntersectingEntries)(hiddenEntries);
    let web = buildWeb(hierarchy);
    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0
    let segRects = webToRects(web);
    return {
        segRects,
        hiddenGroups
    };
}
function buildWeb(hierarchy) {
    const { entriesByLevel } = hierarchy;
    const buildNode = cacheable((level, lateral)=>level + ':' + lateral, (level, lateral)=>{
        let siblingRange = findNextLevelSegs(hierarchy, level, lateral);
        let nextLevelRes = buildNodes(siblingRange, buildNode);
        let entry = entriesByLevel[level][lateral];
        return [
            Object.assign(Object.assign({}, entry), {
                nextLevelNodes: nextLevelRes[0]
            }),
            entry.thickness + nextLevelRes[1]
        ];
    });
    return buildNodes(entriesByLevel.length ? {
        level: 0,
        lateralStart: 0,
        lateralEnd: entriesByLevel[0].length
    } : null, buildNode)[0];
}
function buildNodes(siblingRange, buildNode) {
    if (!siblingRange) return [
        [],
        0
    ];
    let { level, lateralStart, lateralEnd } = siblingRange;
    let lateral = lateralStart;
    let pairs = [];
    while(lateral < lateralEnd){
        pairs.push(buildNode(level, lateral));
        lateral += 1;
    }
    pairs.sort(cmpDescPressures);
    return [
        pairs.map(extractNode),
        pairs[0][1]
    ];
}
function cmpDescPressures(a, b) {
    return b[1] - a[1];
}
function extractNode(a) {
    return a[0];
}
function findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {
    let { levelCoords, entriesByLevel } = hierarchy;
    let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];
    let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;
    let levelCnt = levelCoords.length;
    let level = subjectLevel;
    // skip past levels that are too high up
    for(; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing
    for(; level < levelCnt; level += 1){
        let entries = entriesByLevel[level];
        let entry;
        let searchIndex = (0, _internalJs.binarySearch)(entries, subjectEntry.span.start, (0, _internalJs.getEntrySpanEnd));
        let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one
        let lateralEnd = lateralStart;
        while((entry = entries[lateralEnd]) && // but not past the whole seg list
        entry.span.start < subjectEntry.span.end)lateralEnd += 1;
        if (lateralStart < lateralEnd) return {
            level,
            lateralStart,
            lateralEnd
        };
    }
    return null;
}
function stretchWeb(topLevelNodes, totalThickness) {
    const stretchNode = cacheable((node, startCoord, prevThickness)=>(0, _internalJs.buildEntryKey)(node), (node, startCoord, prevThickness)=>{
        let { nextLevelNodes, thickness } = node;
        let allThickness = thickness + prevThickness;
        let thicknessFraction = thickness / allThickness;
        let endCoord;
        let newChildren = [];
        if (!nextLevelNodes.length) endCoord = totalThickness;
        else {
            for (let childNode of nextLevelNodes)if (endCoord === undefined) {
                let res = stretchNode(childNode, startCoord, allThickness);
                endCoord = res[0];
                newChildren.push(res[1]);
            } else {
                let res = stretchNode(childNode, endCoord, 0);
                newChildren.push(res[1]);
            }
        }
        let newThickness = (endCoord - startCoord) * thicknessFraction;
        return [
            endCoord - newThickness,
            Object.assign(Object.assign({}, node), {
                thickness: newThickness,
                nextLevelNodes: newChildren
            })
        ];
    });
    return topLevelNodes.map((node)=>stretchNode(node, 0, 0)[1]);
}
// not sorted in any particular order
function webToRects(topLevelNodes) {
    let rects = [];
    const processNode = cacheable((node, levelCoord, stackDepth)=>(0, _internalJs.buildEntryKey)(node), (node, levelCoord, stackDepth)=>{
        let rect = Object.assign(Object.assign({}, node), {
            levelCoord,
            stackDepth,
            stackForward: 0
        });
        rects.push(rect);
        return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;
    });
    function processNodes(nodes, levelCoord, stackDepth) {
        let stackForward = 0;
        for (let node of nodes)stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);
        return stackForward;
    }
    processNodes(topLevelNodes, 0, 0);
    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?
}
// TODO: move to general util
function cacheable(keyFunc, workFunc) {
    const cache = {};
    return (...args)=>{
        let key = keyFunc(...args);
        return key in cache ? cache[key] : cache[key] = workFunc(...args);
    };
}
function computeSegVCoords(segs, colDate, slatCoords = null, eventMinHeight = 0) {
    let vcoords = [];
    if (slatCoords) for(let i = 0; i < segs.length; i += 1){
        let seg = segs[i];
        let spanStart = slatCoords.computeDateTop(seg.start, colDate);
        let spanEnd = Math.max(spanStart + (eventMinHeight || 0), slatCoords.computeDateTop(seg.end, colDate));
        vcoords.push({
            start: Math.round(spanStart),
            end: Math.round(spanEnd)
        });
    }
    return vcoords;
}
function computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack) {
    let segInputs = [];
    let dumbSegs = []; // segs without coords
    for(let i = 0; i < segs.length; i += 1){
        let vcoords = segVCoords[i];
        if (vcoords) segInputs.push({
            index: i,
            thickness: 1,
            span: vcoords
        });
        else dumbSegs.push(segs[i]);
    }
    let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);
    let segPlacements = [];
    for (let segRect of segRects)segPlacements.push({
        seg: segs[segRect.index],
        rect: segRect
    });
    for (let dumbSeg of dumbSegs)segPlacements.push({
        seg: dumbSeg,
        rect: null
    });
    return {
        segPlacements,
        hiddenGroups
    };
}
const DEFAULT_TIME_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    meridiem: false
});
class TimeColEvent extends (0, _internalJs.BaseComponent) {
    render() {
        return (0, _preactJs.createElement)((0, _internalJs.StandardEvent), Object.assign({}, this.props, {
            elClasses: [
                'fc-timegrid-event',
                'fc-v-event',
                this.props.isShort && 'fc-timegrid-event-short'
            ],
            defaultTimeFormat: DEFAULT_TIME_FORMAT
        }));
    }
}
class TimeCol extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.sortEventSegs = (0, _internalJs.memoize)((0, _internalJs.sortEventSegs));
    }
    // TODO: memoize event-placement?
    render() {
        let { props, context } = this;
        let { options } = context;
        let isSelectMirror = options.selectMirror;
        let mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];
        let interactionAffectedInstances = props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};
        let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);
        return (0, _preactJs.createElement)((0, _internalJs.DayCellContainer), {
            elTag: "td",
            elRef: props.elRef,
            elClasses: [
                'fc-timegrid-col',
                ...props.extraClassNames || []
            ],
            elAttrs: Object.assign({
                role: 'gridcell'
            }, props.extraDataAttrs),
            date: props.date,
            dateProfile: props.dateProfile,
            todayRange: props.todayRange,
            extraRenderProps: props.extraRenderProps
        }, (InnerContent)=>(0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-frame"
            }, (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-bg"
            }, this.renderFillSegs(props.businessHourSegs, 'non-business'), this.renderFillSegs(props.bgEventSegs, 'bg-event'), this.renderFillSegs(props.dateSelectionSegs, 'highlight')), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-events"
            }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-col-events"
            }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror), 'mirror')), (0, _preactJs.createElement)("div", {
                className: "fc-timegrid-now-indicator-container"
            }, this.renderNowIndicator(props.nowIndicatorSegs)), (0, _internalJs.hasCustomDayCellContent)(options) && (0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-timegrid-col-misc'
                ]
            })));
    }
    renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {
        let { props } = this;
        if (props.forPrint) return renderPlainFgSegs(sortedFgSegs, props);
        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey);
    }
    renderPositionedFgSegs(segs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {
        let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options;
        let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props;
        let isMirror = isDragging || isResizing || isDateSelecting;
        let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);
        let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map((segPlacement)=>{
            let { seg, rect } = segPlacement;
            let instanceId = seg.eventRange.instance.instanceId;
            let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);
            let vStyle = computeSegVStyle(rect && rect.span);
            let hStyle = !isMirror && rect ? this.computeSegHStyle(rect) : {
                left: 0,
                right: 0
            };
            let isInset = Boolean(rect) && rect.stackForward > 0;
            let isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem
            return (0, _preactJs.createElement)("div", {
                className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),
                key: forcedKey || instanceId,
                style: Object.assign(Object.assign({
                    visibility: isVisible ? '' : 'hidden'
                }, vStyle), hStyle)
            }, (0, _preactJs.createElement)(TimeColEvent, Object.assign({
                seg: seg,
                isDragging: isDragging,
                isResizing: isResizing,
                isDateSelecting: isDateSelecting,
                isSelected: instanceId === eventSelection,
                isShort: isShort
            }, (0, _internalJs.getSegMeta)(seg, todayRange, nowDate))));
        }));
    }
    // will already have eventMinHeight applied because segInputs already had it
    renderHiddenGroups(hiddenGroups, segs) {
        let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props;
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, hiddenGroups.map((hiddenGroup)=>{
            let positionCss = computeSegVStyle(hiddenGroup.span);
            let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);
            return (0, _preactJs.createElement)(TimeColMoreLink, {
                key: (0, _internalJs.buildIsoString)((0, _internalJs.computeEarliestSegStart)(hiddenSegs)),
                hiddenSegs: hiddenSegs,
                top: positionCss.top,
                bottom: positionCss.bottom,
                extraDateSpan: extraDateSpan,
                dateProfile: dateProfile,
                todayRange: todayRange,
                nowDate: nowDate,
                eventSelection: eventSelection,
                eventDrag: eventDrag,
                eventResize: eventResize
            });
        }));
    }
    renderFillSegs(segs, fillType) {
        let { props, context } = this;
        let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated
        let children = segVCoords.map((vcoords, i)=>{
            let seg = segs[i];
            return (0, _preactJs.createElement)("div", {
                key: (0, _internalJs.buildEventRangeKey)(seg.eventRange),
                className: "fc-timegrid-bg-harness",
                style: computeSegVStyle(vcoords)
            }, fillType === 'bg-event' ? (0, _preactJs.createElement)((0, _internalJs.BgEvent), Object.assign({
                seg: seg
            }, (0, _internalJs.getSegMeta)(seg, props.todayRange, props.nowDate))) : (0, _internalJs.renderFill)(fillType));
        });
        return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, children);
    }
    renderNowIndicator(segs) {
        let { slatCoords, date } = this.props;
        if (!slatCoords) return null;
        return segs.map((seg, i)=>(0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
                // key doesn't matter. will only ever be one
                key: i,
                elClasses: [
                    'fc-timegrid-now-indicator-line'
                ],
                elStyle: {
                    top: slatCoords.computeDateTop(seg.start, date)
                },
                isAxis: false,
                date: date
            }));
    }
    computeSegHStyle(segHCoords) {
        let { isRtl, options } = this.context;
        let shouldOverlap = options.slotEventOverlap;
        let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point
        let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point
        let left; // amount of space from left edge, a fraction of the total width
        let right; // amount of space from right edge, a fraction of the total width
        if (shouldOverlap) // double the width, but don't go beyond the maximum forward coordinate (1.0)
        farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);
        if (isRtl) {
            left = 1 - farCoord;
            right = nearCoord;
        } else {
            left = nearCoord;
            right = 1 - farCoord;
        }
        let props = {
            zIndex: segHCoords.stackDepth + 1,
            left: left * 100 + '%',
            right: right * 100 + '%'
        };
        if (shouldOverlap && !segHCoords.stackForward) // add padding to the edge so that forward stacked events don't cover the resizer's icon
        props[isRtl ? 'marginLeft' : 'marginRight'] = 20; // 10 is a guesstimate of the icon's width
        return props;
    }
}
function renderPlainFgSegs(sortedFgSegs, { todayRange, nowDate, eventSelection, eventDrag, eventResize }) {
    let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};
    return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, sortedFgSegs.map((seg)=>{
        let instanceId = seg.eventRange.instance.instanceId;
        return (0, _preactJs.createElement)("div", {
            key: instanceId,
            style: {
                visibility: hiddenInstances[instanceId] ? 'hidden' : ''
            }
        }, (0, _preactJs.createElement)(TimeColEvent, Object.assign({
            seg: seg,
            isDragging: false,
            isResizing: false,
            isDateSelecting: false,
            isSelected: instanceId === eventSelection,
            isShort: false
        }, (0, _internalJs.getSegMeta)(seg, todayRange, nowDate))));
    }));
}
function computeSegVStyle(segVCoords) {
    if (!segVCoords) return {
        top: '',
        bottom: ''
    };
    return {
        top: segVCoords.start,
        bottom: -segVCoords.end
    };
}
function compileSegsFromEntries(segEntries, allSegs) {
    return segEntries.map((segEntry)=>allSegs[segEntry.index]);
}
class TimeColsContent extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.splitFgEventSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitBgEventSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitBusinessHourSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitNowIndicatorSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitDateSelectionSegs = (0, _internalJs.memoize)(splitSegsByCol);
        this.splitEventDrag = (0, _internalJs.memoize)(splitInteractionByCol);
        this.splitEventResize = (0, _internalJs.memoize)(splitInteractionByCol);
        this.rootElRef = (0, _preactJs.createRef)();
        this.cellElRefs = new (0, _internalJs.RefMap)();
    }
    render() {
        let { props, context } = this;
        let nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void
        let colCnt = props.cells.length;
        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);
        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);
        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);
        let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);
        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);
        let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);
        let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);
        return (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-cols",
            ref: this.rootElRef
        }, (0, _preactJs.createElement)("table", {
            role: "presentation",
            style: {
                minWidth: props.tableMinWidth,
                width: props.clientWidth
            }
        }, props.tableColGroupNode, (0, _preactJs.createElement)("tbody", {
            role: "presentation"
        }, (0, _preactJs.createElement)("tr", {
            role: "row"
        }, props.axis && (0, _preactJs.createElement)("td", {
            "aria-hidden": true,
            className: "fc-timegrid-col fc-timegrid-axis"
        }, (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-col-frame"
        }, (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-now-indicator-container"
        }, typeof nowIndicatorTop === 'number' && (0, _preactJs.createElement)((0, _internalJs.NowIndicatorContainer), {
            elClasses: [
                'fc-timegrid-now-indicator-arrow'
            ],
            elStyle: {
                top: nowIndicatorTop
            },
            isAxis: true,
            date: props.nowDate
        })))), props.cells.map((cell, i)=>(0, _preactJs.createElement)(TimeCol, {
                key: cell.key,
                elRef: this.cellElRefs.createRef(cell.key),
                dateProfile: props.dateProfile,
                date: cell.date,
                nowDate: props.nowDate,
                todayRange: props.todayRange,
                extraRenderProps: cell.extraRenderProps,
                extraDataAttrs: cell.extraDataAttrs,
                extraClassNames: cell.extraClassNames,
                extraDateSpan: cell.extraDateSpan,
                fgEventSegs: fgEventSegsByRow[i],
                bgEventSegs: bgEventSegsByRow[i],
                businessHourSegs: businessHourSegsByRow[i],
                nowIndicatorSegs: nowIndicatorSegsByRow[i],
                dateSelectionSegs: dateSelectionSegsByRow[i],
                eventDrag: eventDragByRow[i],
                eventResize: eventResizeByRow[i],
                slatCoords: props.slatCoords,
                eventSelection: props.eventSelection,
                forPrint: props.forPrint
            }))))));
    }
    componentDidMount() {
        this.updateCoords();
    }
    componentDidUpdate() {
        this.updateCoords();
    }
    updateCoords() {
        let { props } = this;
        if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized
        ) props.onColCoords(new (0, _internalJs.PositionCache)(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, false));
    }
}
function collectCellEls(elMap, cells) {
    return cells.map((cell)=>elMap[cell.key]);
}
/* A component that renders one or more columns of vertical time slots
----------------------------------------------------------------------------------------------------------------------*/ class TimeCols extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.processSlotOptions = (0, _internalJs.memoize)(processSlotOptions);
        this.state = {
            slatCoords: null
        };
        this.handleRootEl = (el)=>{
            if (el) this.context.registerInteractiveComponent(this, {
                el,
                isHitComboAllowed: this.props.isHitComboAllowed
            });
            else this.context.unregisterInteractiveComponent(this);
        };
        this.handleScrollRequest = (request)=>{
            let { onScrollTopRequest } = this.props;
            let { slatCoords } = this.state;
            if (onScrollTopRequest && slatCoords) {
                if (request.time) {
                    let top = slatCoords.computeTimeTop(request.time);
                    top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further
                    if (top) top += 1; // to overcome top border that slots beyond the first have. looks better
                    onScrollTopRequest(top);
                }
                return true;
            }
            return false;
        };
        this.handleColCoords = (colCoords)=>{
            this.colCoords = colCoords;
        };
        this.handleSlatCoords = (slatCoords)=>{
            this.setState({
                slatCoords
            });
            if (this.props.onSlatCoords) this.props.onSlatCoords(slatCoords);
        };
    }
    render() {
        let { props, state } = this;
        return (0, _preactJs.createElement)("div", {
            className: "fc-timegrid-body",
            ref: this.handleRootEl,
            style: {
                // these props are important to give this wrapper correct dimensions for interactions
                // TODO: if we set it here, can we avoid giving to inner tables?
                width: props.clientWidth,
                minWidth: props.tableMinWidth
            }
        }, (0, _preactJs.createElement)(TimeColsSlats, {
            axis: props.axis,
            dateProfile: props.dateProfile,
            slatMetas: props.slatMetas,
            clientWidth: props.clientWidth,
            minHeight: props.expandRows ? props.clientHeight : '',
            tableMinWidth: props.tableMinWidth,
            tableColGroupNode: props.axis ? props.tableColGroupNode : null,
            onCoords: this.handleSlatCoords
        }), (0, _preactJs.createElement)(TimeColsContent, {
            cells: props.cells,
            axis: props.axis,
            dateProfile: props.dateProfile,
            businessHourSegs: props.businessHourSegs,
            bgEventSegs: props.bgEventSegs,
            fgEventSegs: props.fgEventSegs,
            dateSelectionSegs: props.dateSelectionSegs,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            todayRange: props.todayRange,
            nowDate: props.nowDate,
            nowIndicatorSegs: props.nowIndicatorSegs,
            clientWidth: props.clientWidth,
            tableMinWidth: props.tableMinWidth,
            tableColGroupNode: props.tableColGroupNode,
            slatCoords: state.slatCoords,
            onColCoords: this.handleColCoords,
            forPrint: props.forPrint
        }));
    }
    componentDidMount() {
        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);
    }
    componentDidUpdate(prevProps) {
        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);
    }
    componentWillUnmount() {
        this.scrollResponder.detach();
    }
    queryHit(positionLeft, positionTop) {
        let { dateEnv, options } = this.context;
        let { colCoords } = this;
        let { dateProfile } = this.props;
        let { slatCoords } = this.state;
        let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);
        let colIndex = colCoords.leftToIndex(positionLeft);
        let slatIndex = slatCoords.positions.topToIndex(positionTop);
        if (colIndex != null && slatIndex != null) {
            let cell = this.props.cells[colIndex];
            let slatTop = slatCoords.positions.tops[slatIndex];
            let slatHeight = slatCoords.positions.getHeight(slatIndex);
            let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1
            let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat
            let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
            let dayDate = this.props.cells[colIndex].date;
            let time = (0, _internalJs.addDurations)(dateProfile.slotMinTime, (0, _internalJs.multiplyDuration)(snapDuration, snapIndex));
            let start = dateEnv.add(dayDate, time);
            let end = dateEnv.add(start, snapDuration);
            return {
                dateProfile,
                dateSpan: Object.assign({
                    range: {
                        start,
                        end
                    },
                    allDay: false
                }, cell.extraDateSpan),
                dayEl: colCoords.els[colIndex],
                rect: {
                    left: colCoords.lefts[colIndex],
                    right: colCoords.rights[colIndex],
                    top: slatTop,
                    bottom: slatTop + slatHeight
                },
                layer: 0
            };
        }
        return null;
    }
}
function processSlotOptions(slotDuration, snapDurationOverride) {
    let snapDuration = snapDurationOverride || slotDuration;
    let snapsPerSlot = (0, _internalJs.wholeDivideDurations)(slotDuration, snapDuration);
    if (snapsPerSlot === null) {
        snapDuration = slotDuration;
        snapsPerSlot = 1;
    // TODO: say warning?
    }
    return {
        snapDuration,
        snapsPerSlot
    };
}
class DayTimeColsSlicer extends (0, _internalJs.Slicer) {
    sliceRange(range, dayRanges) {
        let segs = [];
        for(let col = 0; col < dayRanges.length; col += 1){
            let segRange = (0, _internalJs.intersectRanges)(range, dayRanges[col]);
            if (segRange) segs.push({
                start: segRange.start,
                end: segRange.end,
                isStart: segRange.start.valueOf() === range.start.valueOf(),
                isEnd: segRange.end.valueOf() === range.end.valueOf(),
                col
            });
        }
        return segs;
    }
}
class DayTimeCols extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.buildDayRanges = (0, _internalJs.memoize)(buildDayRanges);
        this.slicer = new DayTimeColsSlicer();
        this.timeColsRef = (0, _preactJs.createRef)();
    }
    render() {
        let { props, context } = this;
        let { dateProfile, dayTableModel } = props;
        let { nowIndicator, nextDayThreshold } = context.options;
        let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);
        // give it the first row of cells
        // TODO: would move this further down hierarchy, but sliceNowDate needs it
        return (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
            unit: nowIndicator ? 'minute' : 'day'
        }, (nowDate, todayRange)=>(0, _preactJs.createElement)(TimeCols, Object.assign({
                ref: this.timeColsRef
            }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {
                forPrint: props.forPrint,
                axis: props.axis,
                dateProfile: dateProfile,
                slatMetas: props.slatMetas,
                slotDuration: props.slotDuration,
                cells: dayTableModel.cells[0],
                tableColGroupNode: props.tableColGroupNode,
                tableMinWidth: props.tableMinWidth,
                clientWidth: props.clientWidth,
                clientHeight: props.clientHeight,
                expandRows: props.expandRows,
                nowDate: nowDate,
                nowIndicatorSegs: nowIndicator && this.slicer.sliceNowDate(nowDate, dateProfile, nextDayThreshold, context, dayRanges),
                todayRange: todayRange,
                onScrollTopRequest: props.onScrollTopRequest,
                onSlatCoords: props.onSlatCoords
            })));
    }
}
function buildDayRanges(dayTableModel, dateProfile, dateEnv) {
    let ranges = [];
    for (let date of dayTableModel.headerDates)ranges.push({
        start: dateEnv.add(date, dateProfile.slotMinTime),
        end: dateEnv.add(date, dateProfile.slotMaxTime)
    });
    return ranges;
}
// potential nice values for the slot-duration and interval-duration
// from largest to smallest
const STOCK_SUB_DURATIONS = [
    {
        hours: 1
    },
    {
        minutes: 30
    },
    {
        minutes: 15
    },
    {
        seconds: 30
    },
    {
        seconds: 15
    }
];
function buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {
    let dayStart = new Date(0);
    let slatTime = slotMinTime;
    let slatIterator = (0, _internalJs.createDuration)(0);
    let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);
    let metas = [];
    while((0, _internalJs.asRoughMs)(slatTime) < (0, _internalJs.asRoughMs)(slotMaxTime)){
        let date = dateEnv.add(dayStart, slatTime);
        let isLabeled = (0, _internalJs.wholeDivideDurations)(slatIterator, labelInterval) !== null;
        metas.push({
            date,
            time: slatTime,
            key: date.toISOString(),
            isoTimeStr: (0, _internalJs.formatIsoTimeString)(date),
            isLabeled
        });
        slatTime = (0, _internalJs.addDurations)(slatTime, slotDuration);
        slatIterator = (0, _internalJs.addDurations)(slatIterator, slotDuration);
    }
    return metas;
}
// Computes an automatic value for slotLabelInterval
function computeLabelInterval(slotDuration) {
    let i;
    let labelInterval;
    let slotsPerLabel;
    // find the smallest stock label interval that results in more than one slots-per-label
    for(i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1){
        labelInterval = (0, _internalJs.createDuration)(STOCK_SUB_DURATIONS[i]);
        slotsPerLabel = (0, _internalJs.wholeDivideDurations)(labelInterval, slotDuration);
        if (slotsPerLabel !== null && slotsPerLabel > 1) return labelInterval;
    }
    return slotDuration; // fall back
}
class DayTimeColsView extends TimeColsView {
    constructor(){
        super(...arguments);
        this.buildTimeColsModel = (0, _internalJs.memoize)(buildTimeColsModel);
        this.buildSlatMetas = (0, _internalJs.memoize)(buildSlatMetas);
    }
    render() {
        let { options, dateEnv, dateProfileGenerator } = this.context;
        let { props } = this;
        let { dateProfile } = props;
        let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);
        let splitProps = this.allDaySplitter.splitProps(props);
        let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);
        let { dayMinWidth } = options;
        let hasAttachedAxis = !dayMinWidth;
        let hasDetachedAxis = dayMinWidth;
        let headerContent = options.dayHeaders && (0, _preactJs.createElement)((0, _internalJs.DayHeader), {
            dates: dayTableModel.headerDates,
            dateProfile: dateProfile,
            datesRepDistinctDays: true,
            renderIntro: hasAttachedAxis ? this.renderHeadAxis : null
        });
        let allDayContent = options.allDaySlot !== false && ((contentArg)=>(0, _preactJs.createElement)((0, _internalJs1.DayTable), Object.assign({}, splitProps.allDay, {
                dateProfile: dateProfile,
                dayTableModel: dayTableModel,
                nextDayThreshold: options.nextDayThreshold,
                tableMinWidth: contentArg.tableMinWidth,
                colGroupNode: contentArg.tableColGroupNode,
                renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null,
                showWeekNumbers: false,
                expandRows: false,
                headerAlignElRef: this.headerElRef,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                forPrint: props.forPrint
            }, this.getAllDayMaxEventProps())));
        let timeGridContent = (contentArg)=>(0, _preactJs.createElement)(DayTimeCols, Object.assign({}, splitProps.timed, {
                dayTableModel: dayTableModel,
                dateProfile: dateProfile,
                axis: hasAttachedAxis,
                slotDuration: options.slotDuration,
                slatMetas: slatMetas,
                forPrint: props.forPrint,
                tableColGroupNode: contentArg.tableColGroupNode,
                tableMinWidth: contentArg.tableMinWidth,
                clientWidth: contentArg.clientWidth,
                clientHeight: contentArg.clientHeight,
                onSlatCoords: this.handleSlatCoords,
                expandRows: contentArg.expandRows,
                onScrollTopRequest: this.handleScrollTopRequest
            }));
        return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);
    }
}
function buildTimeColsModel(dateProfile, dateProfileGenerator) {
    let daySeries = new (0, _internalJs.DaySeriesModel)(dateProfile.renderRange, dateProfileGenerator);
    return new (0, _internalJs.DayTableModel)(daySeries, false);
}
var css_248z = ".fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:\"\\00a0\"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:\"\\00a0-\\00a0\"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-arrow,.fc .fc-timegrid-now-indicator-line{pointer-events:none}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}";
(0, _internalJs.injectStyles)(css_248z);

},{"@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@fullcalendar/daygrid/internal.js":"4zgAk","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"b6rIQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Draggable", ()=>ExternalDraggable);
parcelHelpers.export(exports, "ThirdPartyDraggable", ()=>ThirdPartyDraggable);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("@fullcalendar/core/internal.js");
(0, _internalJs.config).touchMouseIgnoreWait = 500;
let ignoreMouseDepth = 0;
let listenerCnt = 0;
let isWindowTouchMoveCancelled = false;
/*
Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
Tracks when the pointer "drags" on a certain element, meaning down+move+up.

Also, tracks if there was touch-scrolling.
Also, can prevent touch-scrolling from happening.
Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.

emits:
- pointerdown
- pointermove
- pointerup
*/ class PointerDragging {
    constructor(containerEl){
        this.subjectEl = null;
        // options that can be directly assigned by caller
        this.selector = ''; // will cause subjectEl in all emitted events to be this element
        this.handleSelector = '';
        this.shouldIgnoreMove = false;
        this.shouldWatchScroll = true; // for simulating pointermove on scroll
        // internal states
        this.isDragging = false;
        this.isTouchDragging = false;
        this.wasTouchScroll = false;
        // Mouse
        // ----------------------------------------------------------------------------------------------------
        this.handleMouseDown = (ev)=>{
            if (!this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && this.tryStart(ev)) {
                let pev = this.createEventFromMouse(ev, true);
                this.emitter.trigger('pointerdown', pev);
                this.initScrollWatch(pev);
                if (!this.shouldIgnoreMove) document.addEventListener('mousemove', this.handleMouseMove);
                document.addEventListener('mouseup', this.handleMouseUp);
            }
        };
        this.handleMouseMove = (ev)=>{
            let pev = this.createEventFromMouse(ev);
            this.recordCoords(pev);
            this.emitter.trigger('pointermove', pev);
        };
        this.handleMouseUp = (ev)=>{
            document.removeEventListener('mousemove', this.handleMouseMove);
            document.removeEventListener('mouseup', this.handleMouseUp);
            this.emitter.trigger('pointerup', this.createEventFromMouse(ev));
            this.cleanup(); // call last so that pointerup has access to props
        };
        // Touch
        // ----------------------------------------------------------------------------------------------------
        this.handleTouchStart = (ev)=>{
            if (this.tryStart(ev)) {
                this.isTouchDragging = true;
                let pev = this.createEventFromTouch(ev, true);
                this.emitter.trigger('pointerdown', pev);
                this.initScrollWatch(pev);
                // unlike mouse, need to attach to target, not document
                // https://stackoverflow.com/a/45760014
                let targetEl = ev.target;
                if (!this.shouldIgnoreMove) targetEl.addEventListener('touchmove', this.handleTouchMove);
                targetEl.addEventListener('touchend', this.handleTouchEnd);
                targetEl.addEventListener('touchcancel', this.handleTouchEnd); // treat it as a touch end
                // attach a handler to get called when ANY scroll action happens on the page.
                // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
                // http://stackoverflow.com/a/32954565/96342
                window.addEventListener('scroll', this.handleTouchScroll, true);
            }
        };
        this.handleTouchMove = (ev)=>{
            let pev = this.createEventFromTouch(ev);
            this.recordCoords(pev);
            this.emitter.trigger('pointermove', pev);
        };
        this.handleTouchEnd = (ev)=>{
            if (this.isDragging) {
                let targetEl = ev.target;
                targetEl.removeEventListener('touchmove', this.handleTouchMove);
                targetEl.removeEventListener('touchend', this.handleTouchEnd);
                targetEl.removeEventListener('touchcancel', this.handleTouchEnd);
                window.removeEventListener('scroll', this.handleTouchScroll, true); // useCaptured=true
                this.emitter.trigger('pointerup', this.createEventFromTouch(ev));
                this.cleanup(); // call last so that pointerup has access to props
                this.isTouchDragging = false;
                startIgnoringMouse();
            }
        };
        this.handleTouchScroll = ()=>{
            this.wasTouchScroll = true;
        };
        this.handleScroll = (ev)=>{
            if (!this.shouldIgnoreMove) {
                let pageX = window.scrollX - this.prevScrollX + this.prevPageX;
                let pageY = window.scrollY - this.prevScrollY + this.prevPageY;
                this.emitter.trigger('pointermove', {
                    origEvent: ev,
                    isTouch: this.isTouchDragging,
                    subjectEl: this.subjectEl,
                    pageX,
                    pageY,
                    deltaX: pageX - this.origPageX,
                    deltaY: pageY - this.origPageY
                });
            }
        };
        this.containerEl = containerEl;
        this.emitter = new (0, _internalJs.Emitter)();
        containerEl.addEventListener('mousedown', this.handleMouseDown);
        containerEl.addEventListener('touchstart', this.handleTouchStart, {
            passive: true
        });
        listenerCreated();
    }
    destroy() {
        this.containerEl.removeEventListener('mousedown', this.handleMouseDown);
        this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {
            passive: true
        });
        listenerDestroyed();
    }
    tryStart(ev) {
        let subjectEl = this.querySubjectEl(ev);
        let downEl = ev.target;
        if (subjectEl && (!this.handleSelector || (0, _internalJs.elementClosest)(downEl, this.handleSelector))) {
            this.subjectEl = subjectEl;
            this.isDragging = true; // do this first so cancelTouchScroll will work
            this.wasTouchScroll = false;
            return true;
        }
        return false;
    }
    cleanup() {
        isWindowTouchMoveCancelled = false;
        this.isDragging = false;
        this.subjectEl = null;
        // keep wasTouchScroll around for later access
        this.destroyScrollWatch();
    }
    querySubjectEl(ev) {
        if (this.selector) return (0, _internalJs.elementClosest)(ev.target, this.selector);
        return this.containerEl;
    }
    shouldIgnoreMouse() {
        return ignoreMouseDepth || this.isTouchDragging;
    }
    // can be called by user of this class, to cancel touch-based scrolling for the current drag
    cancelTouchScroll() {
        if (this.isDragging) isWindowTouchMoveCancelled = true;
    }
    // Scrolling that simulates pointermoves
    // ----------------------------------------------------------------------------------------------------
    initScrollWatch(ev) {
        if (this.shouldWatchScroll) {
            this.recordCoords(ev);
            window.addEventListener('scroll', this.handleScroll, true); // useCapture=true
        }
    }
    recordCoords(ev) {
        if (this.shouldWatchScroll) {
            this.prevPageX = ev.pageX;
            this.prevPageY = ev.pageY;
            this.prevScrollX = window.scrollX;
            this.prevScrollY = window.scrollY;
        }
    }
    destroyScrollWatch() {
        if (this.shouldWatchScroll) window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true
    }
    // Event Normalization
    // ----------------------------------------------------------------------------------------------------
    createEventFromMouse(ev, isFirst) {
        let deltaX = 0;
        let deltaY = 0;
        // TODO: repeat code
        if (isFirst) {
            this.origPageX = ev.pageX;
            this.origPageY = ev.pageY;
        } else {
            deltaX = ev.pageX - this.origPageX;
            deltaY = ev.pageY - this.origPageY;
        }
        return {
            origEvent: ev,
            isTouch: false,
            subjectEl: this.subjectEl,
            pageX: ev.pageX,
            pageY: ev.pageY,
            deltaX,
            deltaY
        };
    }
    createEventFromTouch(ev, isFirst) {
        let touches = ev.touches;
        let pageX;
        let pageY;
        let deltaX = 0;
        let deltaY = 0;
        // if touch coords available, prefer,
        // because FF would give bad ev.pageX ev.pageY
        if (touches && touches.length) {
            pageX = touches[0].pageX;
            pageY = touches[0].pageY;
        } else {
            pageX = ev.pageX;
            pageY = ev.pageY;
        }
        // TODO: repeat code
        if (isFirst) {
            this.origPageX = pageX;
            this.origPageY = pageY;
        } else {
            deltaX = pageX - this.origPageX;
            deltaY = pageY - this.origPageY;
        }
        return {
            origEvent: ev,
            isTouch: true,
            subjectEl: this.subjectEl,
            pageX,
            pageY,
            deltaX,
            deltaY
        };
    }
}
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)
function isPrimaryMouseButton(ev) {
    return ev.button === 0 && !ev.ctrlKey;
}
// Ignoring fake mouse events generated by touch
// ----------------------------------------------------------------------------------------------------
function startIgnoringMouse() {
    ignoreMouseDepth += 1;
    setTimeout(()=>{
        ignoreMouseDepth -= 1;
    }, (0, _internalJs.config).touchMouseIgnoreWait);
}
// We want to attach touchmove as early as possible for Safari
// ----------------------------------------------------------------------------------------------------
function listenerCreated() {
    listenerCnt += 1;
    if (listenerCnt === 1) window.addEventListener('touchmove', onWindowTouchMove, {
        passive: false
    });
}
function listenerDestroyed() {
    listenerCnt -= 1;
    if (!listenerCnt) window.removeEventListener('touchmove', onWindowTouchMove, {
        passive: false
    });
}
function onWindowTouchMove(ev) {
    if (isWindowTouchMoveCancelled) ev.preventDefault();
}
/*
An effect in which an element follows the movement of a pointer across the screen.
The moving element is a clone of some other element.
Must call start + handleMove + stop.
*/ class ElementMirror {
    constructor(){
        this.isVisible = false; // must be explicitly enabled
        this.sourceEl = null;
        this.mirrorEl = null;
        this.sourceElRect = null; // screen coords relative to viewport
        // options that can be set directly by caller
        this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues
        this.zIndex = 9999;
        this.revertDuration = 0;
    }
    start(sourceEl, pageX, pageY) {
        this.sourceEl = sourceEl;
        this.sourceElRect = this.sourceEl.getBoundingClientRect();
        this.origScreenX = pageX - window.scrollX;
        this.origScreenY = pageY - window.scrollY;
        this.deltaX = 0;
        this.deltaY = 0;
        this.updateElPosition();
    }
    handleMove(pageX, pageY) {
        this.deltaX = pageX - window.scrollX - this.origScreenX;
        this.deltaY = pageY - window.scrollY - this.origScreenY;
        this.updateElPosition();
    }
    // can be called before start
    setIsVisible(bool) {
        if (bool) {
            if (!this.isVisible) {
                if (this.mirrorEl) this.mirrorEl.style.display = '';
                this.isVisible = bool; // needs to happen before updateElPosition
                this.updateElPosition(); // because was not updating the position while invisible
            }
        } else if (this.isVisible) {
            if (this.mirrorEl) this.mirrorEl.style.display = 'none';
            this.isVisible = bool;
        }
    }
    // always async
    stop(needsRevertAnimation, callback) {
        let done = ()=>{
            this.cleanup();
            callback();
        };
        if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && // if 0, transition won't work
        (this.deltaX || this.deltaY // if same coords, transition won't work
        )) this.doRevertAnimation(done, this.revertDuration);
        else setTimeout(done, 0);
    }
    doRevertAnimation(callback, revertDuration) {
        let mirrorEl = this.mirrorEl;
        let finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened
        mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';
        (0, _internalJs.applyStyle)(mirrorEl, {
            left: finalSourceElRect.left,
            top: finalSourceElRect.top
        });
        (0, _internalJs.whenTransitionDone)(mirrorEl, ()=>{
            mirrorEl.style.transition = '';
            callback();
        });
    }
    cleanup() {
        if (this.mirrorEl) {
            (0, _internalJs.removeElement)(this.mirrorEl);
            this.mirrorEl = null;
        }
        this.sourceEl = null;
    }
    updateElPosition() {
        if (this.sourceEl && this.isVisible) (0, _internalJs.applyStyle)(this.getMirrorEl(), {
            left: this.sourceElRect.left + this.deltaX,
            top: this.sourceElRect.top + this.deltaY
        });
    }
    getMirrorEl() {
        let sourceElRect = this.sourceElRect;
        let mirrorEl = this.mirrorEl;
        if (!mirrorEl) {
            mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true
            // we don't want long taps or any mouse interaction causing selection/menus.
            // would use preventSelection(), but that prevents selectstart, causing problems.
            mirrorEl.style.userSelect = 'none';
            mirrorEl.style.webkitUserSelect = 'none';
            mirrorEl.style.pointerEvents = 'none';
            mirrorEl.classList.add('fc-event-dragging');
            (0, _internalJs.applyStyle)(mirrorEl, {
                position: 'fixed',
                zIndex: this.zIndex,
                visibility: '',
                boxSizing: 'border-box',
                width: sourceElRect.right - sourceElRect.left,
                height: sourceElRect.bottom - sourceElRect.top,
                right: 'auto',
                bottom: 'auto',
                margin: 0
            });
            this.parentNode.appendChild(mirrorEl);
        }
        return mirrorEl;
    }
}
/*
Is a cache for a given element's scroll information (all the info that ScrollController stores)
in addition the "client rectangle" of the element.. the area within the scrollbars.

The cache can be in one of two modes:
- doesListening:false - ignores when the container is scrolled by someone else
- doesListening:true - watch for scrolling and update the cache
*/ class ScrollGeomCache extends (0, _internalJs.ScrollController) {
    constructor(scrollController, doesListening){
        super();
        this.handleScroll = ()=>{
            this.scrollTop = this.scrollController.getScrollTop();
            this.scrollLeft = this.scrollController.getScrollLeft();
            this.handleScrollChange();
        };
        this.scrollController = scrollController;
        this.doesListening = doesListening;
        this.scrollTop = this.origScrollTop = scrollController.getScrollTop();
        this.scrollLeft = this.origScrollLeft = scrollController.getScrollLeft();
        this.scrollWidth = scrollController.getScrollWidth();
        this.scrollHeight = scrollController.getScrollHeight();
        this.clientWidth = scrollController.getClientWidth();
        this.clientHeight = scrollController.getClientHeight();
        this.clientRect = this.computeClientRect(); // do last in case it needs cached values
        if (this.doesListening) this.getEventTarget().addEventListener('scroll', this.handleScroll);
    }
    destroy() {
        if (this.doesListening) this.getEventTarget().removeEventListener('scroll', this.handleScroll);
    }
    getScrollTop() {
        return this.scrollTop;
    }
    getScrollLeft() {
        return this.scrollLeft;
    }
    setScrollTop(top) {
        this.scrollController.setScrollTop(top);
        if (!this.doesListening) {
            // we are not relying on the element to normalize out-of-bounds scroll values
            // so we need to sanitize ourselves
            this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);
            this.handleScrollChange();
        }
    }
    setScrollLeft(top) {
        this.scrollController.setScrollLeft(top);
        if (!this.doesListening) {
            // we are not relying on the element to normalize out-of-bounds scroll values
            // so we need to sanitize ourselves
            this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);
            this.handleScrollChange();
        }
    }
    getClientWidth() {
        return this.clientWidth;
    }
    getClientHeight() {
        return this.clientHeight;
    }
    getScrollWidth() {
        return this.scrollWidth;
    }
    getScrollHeight() {
        return this.scrollHeight;
    }
    handleScrollChange() {}
}
class ElementScrollGeomCache extends ScrollGeomCache {
    constructor(el, doesListening){
        super(new (0, _internalJs.ElementScrollController)(el), doesListening);
    }
    getEventTarget() {
        return this.scrollController.el;
    }
    computeClientRect() {
        return (0, _internalJs.computeInnerRect)(this.scrollController.el);
    }
}
class WindowScrollGeomCache extends ScrollGeomCache {
    constructor(doesListening){
        super(new (0, _internalJs.WindowScrollController)(), doesListening);
    }
    getEventTarget() {
        return window;
    }
    computeClientRect() {
        return {
            left: this.scrollLeft,
            right: this.scrollLeft + this.clientWidth,
            top: this.scrollTop,
            bottom: this.scrollTop + this.clientHeight
        };
    }
    // the window is the only scroll object that changes it's rectangle relative
    // to the document's topleft as it scrolls
    handleScrollChange() {
        this.clientRect = this.computeClientRect();
    }
}
// If available we are using native "performance" API instead of "Date"
// Read more about it on MDN:
// https://developer.mozilla.org/en-US/docs/Web/API/Performance
const getTime = typeof performance === 'function' ? performance.now : Date.now;
/*
For a pointer interaction, automatically scrolls certain scroll containers when the pointer
approaches the edge.

The caller must call start + handleMove + stop.
*/ class AutoScroller {
    constructor(){
        // options that can be set by caller
        this.isEnabled = true;
        this.scrollQuery = [
            window,
            '.fc-scroller'
        ];
        this.edgeThreshold = 50; // pixels
        this.maxVelocity = 300; // pixels per second
        // internal state
        this.pointerScreenX = null;
        this.pointerScreenY = null;
        this.isAnimating = false;
        this.scrollCaches = null;
        // protect against the initial pointerdown being too close to an edge and starting the scroll
        this.everMovedUp = false;
        this.everMovedDown = false;
        this.everMovedLeft = false;
        this.everMovedRight = false;
        this.animate = ()=>{
            if (this.isAnimating) {
                let edge = this.computeBestEdge(this.pointerScreenX + window.scrollX, this.pointerScreenY + window.scrollY);
                if (edge) {
                    let now = getTime();
                    this.handleSide(edge, (now - this.msSinceRequest) / 1000);
                    this.requestAnimation(now);
                } else this.isAnimating = false; // will stop animation
            }
        };
    }
    start(pageX, pageY, scrollStartEl) {
        if (this.isEnabled) {
            this.scrollCaches = this.buildCaches(scrollStartEl);
            this.pointerScreenX = null;
            this.pointerScreenY = null;
            this.everMovedUp = false;
            this.everMovedDown = false;
            this.everMovedLeft = false;
            this.everMovedRight = false;
            this.handleMove(pageX, pageY);
        }
    }
    handleMove(pageX, pageY) {
        if (this.isEnabled) {
            let pointerScreenX = pageX - window.scrollX;
            let pointerScreenY = pageY - window.scrollY;
            let yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;
            let xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;
            if (yDelta < 0) this.everMovedUp = true;
            else if (yDelta > 0) this.everMovedDown = true;
            if (xDelta < 0) this.everMovedLeft = true;
            else if (xDelta > 0) this.everMovedRight = true;
            this.pointerScreenX = pointerScreenX;
            this.pointerScreenY = pointerScreenY;
            if (!this.isAnimating) {
                this.isAnimating = true;
                this.requestAnimation(getTime());
            }
        }
    }
    stop() {
        if (this.isEnabled) {
            this.isAnimating = false; // will stop animation
            for (let scrollCache of this.scrollCaches)scrollCache.destroy();
            this.scrollCaches = null;
        }
    }
    requestAnimation(now) {
        this.msSinceRequest = now;
        requestAnimationFrame(this.animate);
    }
    handleSide(edge, seconds) {
        let { scrollCache } = edge;
        let { edgeThreshold } = this;
        let invDistance = edgeThreshold - edge.distance;
        let velocity = invDistance * invDistance / (edgeThreshold * edgeThreshold) * // quadratic
        this.maxVelocity * seconds;
        let sign = 1;
        switch(edge.name){
            case 'left':
                sign = -1;
            // falls through
            case 'right':
                scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);
                break;
            case 'top':
                sign = -1;
            // falls through
            case 'bottom':
                scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);
                break;
        }
    }
    // left/top are relative to document topleft
    computeBestEdge(left, top) {
        let { edgeThreshold } = this;
        let bestSide = null;
        let scrollCaches = this.scrollCaches || [];
        for (let scrollCache of scrollCaches){
            let rect = scrollCache.clientRect;
            let leftDist = left - rect.left;
            let rightDist = rect.right - left;
            let topDist = top - rect.top;
            let bottomDist = rect.bottom - top;
            // completely within the rect?
            if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {
                if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) bestSide = {
                    scrollCache,
                    name: 'top',
                    distance: topDist
                };
                if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) bestSide = {
                    scrollCache,
                    name: 'bottom',
                    distance: bottomDist
                };
                /*
                TODO: fix broken RTL scrolling. canScrollLeft always returning false
                https://github.com/fullcalendar/fullcalendar/issues/4837
                */ if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) bestSide = {
                    scrollCache,
                    name: 'left',
                    distance: leftDist
                };
                if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) bestSide = {
                    scrollCache,
                    name: 'right',
                    distance: rightDist
                };
            }
        }
        return bestSide;
    }
    buildCaches(scrollStartEl) {
        return this.queryScrollEls(scrollStartEl).map((el)=>{
            if (el === window) return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls
            return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls
        });
    }
    queryScrollEls(scrollStartEl) {
        let els = [];
        for (let query of this.scrollQuery)if (typeof query === 'object') els.push(query);
        else /*
                TODO: in the future, always have auto-scroll happen on element where current Hit came from
                Ticket: https://github.com/fullcalendar/fullcalendar/issues/4593
                */ els.push(...Array.prototype.slice.call(scrollStartEl.getRootNode().querySelectorAll(query)));
        return els;
    }
}
/*
Monitors dragging on an element. Has a number of high-level features:
- minimum distance required before dragging
- minimum wait time ("delay") before dragging
- a mirror element that follows the pointer
*/ class FeaturefulElementDragging extends (0, _internalJs.ElementDragging) {
    constructor(containerEl, selector){
        super(containerEl);
        this.containerEl = containerEl;
        // options that can be directly set by caller
        // the caller can also set the PointerDragging's options as well
        this.delay = null;
        this.minDistance = 0;
        this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag
        this.mirrorNeedsRevert = false;
        this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup
        this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation
        this.isDelayEnded = false;
        this.isDistanceSurpassed = false;
        this.delayTimeoutId = null;
        this.onPointerDown = (ev)=>{
            if (!this.isDragging) {
                this.isInteracting = true;
                this.isDelayEnded = false;
                this.isDistanceSurpassed = false;
                (0, _internalJs.preventSelection)(document.body);
                (0, _internalJs.preventContextMenu)(document.body);
                // prevent links from being visited if there's an eventual drag.
                // also prevents selection in older browsers (maybe?).
                // not necessary for touch, besides, browser would complain about passiveness.
                if (!ev.isTouch) ev.origEvent.preventDefault();
                this.emitter.trigger('pointerdown', ev);
                if (this.isInteracting && // not destroyed via pointerdown handler
                !this.pointer.shouldIgnoreMove) {
                    // actions related to initiating dragstart+dragmove+dragend...
                    this.mirror.setIsVisible(false); // reset. caller must set-visible
                    this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down
                    this.startDelay(ev);
                    if (!this.minDistance) this.handleDistanceSurpassed(ev);
                }
            }
        };
        this.onPointerMove = (ev)=>{
            if (this.isInteracting) {
                this.emitter.trigger('pointermove', ev);
                if (!this.isDistanceSurpassed) {
                    let minDistance = this.minDistance;
                    let distanceSq; // current distance from the origin, squared
                    let { deltaX, deltaY } = ev;
                    distanceSq = deltaX * deltaX + deltaY * deltaY;
                    if (distanceSq >= minDistance * minDistance) this.handleDistanceSurpassed(ev);
                }
                if (this.isDragging) {
                    // a real pointer move? (not one simulated by scrolling)
                    if (ev.origEvent.type !== 'scroll') {
                        this.mirror.handleMove(ev.pageX, ev.pageY);
                        this.autoScroller.handleMove(ev.pageX, ev.pageY);
                    }
                    this.emitter.trigger('dragmove', ev);
                }
            }
        };
        this.onPointerUp = (ev)=>{
            if (this.isInteracting) {
                this.isInteracting = false;
                (0, _internalJs.allowSelection)(document.body);
                (0, _internalJs.allowContextMenu)(document.body);
                this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert
                if (this.isDragging) {
                    this.autoScroller.stop();
                    this.tryStopDrag(ev); // which will stop the mirror
                }
                if (this.delayTimeoutId) {
                    clearTimeout(this.delayTimeoutId);
                    this.delayTimeoutId = null;
                }
            }
        };
        let pointer = this.pointer = new PointerDragging(containerEl);
        pointer.emitter.on('pointerdown', this.onPointerDown);
        pointer.emitter.on('pointermove', this.onPointerMove);
        pointer.emitter.on('pointerup', this.onPointerUp);
        if (selector) pointer.selector = selector;
        this.mirror = new ElementMirror();
        this.autoScroller = new AutoScroller();
    }
    destroy() {
        this.pointer.destroy();
        // HACK: simulate a pointer-up to end the current drag
        // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)
        this.onPointerUp({});
    }
    startDelay(ev) {
        if (typeof this.delay === 'number') this.delayTimeoutId = setTimeout(()=>{
            this.delayTimeoutId = null;
            this.handleDelayEnd(ev);
        }, this.delay); // not assignable to number!
        else this.handleDelayEnd(ev);
    }
    handleDelayEnd(ev) {
        this.isDelayEnded = true;
        this.tryStartDrag(ev);
    }
    handleDistanceSurpassed(ev) {
        this.isDistanceSurpassed = true;
        this.tryStartDrag(ev);
    }
    tryStartDrag(ev) {
        if (this.isDelayEnded && this.isDistanceSurpassed) {
            if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {
                this.isDragging = true;
                this.mirrorNeedsRevert = false;
                this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);
                this.emitter.trigger('dragstart', ev);
                if (this.touchScrollAllowed === false) this.pointer.cancelTouchScroll();
            }
        }
    }
    tryStopDrag(ev) {
        // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
        // that come from the document to fire beforehand. much more convenient this way.
        this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));
    }
    stopDrag(ev) {
        this.isDragging = false;
        this.emitter.trigger('dragend', ev);
    }
    // fill in the implementations...
    setIgnoreMove(bool) {
        this.pointer.shouldIgnoreMove = bool;
    }
    setMirrorIsVisible(bool) {
        this.mirror.setIsVisible(bool);
    }
    setMirrorNeedsRevert(bool) {
        this.mirrorNeedsRevert = bool;
    }
    setAutoScrollEnabled(bool) {
        this.autoScroller.isEnabled = bool;
    }
}
/*
When this class is instantiated, it records the offset of an element (relative to the document topleft),
and continues to monitor scrolling, updating the cached coordinates if it needs to.
Does not access the DOM after instantiation, so highly performant.

Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
and an determine if a given point is inside the combined clipping rectangle.
*/ class OffsetTracker {
    constructor(el){
        this.el = el;
        this.origRect = (0, _internalJs.computeRect)(el);
        // will work fine for divs that have overflow:hidden
        this.scrollCaches = (0, _internalJs.getClippingParents)(el).map((scrollEl)=>new ElementScrollGeomCache(scrollEl, true));
    }
    destroy() {
        for (let scrollCache of this.scrollCaches)scrollCache.destroy();
    }
    computeLeft() {
        let left = this.origRect.left;
        for (let scrollCache of this.scrollCaches)left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();
        return left;
    }
    computeTop() {
        let top = this.origRect.top;
        for (let scrollCache of this.scrollCaches)top += scrollCache.origScrollTop - scrollCache.getScrollTop();
        return top;
    }
    isWithinClipping(pageX, pageY) {
        let point = {
            left: pageX,
            top: pageY
        };
        for (let scrollCache of this.scrollCaches){
            if (!isIgnoredClipping(scrollCache.getEventTarget()) && !(0, _internalJs.pointInsideRect)(point, scrollCache.clientRect)) return false;
        }
        return true;
    }
}
// certain clipping containers should never constrain interactions, like <html> and <body>
// https://github.com/fullcalendar/fullcalendar/issues/3615
function isIgnoredClipping(node) {
    let tagName = node.tagName;
    return tagName === 'HTML' || tagName === 'BODY';
}
/*
Tracks movement over multiple droppable areas (aka "hits")
that exist in one or more DateComponents.
Relies on an existing draggable.

emits:
- pointerdown
- dragstart
- hitchange - fires initially, even if not over a hit
- pointerup
- (hitchange - again, to null, if ended over a hit)
- dragend
*/ class HitDragging {
    constructor(dragging, droppableStore){
        // options that can be set by caller
        this.useSubjectCenter = false;
        this.requireInitial = true; // if doesn't start out on a hit, won't emit any events
        this.disablePointCheck = false;
        this.initialHit = null;
        this.movingHit = null;
        this.finalHit = null; // won't ever be populated if shouldIgnoreMove
        this.handlePointerDown = (ev)=>{
            let { dragging } = this;
            this.initialHit = null;
            this.movingHit = null;
            this.finalHit = null;
            this.prepareHits();
            this.processFirstCoord(ev);
            if (this.initialHit || !this.requireInitial) {
                dragging.setIgnoreMove(false);
                // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(
                this.emitter.trigger('pointerdown', ev);
            } else dragging.setIgnoreMove(true);
        };
        this.handleDragStart = (ev)=>{
            this.emitter.trigger('dragstart', ev);
            this.handleMove(ev, true); // force = fire even if initially null
        };
        this.handleDragMove = (ev)=>{
            this.emitter.trigger('dragmove', ev);
            this.handleMove(ev);
        };
        this.handlePointerUp = (ev)=>{
            this.releaseHits();
            this.emitter.trigger('pointerup', ev);
        };
        this.handleDragEnd = (ev)=>{
            if (this.movingHit) this.emitter.trigger('hitupdate', null, true, ev);
            this.finalHit = this.movingHit;
            this.movingHit = null;
            this.emitter.trigger('dragend', ev);
        };
        this.droppableStore = droppableStore;
        dragging.emitter.on('pointerdown', this.handlePointerDown);
        dragging.emitter.on('dragstart', this.handleDragStart);
        dragging.emitter.on('dragmove', this.handleDragMove);
        dragging.emitter.on('pointerup', this.handlePointerUp);
        dragging.emitter.on('dragend', this.handleDragEnd);
        this.dragging = dragging;
        this.emitter = new (0, _internalJs.Emitter)();
    }
    // sets initialHit
    // sets coordAdjust
    processFirstCoord(ev) {
        let origPoint = {
            left: ev.pageX,
            top: ev.pageY
        };
        let adjustedPoint = origPoint;
        let subjectEl = ev.subjectEl;
        let subjectRect;
        if (subjectEl instanceof HTMLElement) {
            subjectRect = (0, _internalJs.computeRect)(subjectEl);
            adjustedPoint = (0, _internalJs.constrainPoint)(adjustedPoint, subjectRect);
        }
        let initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);
        if (initialHit) {
            if (this.useSubjectCenter && subjectRect) {
                let slicedSubjectRect = (0, _internalJs.intersectRects)(subjectRect, initialHit.rect);
                if (slicedSubjectRect) adjustedPoint = (0, _internalJs.getRectCenter)(slicedSubjectRect);
            }
            this.coordAdjust = (0, _internalJs.diffPoints)(adjustedPoint, origPoint);
        } else this.coordAdjust = {
            left: 0,
            top: 0
        };
    }
    handleMove(ev, forceHandle) {
        let hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);
        if (forceHandle || !isHitsEqual(this.movingHit, hit)) {
            this.movingHit = hit;
            this.emitter.trigger('hitupdate', hit, false, ev);
        }
    }
    prepareHits() {
        this.offsetTrackers = (0, _internalJs.mapHash)(this.droppableStore, (interactionSettings)=>{
            interactionSettings.component.prepareHits();
            return new OffsetTracker(interactionSettings.el);
        });
    }
    releaseHits() {
        let { offsetTrackers } = this;
        for(let id in offsetTrackers)offsetTrackers[id].destroy();
        this.offsetTrackers = {};
    }
    queryHitForOffset(offsetLeft, offsetTop) {
        let { droppableStore, offsetTrackers } = this;
        let bestHit = null;
        for(let id in droppableStore){
            let component = droppableStore[id].component;
            let offsetTracker = offsetTrackers[id];
            if (offsetTracker && // wasn't destroyed mid-drag
            offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {
                let originLeft = offsetTracker.computeLeft();
                let originTop = offsetTracker.computeTop();
                let positionLeft = offsetLeft - originLeft;
                let positionTop = offsetTop - originTop;
                let { origRect } = offsetTracker;
                let width = origRect.right - origRect.left;
                let height = origRect.bottom - origRect.top;
                if (// must be within the element's bounds
                positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {
                    let hit = component.queryHit(positionLeft, positionTop, width, height);
                    if (hit && // make sure the hit is within activeRange, meaning it's not a dead cell
                    (0, _internalJs.rangeContainsRange)(hit.dateProfile.activeRange, hit.dateSpan.range) && // Ensure the component we are querying for the hit is accessibly my the pointer
                    // Prevents obscured calendars (ex: under a modal dialog) from accepting hit
                    // https://github.com/fullcalendar/fullcalendar/issues/5026
                    (this.disablePointCheck || offsetTracker.el.contains(offsetTracker.el.getRootNode().elementFromPoint(// add-back origins to get coordinate relative to top-left of window viewport
                    positionLeft + originLeft - window.scrollX, positionTop + originTop - window.scrollY))) && (!bestHit || hit.layer > bestHit.layer)) {
                        hit.componentId = id;
                        hit.context = component.context;
                        // TODO: better way to re-orient rectangle
                        hit.rect.left += originLeft;
                        hit.rect.right += originLeft;
                        hit.rect.top += originTop;
                        hit.rect.bottom += originTop;
                        bestHit = hit;
                    }
                }
            }
        }
        return bestHit;
    }
}
function isHitsEqual(hit0, hit1) {
    if (!hit0 && !hit1) return true;
    if (Boolean(hit0) !== Boolean(hit1)) return false;
    return (0, _internalJs.isDateSpansEqual)(hit0.dateSpan, hit1.dateSpan);
}
function buildDatePointApiWithContext(dateSpan, context) {
    let props = {};
    for (let transform of context.pluginHooks.datePointTransforms)Object.assign(props, transform(dateSpan, context));
    Object.assign(props, buildDatePointApi(dateSpan, context.dateEnv));
    return props;
}
function buildDatePointApi(span, dateEnv) {
    return {
        date: dateEnv.toDate(span.range.start),
        dateStr: dateEnv.formatIso(span.range.start, {
            omitTime: span.allDay
        }),
        allDay: span.allDay
    };
}
/*
Monitors when the user clicks on a specific date/time of a component.
A pointerdown+pointerup on the same "hit" constitutes a click.
*/ class DateClicking extends (0, _internalJs.Interaction) {
    constructor(settings){
        super(settings);
        this.handlePointerDown = (pev)=>{
            let { dragging } = this;
            let downEl = pev.origEvent.target;
            // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired
            dragging.setIgnoreMove(!this.component.isValidDateDownEl(downEl));
        };
        // won't even fire if moving was ignored
        this.handleDragEnd = (ev)=>{
            let { component } = this;
            let { pointer } = this.dragging;
            if (!pointer.wasTouchScroll) {
                let { initialHit, finalHit } = this.hitDragging;
                if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {
                    let { context } = component;
                    let arg = Object.assign(Object.assign({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), {
                        dayEl: initialHit.dayEl,
                        jsEvent: ev.origEvent,
                        view: context.viewApi || context.calendarApi.view
                    });
                    context.emitter.trigger('dateClick', arg);
                }
            }
        };
        // we DO want to watch pointer moves because otherwise finalHit won't get populated
        this.dragging = new FeaturefulElementDragging(settings.el);
        this.dragging.autoScroller.isEnabled = false;
        let hitDragging = this.hitDragging = new HitDragging(this.dragging, (0, _internalJs.interactionSettingsToStore)(settings));
        hitDragging.emitter.on('pointerdown', this.handlePointerDown);
        hitDragging.emitter.on('dragend', this.handleDragEnd);
    }
    destroy() {
        this.dragging.destroy();
    }
}
/*
Tracks when the user selects a portion of time of a component,
constituted by a drag over date cells, with a possible delay at the beginning of the drag.
*/ class DateSelecting extends (0, _internalJs.Interaction) {
    constructor(settings){
        super(settings);
        this.dragSelection = null;
        this.handlePointerDown = (ev)=>{
            let { component, dragging } = this;
            let { options } = component.context;
            let canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target);
            // don't bother to watch expensive moves if component won't do selection
            dragging.setIgnoreMove(!canSelect);
            // if touch, require user to hold down
            dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;
        };
        this.handleDragStart = (ev)=>{
            this.component.context.calendarApi.unselect(ev); // unselect previous selections
        };
        this.handleHitUpdate = (hit, isFinal)=>{
            let { context } = this.component;
            let dragSelection = null;
            let isInvalid = false;
            if (hit) {
                let initialHit = this.hitDragging.initialHit;
                let disallowed = hit.componentId === initialHit.componentId && this.isHitComboAllowed && !this.isHitComboAllowed(initialHit, hit);
                if (!disallowed) dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);
                if (!dragSelection || !(0, _internalJs.isDateSelectionValid)(dragSelection, hit.dateProfile, context)) {
                    isInvalid = true;
                    dragSelection = null;
                }
            }
            if (dragSelection) context.dispatch({
                type: 'SELECT_DATES',
                selection: dragSelection
            });
            else if (!isFinal) context.dispatch({
                type: 'UNSELECT_DATES'
            });
            if (!isInvalid) (0, _internalJs.enableCursor)();
            else (0, _internalJs.disableCursor)();
            if (!isFinal) this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging
        };
        this.handlePointerUp = (pev)=>{
            if (this.dragSelection) {
                // selection is already rendered, so just need to report selection
                (0, _internalJs.triggerDateSelect)(this.dragSelection, pev, this.component.context);
                this.dragSelection = null;
            }
        };
        let { component } = settings;
        let { options } = component.context;
        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);
        dragging.touchScrollAllowed = false;
        dragging.minDistance = options.selectMinDistance || 0;
        dragging.autoScroller.isEnabled = options.dragScroll;
        let hitDragging = this.hitDragging = new HitDragging(this.dragging, (0, _internalJs.interactionSettingsToStore)(settings));
        hitDragging.emitter.on('pointerdown', this.handlePointerDown);
        hitDragging.emitter.on('dragstart', this.handleDragStart);
        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
        hitDragging.emitter.on('pointerup', this.handlePointerUp);
    }
    destroy() {
        this.dragging.destroy();
    }
}
function getComponentTouchDelay$1(component) {
    let { options } = component.context;
    let delay = options.selectLongPressDelay;
    if (delay == null) delay = options.longPressDelay;
    return delay;
}
function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {
    let dateSpan0 = hit0.dateSpan;
    let dateSpan1 = hit1.dateSpan;
    let ms = [
        dateSpan0.range.start,
        dateSpan0.range.end,
        dateSpan1.range.start,
        dateSpan1.range.end
    ];
    ms.sort((0, _internalJs.compareNumbers));
    let props = {};
    for (let transformer of dateSelectionTransformers){
        let res = transformer(hit0, hit1);
        if (res === false) return null;
        if (res) Object.assign(props, res);
    }
    props.range = {
        start: ms[0],
        end: ms[3]
    };
    props.allDay = dateSpan0.allDay;
    return props;
}
class EventDragging extends (0, _internalJs.Interaction) {
    constructor(settings){
        super(settings);
        // internal state
        this.subjectEl = null;
        this.subjectSeg = null; // the seg being selected/dragged
        this.isDragging = false;
        this.eventRange = null;
        this.relevantEvents = null; // the events being dragged
        this.receivingContext = null;
        this.validMutation = null;
        this.mutatedRelevantEvents = null;
        this.handlePointerDown = (ev)=>{
            let origTarget = ev.origEvent.target;
            let { component, dragging } = this;
            let { mirror } = dragging;
            let { options } = component.context;
            let initialContext = component.context;
            this.subjectEl = ev.subjectEl;
            let subjectSeg = this.subjectSeg = (0, _internalJs.getElSeg)(ev.subjectEl);
            let eventRange = this.eventRange = subjectSeg.eventRange;
            let eventInstanceId = eventRange.instance.instanceId;
            this.relevantEvents = (0, _internalJs.getRelevantEvents)(initialContext.getCurrentData().eventStore, eventInstanceId);
            dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;
            dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet
            ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay(component) : null;
            if (options.fixedMirrorParent) mirror.parentNode = options.fixedMirrorParent;
            else mirror.parentNode = (0, _internalJs.elementClosest)(origTarget, '.fc');
            mirror.revertDuration = options.dragRevertDuration;
            let isValid = component.isValidSegDownEl(origTarget) && !(0, _internalJs.elementClosest)(origTarget, '.fc-event-resizer'); // NOT on a resizer
            dragging.setIgnoreMove(!isValid);
            // disable dragging for elements that are resizable (ie, selectable)
            // but are not draggable
            this.isDragging = isValid && ev.subjectEl.classList.contains('fc-event-draggable');
        };
        this.handleDragStart = (ev)=>{
            let initialContext = this.component.context;
            let eventRange = this.eventRange;
            let eventInstanceId = eventRange.instance.instanceId;
            if (ev.isTouch) // need to select a different event?
            {
                if (eventInstanceId !== this.component.props.eventSelection) initialContext.dispatch({
                    type: 'SELECT_EVENT',
                    eventInstanceId
                });
            } else // if now using mouse, but was previous touch interaction, clear selected event
            initialContext.dispatch({
                type: 'UNSELECT_EVENT'
            });
            if (this.isDragging) {
                initialContext.calendarApi.unselect(ev); // unselect *date* selection
                initialContext.emitter.trigger('eventDragStart', {
                    el: this.subjectEl,
                    event: new (0, _internalJs.EventImpl)(initialContext, eventRange.def, eventRange.instance),
                    jsEvent: ev.origEvent,
                    view: initialContext.viewApi
                });
            }
        };
        this.handleHitUpdate = (hit, isFinal)=>{
            if (!this.isDragging) return;
            let relevantEvents = this.relevantEvents;
            let initialHit = this.hitDragging.initialHit;
            let initialContext = this.component.context;
            // states based on new hit
            let receivingContext = null;
            let mutation = null;
            let mutatedRelevantEvents = null;
            let isInvalid = false;
            let interaction = {
                affectedEvents: relevantEvents,
                mutatedEvents: (0, _internalJs.createEmptyEventStore)(),
                isEvent: true
            };
            if (hit) {
                receivingContext = hit.context;
                let receivingOptions = receivingContext.options;
                if (initialContext === receivingContext || receivingOptions.editable && receivingOptions.droppable) {
                    mutation = computeEventMutation(initialHit, hit, this.eventRange.instance.range.start, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);
                    if (mutation) {
                        mutatedRelevantEvents = (0, _internalJs.applyMutationToEventStore)(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);
                        interaction.mutatedEvents = mutatedRelevantEvents;
                        if (!(0, _internalJs.isInteractionValid)(interaction, hit.dateProfile, receivingContext)) {
                            isInvalid = true;
                            mutation = null;
                            mutatedRelevantEvents = null;
                            interaction.mutatedEvents = (0, _internalJs.createEmptyEventStore)();
                        }
                    }
                } else receivingContext = null;
            }
            this.displayDrag(receivingContext, interaction);
            if (!isInvalid) (0, _internalJs.enableCursor)();
            else (0, _internalJs.disableCursor)();
            if (!isFinal) {
                if (initialContext === receivingContext && // TODO: write test for this
                isHitsEqual(initialHit, hit)) mutation = null;
                this.dragging.setMirrorNeedsRevert(!mutation);
                // render the mirror if no already-rendered mirror
                // TODO: wish we could somehow wait for dispatch to guarantee render
                this.dragging.setMirrorIsVisible(!hit || !this.subjectEl.getRootNode().querySelector('.fc-event-mirror'));
                // assign states based on new hit
                this.receivingContext = receivingContext;
                this.validMutation = mutation;
                this.mutatedRelevantEvents = mutatedRelevantEvents;
            }
        };
        this.handlePointerUp = ()=>{
            if (!this.isDragging) this.cleanup(); // because handleDragEnd won't fire
        };
        this.handleDragEnd = (ev)=>{
            if (this.isDragging) {
                let initialContext = this.component.context;
                let initialView = initialContext.viewApi;
                let { receivingContext, validMutation } = this;
                let eventDef = this.eventRange.def;
                let eventInstance = this.eventRange.instance;
                let eventApi = new (0, _internalJs.EventImpl)(initialContext, eventDef, eventInstance);
                let relevantEvents = this.relevantEvents;
                let mutatedRelevantEvents = this.mutatedRelevantEvents;
                let { finalHit } = this.hitDragging;
                this.clearDrag(); // must happen after revert animation
                initialContext.emitter.trigger('eventDragStop', {
                    el: this.subjectEl,
                    event: eventApi,
                    jsEvent: ev.origEvent,
                    view: initialView
                });
                if (validMutation) {
                    // dropped within same calendar
                    if (receivingContext === initialContext) {
                        let updatedEventApi = new (0, _internalJs.EventImpl)(initialContext, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);
                        initialContext.dispatch({
                            type: 'MERGE_EVENTS',
                            eventStore: mutatedRelevantEvents
                        });
                        let eventChangeArg = {
                            oldEvent: eventApi,
                            event: updatedEventApi,
                            relatedEvents: (0, _internalJs.buildEventApis)(mutatedRelevantEvents, initialContext, eventInstance),
                            revert () {
                                initialContext.dispatch({
                                    type: 'MERGE_EVENTS',
                                    eventStore: relevantEvents
                                });
                            }
                        };
                        let transformed = {};
                        for (let transformer of initialContext.getCurrentData().pluginHooks.eventDropTransformers)Object.assign(transformed, transformer(validMutation, initialContext));
                        initialContext.emitter.trigger('eventDrop', Object.assign(Object.assign(Object.assign({}, eventChangeArg), transformed), {
                            el: ev.subjectEl,
                            delta: validMutation.datesDelta,
                            jsEvent: ev.origEvent,
                            view: initialView
                        }));
                        initialContext.emitter.trigger('eventChange', eventChangeArg);
                    // dropped in different calendar
                    } else if (receivingContext) {
                        let eventRemoveArg = {
                            event: eventApi,
                            relatedEvents: (0, _internalJs.buildEventApis)(relevantEvents, initialContext, eventInstance),
                            revert () {
                                initialContext.dispatch({
                                    type: 'MERGE_EVENTS',
                                    eventStore: relevantEvents
                                });
                            }
                        };
                        initialContext.emitter.trigger('eventLeave', Object.assign(Object.assign({}, eventRemoveArg), {
                            draggedEl: ev.subjectEl,
                            view: initialView
                        }));
                        initialContext.dispatch({
                            type: 'REMOVE_EVENTS',
                            eventStore: relevantEvents
                        });
                        initialContext.emitter.trigger('eventRemove', eventRemoveArg);
                        let addedEventDef = mutatedRelevantEvents.defs[eventDef.defId];
                        let addedEventInstance = mutatedRelevantEvents.instances[eventInstance.instanceId];
                        let addedEventApi = new (0, _internalJs.EventImpl)(receivingContext, addedEventDef, addedEventInstance);
                        receivingContext.dispatch({
                            type: 'MERGE_EVENTS',
                            eventStore: mutatedRelevantEvents
                        });
                        let eventAddArg = {
                            event: addedEventApi,
                            relatedEvents: (0, _internalJs.buildEventApis)(mutatedRelevantEvents, receivingContext, addedEventInstance),
                            revert () {
                                receivingContext.dispatch({
                                    type: 'REMOVE_EVENTS',
                                    eventStore: mutatedRelevantEvents
                                });
                            }
                        };
                        receivingContext.emitter.trigger('eventAdd', eventAddArg);
                        if (ev.isTouch) receivingContext.dispatch({
                            type: 'SELECT_EVENT',
                            eventInstanceId: eventInstance.instanceId
                        });
                        receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {
                            draggedEl: ev.subjectEl,
                            jsEvent: ev.origEvent,
                            view: finalHit.context.viewApi
                        }));
                        receivingContext.emitter.trigger('eventReceive', Object.assign(Object.assign({}, eventAddArg), {
                            draggedEl: ev.subjectEl,
                            view: finalHit.context.viewApi
                        }));
                    }
                } else initialContext.emitter.trigger('_noEventDrop');
            }
            this.cleanup();
        };
        let { component } = this;
        let { options } = component.context;
        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);
        dragging.pointer.selector = EventDragging.SELECTOR;
        dragging.touchScrollAllowed = false;
        dragging.autoScroller.isEnabled = options.dragScroll;
        let hitDragging = this.hitDragging = new HitDragging(this.dragging, (0, _internalJs.interactionSettingsStore));
        hitDragging.useSubjectCenter = settings.useEventCenter;
        hitDragging.emitter.on('pointerdown', this.handlePointerDown);
        hitDragging.emitter.on('dragstart', this.handleDragStart);
        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
        hitDragging.emitter.on('pointerup', this.handlePointerUp);
        hitDragging.emitter.on('dragend', this.handleDragEnd);
    }
    destroy() {
        this.dragging.destroy();
    }
    // render a drag state on the next receivingCalendar
    displayDrag(nextContext, state) {
        let initialContext = this.component.context;
        let prevContext = this.receivingContext;
        // does the previous calendar need to be cleared?
        if (prevContext && prevContext !== nextContext) {
            // does the initial calendar need to be cleared?
            // if so, don't clear all the way. we still need to to hide the affectedEvents
            if (prevContext === initialContext) prevContext.dispatch({
                type: 'SET_EVENT_DRAG',
                state: {
                    affectedEvents: state.affectedEvents,
                    mutatedEvents: (0, _internalJs.createEmptyEventStore)(),
                    isEvent: true
                }
            });
            else prevContext.dispatch({
                type: 'UNSET_EVENT_DRAG'
            });
        }
        if (nextContext) nextContext.dispatch({
            type: 'SET_EVENT_DRAG',
            state
        });
    }
    clearDrag() {
        let initialCalendar = this.component.context;
        let { receivingContext } = this;
        if (receivingContext) receivingContext.dispatch({
            type: 'UNSET_EVENT_DRAG'
        });
        // the initial calendar might have an dummy drag state from displayDrag
        if (initialCalendar !== receivingContext) initialCalendar.dispatch({
            type: 'UNSET_EVENT_DRAG'
        });
    }
    cleanup() {
        this.subjectSeg = null;
        this.isDragging = false;
        this.eventRange = null;
        this.relevantEvents = null;
        this.receivingContext = null;
        this.validMutation = null;
        this.mutatedRelevantEvents = null;
    }
}
// TODO: test this in IE11
// QUESTION: why do we need it on the resizable???
EventDragging.SELECTOR = '.fc-event-draggable, .fc-event-resizable';
function computeEventMutation(hit0, hit1, eventInstanceStart, massagers) {
    let dateSpan0 = hit0.dateSpan;
    let dateSpan1 = hit1.dateSpan;
    let date0 = dateSpan0.range.start;
    let date1 = dateSpan1.range.start;
    let standardProps = {};
    if (dateSpan0.allDay !== dateSpan1.allDay) {
        standardProps.allDay = dateSpan1.allDay;
        standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;
        if (dateSpan1.allDay) // means date1 is already start-of-day,
        // but date0 needs to be converted
        date0 = (0, _internalJs.startOfDay)(eventInstanceStart);
        else // Moving from allDate->timed
        // Doesn't matter where on the event the drag began, mutate the event's start-date to date1
        date0 = eventInstanceStart;
    }
    let delta = (0, _internalJs.diffDates)(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ? hit0.largeUnit : null);
    if (delta.milliseconds) standardProps.allDay = false;
    let mutation = {
        datesDelta: delta,
        standardProps
    };
    for (let massager of massagers)massager(mutation, hit0, hit1);
    return mutation;
}
function getComponentTouchDelay(component) {
    let { options } = component.context;
    let delay = options.eventLongPressDelay;
    if (delay == null) delay = options.longPressDelay;
    return delay;
}
class EventResizing extends (0, _internalJs.Interaction) {
    constructor(settings){
        super(settings);
        // internal state
        this.draggingSegEl = null;
        this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?
        this.eventRange = null;
        this.relevantEvents = null;
        this.validMutation = null;
        this.mutatedRelevantEvents = null;
        this.handlePointerDown = (ev)=>{
            let { component } = this;
            let segEl = this.querySegEl(ev);
            let seg = (0, _internalJs.getElSeg)(segEl);
            let eventRange = this.eventRange = seg.eventRange;
            this.dragging.minDistance = component.context.options.eventDragMinDistance;
            // if touch, need to be working with a selected event
            this.dragging.setIgnoreMove(!this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && this.component.props.eventSelection !== eventRange.instance.instanceId);
        };
        this.handleDragStart = (ev)=>{
            let { context } = this.component;
            let eventRange = this.eventRange;
            this.relevantEvents = (0, _internalJs.getRelevantEvents)(context.getCurrentData().eventStore, this.eventRange.instance.instanceId);
            let segEl = this.querySegEl(ev);
            this.draggingSegEl = segEl;
            this.draggingSeg = (0, _internalJs.getElSeg)(segEl);
            context.calendarApi.unselect();
            context.emitter.trigger('eventResizeStart', {
                el: segEl,
                event: new (0, _internalJs.EventImpl)(context, eventRange.def, eventRange.instance),
                jsEvent: ev.origEvent,
                view: context.viewApi
            });
        };
        this.handleHitUpdate = (hit, isFinal, ev)=>{
            let { context } = this.component;
            let relevantEvents = this.relevantEvents;
            let initialHit = this.hitDragging.initialHit;
            let eventInstance = this.eventRange.instance;
            let mutation = null;
            let mutatedRelevantEvents = null;
            let isInvalid = false;
            let interaction = {
                affectedEvents: relevantEvents,
                mutatedEvents: (0, _internalJs.createEmptyEventStore)(),
                isEvent: true
            };
            if (hit) {
                let disallowed = hit.componentId === initialHit.componentId && this.isHitComboAllowed && !this.isHitComboAllowed(initialHit, hit);
                if (!disallowed) mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-event-resizer-start'), eventInstance.range);
            }
            if (mutation) {
                mutatedRelevantEvents = (0, _internalJs.applyMutationToEventStore)(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);
                interaction.mutatedEvents = mutatedRelevantEvents;
                if (!(0, _internalJs.isInteractionValid)(interaction, hit.dateProfile, context)) {
                    isInvalid = true;
                    mutation = null;
                    mutatedRelevantEvents = null;
                    interaction.mutatedEvents = null;
                }
            }
            if (mutatedRelevantEvents) context.dispatch({
                type: 'SET_EVENT_RESIZE',
                state: interaction
            });
            else context.dispatch({
                type: 'UNSET_EVENT_RESIZE'
            });
            if (!isInvalid) (0, _internalJs.enableCursor)();
            else (0, _internalJs.disableCursor)();
            if (!isFinal) {
                if (mutation && isHitsEqual(initialHit, hit)) mutation = null;
                this.validMutation = mutation;
                this.mutatedRelevantEvents = mutatedRelevantEvents;
            }
        };
        this.handleDragEnd = (ev)=>{
            let { context } = this.component;
            let eventDef = this.eventRange.def;
            let eventInstance = this.eventRange.instance;
            let eventApi = new (0, _internalJs.EventImpl)(context, eventDef, eventInstance);
            let relevantEvents = this.relevantEvents;
            let mutatedRelevantEvents = this.mutatedRelevantEvents;
            context.emitter.trigger('eventResizeStop', {
                el: this.draggingSegEl,
                event: eventApi,
                jsEvent: ev.origEvent,
                view: context.viewApi
            });
            if (this.validMutation) {
                let updatedEventApi = new (0, _internalJs.EventImpl)(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);
                context.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: mutatedRelevantEvents
                });
                let eventChangeArg = {
                    oldEvent: eventApi,
                    event: updatedEventApi,
                    relatedEvents: (0, _internalJs.buildEventApis)(mutatedRelevantEvents, context, eventInstance),
                    revert () {
                        context.dispatch({
                            type: 'MERGE_EVENTS',
                            eventStore: relevantEvents
                        });
                    }
                };
                context.emitter.trigger('eventResize', Object.assign(Object.assign({}, eventChangeArg), {
                    el: this.draggingSegEl,
                    startDelta: this.validMutation.startDelta || (0, _internalJs.createDuration)(0),
                    endDelta: this.validMutation.endDelta || (0, _internalJs.createDuration)(0),
                    jsEvent: ev.origEvent,
                    view: context.viewApi
                }));
                context.emitter.trigger('eventChange', eventChangeArg);
            } else context.emitter.trigger('_noEventResize');
            // reset all internal state
            this.draggingSeg = null;
            this.relevantEvents = null;
            this.validMutation = null;
        // okay to keep eventInstance around. useful to set it in handlePointerDown
        };
        let { component } = settings;
        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);
        dragging.pointer.selector = '.fc-event-resizer';
        dragging.touchScrollAllowed = false;
        dragging.autoScroller.isEnabled = component.context.options.dragScroll;
        let hitDragging = this.hitDragging = new HitDragging(this.dragging, (0, _internalJs.interactionSettingsToStore)(settings));
        hitDragging.emitter.on('pointerdown', this.handlePointerDown);
        hitDragging.emitter.on('dragstart', this.handleDragStart);
        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
        hitDragging.emitter.on('dragend', this.handleDragEnd);
    }
    destroy() {
        this.dragging.destroy();
    }
    querySegEl(ev) {
        return (0, _internalJs.elementClosest)(ev.subjectEl, '.fc-event');
    }
}
function computeMutation(hit0, hit1, isFromStart, instanceRange) {
    let dateEnv = hit0.context.dateEnv;
    let date0 = hit0.dateSpan.range.start;
    let date1 = hit1.dateSpan.range.start;
    let delta = (0, _internalJs.diffDates)(date0, date1, dateEnv, hit0.largeUnit);
    if (isFromStart) {
        if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) return {
            startDelta: delta
        };
    } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) return {
        endDelta: delta
    };
    return null;
}
class UnselectAuto {
    constructor(context){
        this.context = context;
        this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system
        this.matchesCancel = false;
        this.matchesEvent = false;
        this.onSelect = (selectInfo)=>{
            if (selectInfo.jsEvent) this.isRecentPointerDateSelect = true;
        };
        this.onDocumentPointerDown = (pev)=>{
            let unselectCancel = this.context.options.unselectCancel;
            let downEl = (0, _internalJs.getEventTargetViaRoot)(pev.origEvent);
            this.matchesCancel = !!(0, _internalJs.elementClosest)(downEl, unselectCancel);
            this.matchesEvent = !!(0, _internalJs.elementClosest)(downEl, EventDragging.SELECTOR); // interaction started on an event?
        };
        this.onDocumentPointerUp = (pev)=>{
            let { context } = this;
            let { documentPointer } = this;
            let calendarState = context.getCurrentData();
            // touch-scrolling should never unfocus any type of selection
            if (!documentPointer.wasTouchScroll) {
                if (calendarState.dateSelection && // an existing date selection?
                !this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?
                ) {
                    let unselectAuto = context.options.unselectAuto;
                    if (unselectAuto && (!unselectAuto || !this.matchesCancel)) context.calendarApi.unselect(pev);
                }
                if (calendarState.eventSelection && // an existing event selected?
                !this.matchesEvent // interaction DIDN'T start on an event
                ) context.dispatch({
                    type: 'UNSELECT_EVENT'
                });
            }
            this.isRecentPointerDateSelect = false;
        };
        let documentPointer = this.documentPointer = new PointerDragging(document);
        documentPointer.shouldIgnoreMove = true;
        documentPointer.shouldWatchScroll = false;
        documentPointer.emitter.on('pointerdown', this.onDocumentPointerDown);
        documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);
        /*
        TODO: better way to know about whether there was a selection with the pointer
        */ context.emitter.on('select', this.onSelect);
    }
    destroy() {
        this.context.emitter.off('select', this.onSelect);
        this.documentPointer.destroy();
    }
}
const OPTION_REFINERS = {
    fixedMirrorParent: (0, _internalJs.identity)
};
const LISTENER_REFINERS = {
    dateClick: (0, _internalJs.identity),
    eventDragStart: (0, _internalJs.identity),
    eventDragStop: (0, _internalJs.identity),
    eventDrop: (0, _internalJs.identity),
    eventResizeStart: (0, _internalJs.identity),
    eventResizeStop: (0, _internalJs.identity),
    eventResize: (0, _internalJs.identity),
    drop: (0, _internalJs.identity),
    eventReceive: (0, _internalJs.identity),
    eventLeave: (0, _internalJs.identity)
};
/*
Given an already instantiated draggable object for one-or-more elements,
Interprets any dragging as an attempt to drag an events that lives outside
of a calendar onto a calendar.
*/ class ExternalElementDragging {
    constructor(dragging, suppliedDragMeta){
        this.receivingContext = null;
        this.droppableEvent = null; // will exist for all drags, even if create:false
        this.suppliedDragMeta = null;
        this.dragMeta = null;
        this.handleDragStart = (ev)=>{
            this.dragMeta = this.buildDragMeta(ev.subjectEl);
        };
        this.handleHitUpdate = (hit, isFinal, ev)=>{
            let { dragging } = this.hitDragging;
            let receivingContext = null;
            let droppableEvent = null;
            let isInvalid = false;
            let interaction = {
                affectedEvents: (0, _internalJs.createEmptyEventStore)(),
                mutatedEvents: (0, _internalJs.createEmptyEventStore)(),
                isEvent: this.dragMeta.create
            };
            if (hit) {
                receivingContext = hit.context;
                if (this.canDropElOnCalendar(ev.subjectEl, receivingContext)) {
                    droppableEvent = computeEventForDateSpan(hit.dateSpan, this.dragMeta, receivingContext);
                    interaction.mutatedEvents = (0, _internalJs.eventTupleToStore)(droppableEvent);
                    isInvalid = !(0, _internalJs.isInteractionValid)(interaction, hit.dateProfile, receivingContext);
                    if (isInvalid) {
                        interaction.mutatedEvents = (0, _internalJs.createEmptyEventStore)();
                        droppableEvent = null;
                    }
                }
            }
            this.displayDrag(receivingContext, interaction);
            // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)
            // TODO: wish we could somehow wait for dispatch to guarantee render
            dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-event-mirror'));
            if (!isInvalid) (0, _internalJs.enableCursor)();
            else (0, _internalJs.disableCursor)();
            if (!isFinal) {
                dragging.setMirrorNeedsRevert(!droppableEvent);
                this.receivingContext = receivingContext;
                this.droppableEvent = droppableEvent;
            }
        };
        this.handleDragEnd = (pev)=>{
            let { receivingContext, droppableEvent } = this;
            this.clearDrag();
            if (receivingContext && droppableEvent) {
                let finalHit = this.hitDragging.finalHit;
                let finalView = finalHit.context.viewApi;
                let dragMeta = this.dragMeta;
                receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {
                    draggedEl: pev.subjectEl,
                    jsEvent: pev.origEvent,
                    view: finalView
                }));
                if (dragMeta.create) {
                    let addingEvents = (0, _internalJs.eventTupleToStore)(droppableEvent);
                    receivingContext.dispatch({
                        type: 'MERGE_EVENTS',
                        eventStore: addingEvents
                    });
                    if (pev.isTouch) receivingContext.dispatch({
                        type: 'SELECT_EVENT',
                        eventInstanceId: droppableEvent.instance.instanceId
                    });
                    // signal that an external event landed
                    receivingContext.emitter.trigger('eventReceive', {
                        event: new (0, _internalJs.EventImpl)(receivingContext, droppableEvent.def, droppableEvent.instance),
                        relatedEvents: [],
                        revert () {
                            receivingContext.dispatch({
                                type: 'REMOVE_EVENTS',
                                eventStore: addingEvents
                            });
                        },
                        draggedEl: pev.subjectEl,
                        view: finalView
                    });
                }
            }
            this.receivingContext = null;
            this.droppableEvent = null;
        };
        let hitDragging = this.hitDragging = new HitDragging(dragging, (0, _internalJs.interactionSettingsStore));
        hitDragging.requireInitial = false; // will start outside of a component
        hitDragging.emitter.on('dragstart', this.handleDragStart);
        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
        hitDragging.emitter.on('dragend', this.handleDragEnd);
        this.suppliedDragMeta = suppliedDragMeta;
    }
    buildDragMeta(subjectEl) {
        if (typeof this.suppliedDragMeta === 'object') return (0, _internalJs.parseDragMeta)(this.suppliedDragMeta);
        if (typeof this.suppliedDragMeta === 'function') return (0, _internalJs.parseDragMeta)(this.suppliedDragMeta(subjectEl));
        return getDragMetaFromEl(subjectEl);
    }
    displayDrag(nextContext, state) {
        let prevContext = this.receivingContext;
        if (prevContext && prevContext !== nextContext) prevContext.dispatch({
            type: 'UNSET_EVENT_DRAG'
        });
        if (nextContext) nextContext.dispatch({
            type: 'SET_EVENT_DRAG',
            state
        });
    }
    clearDrag() {
        if (this.receivingContext) this.receivingContext.dispatch({
            type: 'UNSET_EVENT_DRAG'
        });
    }
    canDropElOnCalendar(el, receivingContext) {
        let dropAccept = receivingContext.options.dropAccept;
        if (typeof dropAccept === 'function') return dropAccept.call(receivingContext.calendarApi, el);
        if (typeof dropAccept === 'string' && dropAccept) return Boolean((0, _internalJs.elementMatches)(el, dropAccept));
        return true;
    }
}
// Utils for computing event store from the DragMeta
// ----------------------------------------------------------------------------------------------------
function computeEventForDateSpan(dateSpan, dragMeta, context) {
    let defProps = Object.assign({}, dragMeta.leftoverProps);
    for (let transform of context.pluginHooks.externalDefTransforms)Object.assign(defProps, transform(dateSpan, dragMeta));
    let { refined, extra } = (0, _internalJs.refineEventDef)(defProps, context);
    let def = (0, _internalJs.parseEventDef)(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration), context);
    let start = dateSpan.range.start;
    // only rely on time info if drop zone is all-day,
    // otherwise, we already know the time
    if (dateSpan.allDay && dragMeta.startTime) start = context.dateEnv.add(start, dragMeta.startTime);
    let end = dragMeta.duration ? context.dateEnv.add(start, dragMeta.duration) : (0, _internalJs.getDefaultEventEnd)(dateSpan.allDay, start, context);
    let instance = (0, _internalJs.createEventInstance)(def.defId, {
        start,
        end
    });
    return {
        def,
        instance
    };
}
// Utils for extracting data from element
// ----------------------------------------------------------------------------------------------------
function getDragMetaFromEl(el) {
    let str = getEmbeddedElData(el, 'event');
    let obj = str ? JSON.parse(str) : {
        create: false
    }; // if no embedded data, assume no event creation
    return (0, _internalJs.parseDragMeta)(obj);
}
(0, _internalJs.config).dataAttrPrefix = '';
function getEmbeddedElData(el, name) {
    let prefix = (0, _internalJs.config).dataAttrPrefix;
    let prefixedName = (prefix ? prefix + '-' : '') + name;
    return el.getAttribute('data-' + prefixedName) || '';
}
/*
Makes an element (that is *external* to any calendar) draggable.
Can pass in data that determines how an event will be created when dropped onto a calendar.
Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.
*/ class ExternalDraggable {
    constructor(el, settings = {}){
        this.handlePointerDown = (ev)=>{
            let { dragging } = this;
            let { minDistance, longPressDelay } = this.settings;
            dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : (0, _internalJs.BASE_OPTION_DEFAULTS).eventDragMinDistance;
            dragging.delay = ev.isTouch ? longPressDelay != null ? longPressDelay : (0, _internalJs.BASE_OPTION_DEFAULTS).longPressDelay : 0;
        };
        this.handleDragStart = (ev)=>{
            if (ev.isTouch && this.dragging.delay && ev.subjectEl.classList.contains('fc-event')) this.dragging.mirror.getMirrorEl().classList.add('fc-event-selected');
        };
        this.settings = settings;
        let dragging = this.dragging = new FeaturefulElementDragging(el);
        dragging.touchScrollAllowed = false;
        if (settings.itemSelector != null) dragging.pointer.selector = settings.itemSelector;
        if (settings.appendTo != null) dragging.mirror.parentNode = settings.appendTo; // TODO: write tests
        dragging.emitter.on('pointerdown', this.handlePointerDown);
        dragging.emitter.on('dragstart', this.handleDragStart);
        new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new
    }
    destroy() {
        this.dragging.destroy();
    }
}
/*
Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
The third-party system is responsible for drawing the visuals effects of the drag.
This class simply monitors for pointer movements and fires events.
It also has the ability to hide the moving element (the "mirror") during the drag.
*/ class InferredElementDragging extends (0, _internalJs.ElementDragging) {
    constructor(containerEl){
        super(containerEl);
        this.shouldIgnoreMove = false;
        this.mirrorSelector = '';
        this.currentMirrorEl = null;
        this.handlePointerDown = (ev)=>{
            this.emitter.trigger('pointerdown', ev);
            if (!this.shouldIgnoreMove) // fire dragstart right away. does not support delay or min-distance
            this.emitter.trigger('dragstart', ev);
        };
        this.handlePointerMove = (ev)=>{
            if (!this.shouldIgnoreMove) this.emitter.trigger('dragmove', ev);
        };
        this.handlePointerUp = (ev)=>{
            this.emitter.trigger('pointerup', ev);
            if (!this.shouldIgnoreMove) // fire dragend right away. does not support a revert animation
            this.emitter.trigger('dragend', ev);
        };
        let pointer = this.pointer = new PointerDragging(containerEl);
        pointer.emitter.on('pointerdown', this.handlePointerDown);
        pointer.emitter.on('pointermove', this.handlePointerMove);
        pointer.emitter.on('pointerup', this.handlePointerUp);
    }
    destroy() {
        this.pointer.destroy();
    }
    setIgnoreMove(bool) {
        this.shouldIgnoreMove = bool;
    }
    setMirrorIsVisible(bool) {
        if (bool) // restore a previously hidden element.
        // use the reference in case the selector class has already been removed.
        {
            if (this.currentMirrorEl) {
                this.currentMirrorEl.style.visibility = '';
                this.currentMirrorEl = null;
            }
        } else {
            let mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;
            if (mirrorEl) {
                this.currentMirrorEl = mirrorEl;
                mirrorEl.style.visibility = 'hidden';
            }
        }
    }
}
/*
Bridges third-party drag-n-drop systems with FullCalendar.
Must be instantiated and destroyed by caller.
*/ class ThirdPartyDraggable {
    constructor(containerOrSettings, settings){
        let containerEl = document;
        if (// wish we could just test instanceof EventTarget, but doesn't work in IE11
        containerOrSettings === document || containerOrSettings instanceof Element) {
            containerEl = containerOrSettings;
            settings = settings || {};
        } else settings = containerOrSettings || {};
        let dragging = this.dragging = new InferredElementDragging(containerEl);
        if (typeof settings.itemSelector === 'string') dragging.pointer.selector = settings.itemSelector;
        else if (containerEl === document) dragging.pointer.selector = '[data-event]';
        if (typeof settings.mirrorSelector === 'string') dragging.mirrorSelector = settings.mirrorSelector;
        let externalDragging = new ExternalElementDragging(dragging, settings.eventData);
        // The hit-detection system requires that the dnd-mirror-element be pointer-events:none,
        // but this can't be guaranteed for third-party draggables, so disable
        externalDragging.hitDragging.disablePointCheck = true;
    }
    destroy() {
        this.dragging.destroy();
    }
}
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/interaction',
    componentInteractions: [
        DateClicking,
        DateSelecting,
        EventDragging,
        EventResizing
    ],
    calendarInteractions: [
        UnselectAuto
    ],
    elementDraggingImpl: FeaturefulElementDragging,
    optionRefiners: OPTION_REFINERS,
    listenerRefiners: LISTENER_REFINERS
});

},{"@fullcalendar/core/index.js":"9u9jF","@fullcalendar/core/internal.js":"4CP9d","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"l9dNA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>index);
var _indexJs = require("@fullcalendar/core/index.js");
var _internalJs = require("./internal.js");
var _internalJs1 = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
const OPTION_REFINERS = {
    listDayFormat: createFalsableFormatter,
    listDaySideFormat: createFalsableFormatter,
    noEventsClassNames: (0, _internalJs1.identity),
    noEventsContent: (0, _internalJs1.identity),
    noEventsDidMount: (0, _internalJs1.identity),
    noEventsWillUnmount: (0, _internalJs1.identity)
};
function createFalsableFormatter(input) {
    return input === false ? null : (0, _internalJs1.createFormatter)(input);
}
var index = (0, _indexJs.createPlugin)({
    name: '@fullcalendar/list',
    optionRefiners: OPTION_REFINERS,
    views: {
        list: {
            component: (0, _internalJs.ListView),
            buttonTextKey: 'list',
            listDayFormat: {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            }
        },
        listDay: {
            type: 'list',
            duration: {
                days: 1
            },
            listDayFormat: {
                weekday: 'long'
            }
        },
        listWeek: {
            type: 'list',
            duration: {
                weeks: 1
            },
            listDayFormat: {
                weekday: 'long'
            },
            listDaySideFormat: {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            }
        },
        listMonth: {
            type: 'list',
            duration: {
                month: 1
            },
            listDaySideFormat: {
                weekday: 'long'
            }
        },
        listYear: {
            type: 'list',
            duration: {
                year: 1
            },
            listDaySideFormat: {
                weekday: 'long'
            }
        }
    }
});

},{"@fullcalendar/core/index.js":"9u9jF","./internal.js":"3qx5u","@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3qx5u":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListView", ()=>ListView);
var _internalJs = require("@fullcalendar/core/internal.js");
var _preactJs = require("@fullcalendar/core/preact.js");
class ListViewHeaderRow extends (0, _internalJs.BaseComponent) {
    constructor(){
        super(...arguments);
        this.state = {
            textId: (0, _internalJs.getUniqueDomId)()
        };
    }
    render() {
        let { theme, dateEnv, options, viewApi } = this.context;
        let { cellId, dayDate, todayRange } = this.props;
        let { textId } = this.state;
        let dayMeta = (0, _internalJs.getDateMeta)(dayDate, todayRange);
        // will ever be falsy?
        let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';
        // will ever be falsy? also, BAD NAME "alt"
        let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';
        let renderProps = Object.assign({
            date: dateEnv.toDate(dayDate),
            view: viewApi,
            textId,
            text,
            sideText,
            navLinkAttrs: (0, _internalJs.buildNavLinkAttrs)(this.context, dayDate),
            sideNavLinkAttrs: (0, _internalJs.buildNavLinkAttrs)(this.context, dayDate, 'day', false)
        }, dayMeta);
        // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)
        return (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
            elTag: "tr",
            elClasses: [
                'fc-list-day',
                ...(0, _internalJs.getDayClassNames)(dayMeta, theme)
            ],
            elAttrs: {
                'data-date': (0, _internalJs.formatDayString)(dayDate)
            },
            renderProps: renderProps,
            generatorName: "dayHeaderContent",
            customGenerator: options.dayHeaderContent,
            defaultGenerator: renderInnerContent,
            classNameGenerator: options.dayHeaderClassNames,
            didMount: options.dayHeaderDidMount,
            willUnmount: options.dayHeaderWillUnmount
        }, (InnerContent)=>(0, _preactJs.createElement)("th", {
                scope: "colgroup",
                colSpan: 3,
                id: cellId,
                "aria-labelledby": textId
            }, (0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-list-day-cushion',
                    theme.getClass('tableCellShaded')
                ]
            })));
    }
}
function renderInnerContent(props) {
    return (0, _preactJs.createElement)((0, _preactJs.Fragment), null, props.text && (0, _preactJs.createElement)("a", Object.assign({
        id: props.textId,
        className: "fc-list-day-text"
    }, props.navLinkAttrs), props.text), props.sideText && /* not keyboard tabbable */ (0, _preactJs.createElement)("a", Object.assign({
        "aria-hidden": true,
        className: "fc-list-day-side-text"
    }, props.sideNavLinkAttrs), props.sideText));
}
const DEFAULT_TIME_FORMAT = (0, _internalJs.createFormatter)({
    hour: 'numeric',
    minute: '2-digit',
    meridiem: 'short'
});
class ListViewEventRow extends (0, _internalJs.BaseComponent) {
    render() {
        let { props, context } = this;
        let { options } = context;
        let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props;
        let timeFormat = options.eventTimeFormat || DEFAULT_TIME_FORMAT;
        return (0, _preactJs.createElement)((0, _internalJs.EventContainer), Object.assign({}, props, {
            elTag: "tr",
            elClasses: [
                'fc-list-event',
                seg.eventRange.def.url && 'fc-event-forced-url'
            ],
            defaultGenerator: ()=>renderEventInnerContent(seg, context),
            seg: seg,
            timeText: "",
            disableDragging: true,
            disableResizing: true
        }), (InnerContent, eventContentArg)=>(0, _preactJs.createElement)((0, _preactJs.Fragment), null, buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId), (0, _preactJs.createElement)("td", {
                "aria-hidden": true,
                className: "fc-list-event-graphic"
            }, (0, _preactJs.createElement)("span", {
                className: "fc-list-event-dot",
                style: {
                    borderColor: eventContentArg.borderColor || eventContentArg.backgroundColor
                }
            })), (0, _preactJs.createElement)(InnerContent, {
                elTag: "td",
                elClasses: [
                    'fc-list-event-title'
                ],
                elAttrs: {
                    headers: `${eventHeaderId} ${dateHeaderId}`
                }
            })));
    }
}
function renderEventInnerContent(seg, context) {
    let interactiveAttrs = (0, _internalJs.getSegAnchorAttrs)(seg, context);
    return (0, _preactJs.createElement)("a", Object.assign({}, interactiveAttrs), seg.eventRange.def.title);
}
function buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {
    let { options } = context;
    if (options.displayEventTime !== false) {
        let eventDef = seg.eventRange.def;
        let eventInstance = seg.eventRange.instance;
        let doAllDay = false;
        let timeText;
        if (eventDef.allDay) doAllDay = true;
        else if ((0, _internalJs.isMultiDayRange)(seg.eventRange.range)) {
            if (seg.isStart) timeText = (0, _internalJs.buildSegTimeText)(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);
            else if (seg.isEnd) timeText = (0, _internalJs.buildSegTimeText)(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);
            else doAllDay = true;
        } else timeText = (0, _internalJs.buildSegTimeText)(seg, timeFormat, context);
        if (doAllDay) {
            let renderProps = {
                text: context.options.allDayText,
                view: context.viewApi
            };
            return (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
                elTag: "td",
                elClasses: [
                    'fc-list-event-time'
                ],
                elAttrs: {
                    headers: `${timeHeaderId} ${dateHeaderId}`
                },
                renderProps: renderProps,
                generatorName: "allDayContent",
                customGenerator: options.allDayContent,
                defaultGenerator: renderAllDayInner,
                classNameGenerator: options.allDayClassNames,
                didMount: options.allDayDidMount,
                willUnmount: options.allDayWillUnmount
            });
        }
        return (0, _preactJs.createElement)("td", {
            className: "fc-list-event-time"
        }, timeText);
    }
    return null;
}
function renderAllDayInner(renderProps) {
    return renderProps.text;
}
/*
Responsible for the scroller, and forwarding event-related actions into the "grid".
*/ class ListView extends (0, _internalJs.DateComponent) {
    constructor(){
        super(...arguments);
        this.computeDateVars = (0, _internalJs.memoize)(computeDateVars);
        this.eventStoreToSegs = (0, _internalJs.memoize)(this._eventStoreToSegs);
        this.state = {
            timeHeaderId: (0, _internalJs.getUniqueDomId)(),
            eventHeaderId: (0, _internalJs.getUniqueDomId)(),
            dateHeaderIdRoot: (0, _internalJs.getUniqueDomId)()
        };
        this.setRootEl = (rootEl)=>{
            if (rootEl) this.context.registerInteractiveComponent(this, {
                el: rootEl
            });
            else this.context.unregisterInteractiveComponent(this);
        };
    }
    render() {
        let { props, context } = this;
        let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile);
        let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);
        return (0, _preactJs.createElement)((0, _internalJs.ViewContainer), {
            elRef: this.setRootEl,
            elClasses: [
                'fc-list',
                context.theme.getClass('table'),
                context.options.stickyHeaderDates !== false ? 'fc-list-sticky' : ''
            ],
            viewSpec: context.viewSpec
        }, (0, _preactJs.createElement)((0, _internalJs.Scroller), {
            liquid: !props.isHeightAuto,
            overflowX: props.isHeightAuto ? 'visible' : 'hidden',
            overflowY: props.isHeightAuto ? 'visible' : 'auto'
        }, eventSegs.length > 0 ? this.renderSegList(eventSegs, dayDates) : this.renderEmptyMessage()));
    }
    renderEmptyMessage() {
        let { options, viewApi } = this.context;
        let renderProps = {
            text: options.noEventsText,
            view: viewApi
        };
        return (0, _preactJs.createElement)((0, _internalJs.ContentContainer), {
            elTag: "div",
            elClasses: [
                'fc-list-empty'
            ],
            renderProps: renderProps,
            generatorName: "noEventsContent",
            customGenerator: options.noEventsContent,
            defaultGenerator: renderNoEventsInner,
            classNameGenerator: options.noEventsClassNames,
            didMount: options.noEventsDidMount,
            willUnmount: options.noEventsWillUnmount
        }, (InnerContent)=>(0, _preactJs.createElement)(InnerContent, {
                elTag: "div",
                elClasses: [
                    'fc-list-empty-cushion'
                ]
            }));
    }
    renderSegList(allSegs, dayDates) {
        let { theme, options } = this.context;
        let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state;
        let segsByDay = groupSegsByDay(allSegs); // sparse array
        return (0, _preactJs.createElement)((0, _internalJs.NowTimer), {
            unit: "day"
        }, (nowDate, todayRange)=>{
            let innerNodes = [];
            for(let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1){
                let daySegs = segsByDay[dayIndex];
                if (daySegs) {
                    let dayStr = (0, _internalJs.formatDayString)(dayDates[dayIndex]);
                    let dateHeaderId = dateHeaderIdRoot + '-' + dayStr;
                    // append a day header
                    innerNodes.push((0, _preactJs.createElement)(ListViewHeaderRow, {
                        key: dayStr,
                        cellId: dateHeaderId,
                        dayDate: dayDates[dayIndex],
                        todayRange: todayRange
                    }));
                    daySegs = (0, _internalJs.sortEventSegs)(daySegs, options.eventOrder);
                    for (let seg of daySegs)innerNodes.push((0, _preactJs.createElement)(ListViewEventRow, Object.assign({
                        key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */ ,
                        seg: seg,
                        isDragging: false,
                        isResizing: false,
                        isDateSelecting: false,
                        isSelected: false,
                        timeHeaderId: timeHeaderId,
                        eventHeaderId: eventHeaderId,
                        dateHeaderId: dateHeaderId
                    }, (0, _internalJs.getSegMeta)(seg, todayRange, nowDate))));
                }
            }
            return (0, _preactJs.createElement)("table", {
                className: 'fc-list-table ' + theme.getClass('table')
            }, (0, _preactJs.createElement)("thead", null, (0, _preactJs.createElement)("tr", null, (0, _preactJs.createElement)("th", {
                scope: "col",
                id: timeHeaderId
            }, options.timeHint), (0, _preactJs.createElement)("th", {
                scope: "col",
                "aria-hidden": true
            }), (0, _preactJs.createElement)("th", {
                scope: "col",
                id: eventHeaderId
            }, options.eventHint))), (0, _preactJs.createElement)("tbody", null, innerNodes));
        });
    }
    _eventStoreToSegs(eventStore, eventUiBases, dayRanges) {
        return this.eventRangesToSegs((0, _internalJs.sliceEventStore)(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);
    }
    eventRangesToSegs(eventRanges, dayRanges) {
        let segs = [];
        for (let eventRange of eventRanges)segs.push(...this.eventRangeToSegs(eventRange, dayRanges));
        return segs;
    }
    eventRangeToSegs(eventRange, dayRanges) {
        let { dateEnv } = this.context;
        let { nextDayThreshold } = this.context.options;
        let range = eventRange.range;
        let allDay = eventRange.def.allDay;
        let dayIndex;
        let segRange;
        let seg;
        let segs = [];
        for(dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1){
            segRange = (0, _internalJs.intersectRanges)(range, dayRanges[dayIndex]);
            if (segRange) {
                seg = {
                    component: this,
                    eventRange,
                    start: segRange.start,
                    end: segRange.end,
                    isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),
                    isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),
                    dayIndex
                };
                segs.push(seg);
                // detect when range won't go fully into the next day,
                // and mutate the latest seg to the be the end.
                if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {
                    seg.end = range.end;
                    seg.isEnd = true;
                    break;
                }
            }
        }
        return segs;
    }
}
function renderNoEventsInner(renderProps) {
    return renderProps.text;
}
function computeDateVars(dateProfile) {
    let dayStart = (0, _internalJs.startOfDay)(dateProfile.renderRange.start);
    let viewEnd = dateProfile.renderRange.end;
    let dayDates = [];
    let dayRanges = [];
    while(dayStart < viewEnd){
        dayDates.push(dayStart);
        dayRanges.push({
            start: dayStart,
            end: (0, _internalJs.addDays)(dayStart, 1)
        });
        dayStart = (0, _internalJs.addDays)(dayStart, 1);
    }
    return {
        dayDates,
        dayRanges
    };
}
// Returns a sparse array of arrays, segs grouped by their dayIndex
function groupSegsByDay(segs) {
    let segsByDay = []; // sparse array
    let i;
    let seg;
    for(i = 0; i < segs.length; i += 1){
        seg = segs[i];
        (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);
    }
    return segsByDay;
}
var css_248z = ":root{--fc-list-event-dot-width:10px;--fc-list-event-hover-bg-color:#f5f5f5}.fc-theme-standard .fc-list{border:1px solid var(--fc-border-color)}.fc .fc-list-empty{align-items:center;background-color:var(--fc-neutral-bg-color);display:flex;height:100%;justify-content:center}.fc .fc-list-empty-cushion{margin:5em 0}.fc .fc-list-table{border-style:hidden;width:100%}.fc .fc-list-table tr>*{border-left:0;border-right:0}.fc .fc-list-sticky .fc-list-day>*{background:var(--fc-page-bg-color);position:sticky;top:0}.fc .fc-list-table thead{left:-10000px;position:absolute}.fc .fc-list-table tbody>tr:first-child th{border-top:0}.fc .fc-list-table th{padding:0}.fc .fc-list-day-cushion,.fc .fc-list-table td{padding:8px 14px}.fc .fc-list-day-cushion:after{clear:both;content:\"\";display:table}.fc-theme-standard .fc-list-day-cushion{background-color:var(--fc-neutral-bg-color)}.fc-direction-ltr .fc-list-day-text,.fc-direction-rtl .fc-list-day-side-text{float:left}.fc-direction-ltr .fc-list-day-side-text,.fc-direction-rtl .fc-list-day-text{float:right}.fc-direction-ltr .fc-list-table .fc-list-event-graphic{padding-right:0}.fc-direction-rtl .fc-list-table .fc-list-event-graphic{padding-left:0}.fc .fc-list-event.fc-event-forced-url{cursor:pointer}.fc .fc-list-event:hover td{background-color:var(--fc-list-event-hover-bg-color)}.fc .fc-list-event-graphic,.fc .fc-list-event-time{white-space:nowrap;width:1px}.fc .fc-list-event-dot{border:calc(var(--fc-list-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-list-event-dot-width)/2);box-sizing:content-box;display:inline-block;height:0;width:0}.fc .fc-list-event-title a{color:inherit;text-decoration:none}.fc .fc-list-event.fc-event-forced-url:hover a{text-decoration:underline}";
(0, _internalJs.injectStyles)(css_248z);

},{"@fullcalendar/core/internal.js":"4CP9d","@fullcalendar/core/preact.js":"lbU3B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3naQt":[function(require,module,exports,__globalThis) {
// Configuração de localização em português para o FullCalendar
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calendarLocale", ()=>calendarLocale);
const calendarLocale = {
    code: 'pt-br',
    week: {
        dow: 1,
        doy: 4 // A semana que contém Jan 4th é a primeira semana do ano
    },
    buttonText: {
        prev: 'Anterior',
        next: "Pr\xf3ximo",
        today: 'Hoje',
        month: "M\xeas",
        week: 'Semana',
        day: 'Dia',
        list: 'Lista'
    },
    weekText: 'Sem',
    allDayText: 'Dia inteiro',
    moreLinkText: function(n) {
        return '+mais ' + n;
    },
    noEventsText: "N\xe3o h\xe1 eventos para mostrar",
    dayNames: [
        'Domingo',
        'Segunda-feira',
        "Ter\xe7a-feira",
        'Quarta-feira',
        'Quinta-feira',
        'Sexta-feira',
        "S\xe1bado"
    ],
    dayNamesShort: [
        'Dom',
        'Seg',
        'Ter',
        'Qua',
        'Qui',
        'Sex',
        "S\xe1b"
    ],
    monthNames: [
        'Janeiro',
        'Fevereiro',
        "Mar\xe7o",
        'Abril',
        'Maio',
        'Junho',
        'Julho',
        'Agosto',
        'Setembro',
        'Outubro',
        'Novembro',
        'Dezembro'
    ],
    monthNamesShort: [
        'Jan',
        'Fev',
        'Mar',
        'Abr',
        'Mai',
        'Jun',
        'Jul',
        'Ago',
        'Set',
        'Out',
        'Nov',
        'Dez'
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"43l4d":[function(require,module,exports,__globalThis) {
// Utilitários para otimização de performance
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PerformanceOptimizer", ()=>PerformanceOptimizer);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class PerformanceOptimizer {
    /**
     * Carregamento lazy de módulos para melhorar performance inicial
     */ static loadModule(moduleName) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.loadedModules.has(moduleName)) return Promise.resolve();
            try {
                // Simular carregamento lazy (em produção, usar dynamic imports)
                this.loadedModules.add(moduleName);
                return Promise.resolve();
            } catch (error) {
                console.error(`Erro ao carregar m\xf3dulo ${moduleName}:`, error);
                throw error;
            }
        });
    }
    /**
     * Debounce para evitar múltiplas chamadas desnecessárias
     */ static debounce(func, wait) {
        let timeout;
        return (...args)=>{
            clearTimeout(timeout);
            timeout = setTimeout(()=>func(...args), wait);
        };
    }
    /**
     * Throttle para limitar frequência de execução
     */ static throttle(func, limit) {
        let inThrottle;
        return (...args)=>{
            if (!inThrottle) {
                func(...args);
                inThrottle = true;
                setTimeout(()=>inThrottle = false, limit);
            }
        };
    }
    /**
     * Verificar se o dispositivo é mobile para otimizações específicas
     */ static isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    /**
     * Verificar conexão lenta para aplicar otimizações
     */ static isSlowConnection() {
        if ('connection' in navigator) {
            const connection = navigator.connection;
            return connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g' || connection.effectiveType === '3g';
        }
        return false;
    }
    /**
     * Aplicar otimizações baseadas no dispositivo/conexão
     */ static applyOptimizations() {
        if (this.isMobile()) // Reduzir animações em mobile
        document.documentElement.style.setProperty('--animation-duration', '0.2s');
        if (this.isSlowConnection()) // Desabilitar algumas funcionalidades em conexão lenta
        document.documentElement.style.setProperty('--enable-animations', 'false');
    }
}
PerformanceOptimizer.loadedModules = new Set();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9hvW2":[function(require,module,exports,__globalThis) {
// Sistema de logging para o frontend EduClick
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "logger", ()=>logger);
var LogLevel;
(function(LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel || (LogLevel = {}));
class Logger {
    constructor(){
        // Em produção, só mostrar WARN e ERROR
        this.level = (0, LogLevel.DEBUG);
    }
    shouldLog(level) {
        return level >= this.level;
    }
    formatMessage(level, message, ...args) {
        const timestamp = new Date().toISOString();
        return `[${timestamp}] [${level}] ${message}`;
    }
    debug(message, ...args) {
        if (this.shouldLog(LogLevel.DEBUG)) console.debug(this.formatMessage('DEBUG', message), ...args);
    }
    info(message, ...args) {
        if (this.shouldLog(LogLevel.INFO)) console.info(this.formatMessage('INFO', message), ...args);
    }
    warn(message, ...args) {
        if (this.shouldLog(LogLevel.WARN)) console.warn(this.formatMessage('WARN', message), ...args);
    }
    error(message, ...args) {
        if (this.shouldLog(LogLevel.ERROR)) console.error(this.formatMessage('ERROR', message), ...args);
    }
}
const logger = new Logger();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hxvF1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderAgendamentoPage", ()=>renderAgendamentoPage);
var _agendamentoTemplate = require("../templates/AgendamentoTemplate");
var _agendamentoService = require("../services/AgendamentoService");
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function renderAgendamentoPage(root, professorId) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const professor = yield (0, _agendamentoService.AgendamentoService).carregarProfessor(professorId);
            root.innerHTML = (0, _agendamentoTemplate.AgendamentoTemplate).render({
                professor
            });
            setupAgendamentoHandler(professorId);
        } catch (error) {
            root.innerHTML = (0, _agendamentoTemplate.AgendamentoTemplate).render({
                errorMessage: 'Erro ao carregar dados do professor.'
            });
        }
    });
}
function setupAgendamentoHandler(professorId) {
    const form = document.getElementById('form-agendamento');
    if (form) form.onsubmit = (event)=>handleAgendamentoSubmit(event, professorId);
    window.handleAgendamentoSubmit = (event)=>handleAgendamentoSubmit(event, professorId);
}
function handleAgendamentoSubmit(event, professorId) {
    return __awaiter(this, void 0, void 0, function*() {
        event.preventDefault();
        const form = event.target;
        const formData = {
            nome: form.nome.value,
            telefone: form.telefone.value,
            dataHora: form.dataHora.value
        };
        const validation = (0, _agendamentoService.AgendamentoService).validate(formData);
        if (!validation.isValid) {
            validation.errors.forEach((e)=>(0, _toast.mostrarToast)(e, 'danger'));
            return;
        }
        const result = yield (0, _agendamentoService.AgendamentoService).agendar(professorId, formData);
        if (result.success) {
            form.reset();
            (0, _toast.mostrarToast)('Agendamento realizado com sucesso!', 'success');
            // Atualiza automaticamente a página para refletir as mudanças
            try {
                const root = document.getElementById('root');
                if (root) yield renderAgendamentoPage(root, professorId);
                else // Fallback
                window.location.reload();
            } catch (_a) {
                window.location.reload();
            }
        } else (0, _toast.mostrarToast)(result.error || 'Erro ao agendar', 'danger');
    });
}

},{"../templates/AgendamentoTemplate":"jxKQb","../services/AgendamentoService":"lIbwe","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jxKQb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AgendamentoTemplate", ()=>AgendamentoTemplate);
class AgendamentoTemplate {
    static render(params = {}) {
        const professor = params.professor || {};
        return `
      <div class="container py-5">
        <div class="row justify-content-center">
          <div class="col-md-7 col-lg-6">
            <div class="card shadow-sm">
              <div class="card-header bg-primary text-white">
                <h3 class="mb-0">
                  <i class="bi bi-calendar-plus"></i> Agendar Aula
                </h3>
              </div>
              <div class="card-body p-4">
                <div class="mb-3 text-center">
                  <h5 class="fw-bold mb-1">${professor.nome || 'Professor(a)'}</h5>
                  <div class="text-muted">${professor.especialidade || ''}</div>
                </div>
                ${params.errorMessage ? `<div class='alert alert-danger'>${params.errorMessage}</div>` : ''}
                ${params.successMessage ? `<div class='alert alert-success'>${params.successMessage}</div>` : ''}
                <form id="form-agendamento" onsubmit="${params.onSubmit || 'handleAgendamentoSubmit'}(event)">
                  <div class="mb-3">
                    <label for="nome" class="form-label">Seu Nome</label>
                    <input type="text" class="form-control" id="nome" name="nome" required>
                  </div>
                  <div class="mb-3">
                    <label for="telefone" class="form-label">Telefone</label>
                    <input type="tel" class="form-control" id="telefone" name="telefone" required placeholder="(11) 99999-9999">
                  </div>
                  <div class="mb-3">
                    <label for="dataHora" class="form-label">Data e Hora</label>
                    <input type="datetime-local" class="form-control" id="dataHora" name="dataHora" required>
                  </div>
                  <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-calendar-check"></i> Agendar
                  </button>
                </form>
                <div class="mt-3 text-center">
                  <a href="/professor/${professor.id || ''}">Voltar ao perfil do professor</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lIbwe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AgendamentoService", ()=>AgendamentoService);
var _api = require("./api");
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class AgendamentoService {
    static carregarProfessor(professorId) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield (0, _api.getInfoProfessor)(professorId);
                if (res.ok) return yield res.json();
                else throw new Error('Erro ao carregar dados do professor');
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao carregar dados do professor.', 'danger');
                throw error;
            }
        });
    }
    static validate(data) {
        var _a, _b, _c;
        const errors = [];
        if (!((_a = data.nome) === null || _a === void 0 ? void 0 : _a.trim())) errors.push("Nome \xe9 obrigat\xf3rio");
        if (!((_b = data.telefone) === null || _b === void 0 ? void 0 : _b.trim())) errors.push("Telefone \xe9 obrigat\xf3rio");
        if (!((_c = data.dataHora) === null || _c === void 0 ? void 0 : _c.trim())) errors.push("Data e hora s\xe3o obrigat\xf3rios");
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static agendar(professorId, data) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield (0, _api.agendarComProfessor)(professorId, data);
                if (res.ok) {
                    (0, _toast.mostrarToast)('Agendamento realizado com sucesso!', 'success');
                    return {
                        success: true
                    };
                } else {
                    const err = yield res.json();
                    return {
                        success: false,
                        error: err.error || 'Erro desconhecido'
                    };
                }
            } catch (error) {
                return {
                    success: false,
                    error: 'Erro ao conectar com o servidor.'
                };
            }
        });
    }
}

},{"./api":"kfpAV","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5FGHL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderEditarPerfilProfessorPage", ()=>renderEditarPerfilProfessorPage);
var _editarPerfilTemplate = require("../templates/EditarPerfilTemplate");
var _editarPerfilService = require("../services/EditarPerfilService");
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function renderEditarPerfilProfessorPage(root) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const usuario = yield (0, _editarPerfilService.EditarPerfilService).carregarPerfil();
            root.innerHTML = (0, _editarPerfilTemplate.EditarPerfilTemplate).render({
                usuario
            });
            setupEditarPerfilHandler();
        } catch (error) {
            root.innerHTML = (0, _editarPerfilTemplate.EditarPerfilTemplate).render({
                errorMessage: 'Erro ao carregar dados do perfil.'
            });
        }
    });
}
function setupEditarPerfilHandler() {
    const form = document.getElementById('form-editar-perfil');
    if (form) form.onsubmit = handleEditarPerfilSubmit;
    window.handleEditarPerfilSubmit = handleEditarPerfilSubmit;
}
function handleEditarPerfilSubmit(event) {
    return __awaiter(this, void 0, void 0, function*() {
        var _a, _b;
        event.preventDefault();
        const form = event.target;
        const getValue = (name)=>{
            const el = form.querySelector(`[name="${name}"]`);
            return el ? el.value : undefined;
        };
        const formData = {
            nome: (_a = getValue('nome')) !== null && _a !== void 0 ? _a : '',
            email: (_b = getValue('email')) !== null && _b !== void 0 ? _b : '',
            telefone: getValue('telefone'),
            especialidade: getValue('especialidade'),
            formacao: getValue('formacao'),
            experiencia: getValue('experiencia'),
            linkUnico: getValue('linkUnico')
        };
        const validation = (0, _editarPerfilService.EditarPerfilService).validate(formData);
        if (!validation.isValid) {
            validation.errors.forEach((e)=>(0, _toast.mostrarToast)(e, 'danger'));
            return;
        }
        const result = yield (0, _editarPerfilService.EditarPerfilService).salvarPerfil(formData);
        if (result.success) setTimeout(()=>{
            window.history.pushState({}, '', '/dashboard');
            window.dispatchEvent(new PopStateEvent('popstate'));
        }, 1500);
        else (0, _toast.mostrarToast)(result.error || 'Erro ao salvar perfil', 'danger');
    });
}

},{"../templates/EditarPerfilTemplate":"WpMJd","../services/EditarPerfilService":"k0cOZ","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"WpMJd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditarPerfilTemplate", ()=>EditarPerfilTemplate);
class EditarPerfilTemplate {
    static render(params = {}) {
        const usuario = params.usuario || {};
        return `
      <div class="container py-5">
        <div class="row justify-content-center">
          <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded-4">
              <div class="card-header bg-primary text-white rounded-top-4">
                <h3 class="mb-0">
                  <i class="bi bi-person-gear"></i> Editar Perfil
                </h3>
              </div>
              <div class="card-body p-4">
                ${params.errorMessage ? `<div class='alert alert-danger'>${params.errorMessage}</div>` : ''}
                <form id="form-editar-perfil" onsubmit="${params.onSubmit || 'handleEditarPerfilSubmit'}(event)">
                  <div class="row g-3">
                    <div class="col-md-6 mb-3">
                      <label for="nome" class="form-label">Nome Completo</label>
                      <input type="text" class="form-control" id="nome" name="nome" value="${usuario.nome || ''}" required>
                    </div>
                    <div class="col-md-6 mb-3">
                      <label for="telefone" class="form-label">Telefone</label>
                      <input type="tel" class="form-control" id="telefone" name="telefone" value="${usuario.telefone || ''}" placeholder="(11) 99999-9999">
                    </div>
                  </div>
                  <div class="row g-3">
                    <div class="col-md-6 mb-3">
                      <label for="especialidade" class="form-label">Especialidade</label>
                      <input type="text" class="form-control" id="especialidade" name="especialidade" value="${usuario.especialidade || ''}" placeholder="Ex: Matem\xe1tica, F\xedsica, etc.">
                    </div>
                    <div class="col-md-6 mb-3">
                      <label for="formacao" class="form-label">Forma\xe7\xe3o</label>
                      <input type="text" class="form-control" id="formacao" name="formacao" value="${usuario.formacao || ''}" placeholder="Ex: Licenciatura em Matem\xe1tica, Mestrado, etc.">
                    </div>
                  </div>
                  <div class="row g-3">
                    <div class="col-md-6 mb-3">
                      <label for="experiencia" class="form-label">Experi\xeancia</label>
                      <input type="text" class="form-control" id="experiencia" name="experiencia" value="${usuario.experiencia || ''}" placeholder="Ex: 10 anos de ensino, aulas particulares, etc.">
                    </div>
                    <div class="col-md-6 mb-3">
                      <label for="linkUnico" class="form-label">Link \xdanico</label>
                      <input type="text" class="form-control" id="linkUnico" name="linkUnico" value="${usuario.linkUnico || ''}" placeholder="seu-link-unico">
                    </div>
                  </div>
                  <div class="d-flex gap-2 mt-3">
                    <button type="submit" class="btn btn-primary px-4">
                      <i class="bi bi-check-circle"></i> Salvar Altera\xe7\xf5es
                    </button>
                    <a href="/dashboard" class="btn btn-outline-secondary px-4">
                      <i class="bi bi-arrow-left"></i> Voltar
                    </a>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"k0cOZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EditarPerfilService", ()=>EditarPerfilService);
var _api = require("./api");
var _toast = require("../components/Toast");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class EditarPerfilService {
    static carregarPerfil() {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield (0, _api.getPerfilProfessor)();
                if (res.ok) return yield res.json();
                else throw new Error('Erro ao carregar perfil');
            } catch (error) {
                (0, _toast.mostrarToast)('Erro ao carregar dados do perfil.', 'danger');
                throw error;
            }
        });
    }
    static validate(data) {
        var _a;
        const errors = [];
        if (!((_a = data.nome) === null || _a === void 0 ? void 0 : _a.trim())) errors.push("Nome \xe9 obrigat\xf3rio");
        if (data.linkUnico && !/^[a-zA-Z0-9-_]+$/.test(data.linkUnico)) errors.push("Link \xfanico deve conter apenas letras, n\xfameros, h\xedfens e underscores");
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static salvarPerfil(data) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const res = yield (0, _api.editarPerfilProfessor)(data);
                if (res.ok) {
                    (0, _toast.mostrarToast)('Perfil atualizado com sucesso!', 'success');
                    return {
                        success: true
                    };
                } else {
                    const err = yield res.json();
                    return {
                        success: false,
                        error: err.error || 'Erro desconhecido'
                    };
                }
            } catch (error) {
                return {
                    success: false,
                    error: 'Erro ao conectar com o servidor.'
                };
            }
        });
    }
}

},{"./api":"kfpAV","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5g5Lr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderHomePage", ()=>renderHomePage);
var _homeTemplate = require("../templates/HomeTemplate");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function renderHomePage(root) {
    return __awaiter(this, void 0, void 0, function*() {
        root.innerHTML = (0, _homeTemplate.HomeTemplate).render();
    });
}

},{"../templates/HomeTemplate":"fjxFH","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fjxFH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HomeTemplate", ()=>HomeTemplate);
class HomeTemplate {
    static render() {
        return `
      <div class="container py-5">
        <div class="row align-items-center justify-content-center">
          <div class="col-lg-6 text-center text-lg-start mb-4 mb-lg-0">
            <h1 class="display-4 fw-bold mb-3">Bem-vindo ao <span class="text-primary">EduClick</span></h1>
            <p class="lead mb-4">Plataforma moderna para agendamento de aulas, gest\xe3o de professores e alunos. Simples, r\xe1pida e eficiente para sua rotina educacional.</p>
            <div class="d-flex flex-column flex-md-row gap-3 justify-content-center justify-content-lg-start">
              <a href="/login" class="btn btn-primary btn-lg px-4">Entrar</a>
              <a href="/cadastro" class="btn btn-outline-primary btn-lg px-4">Criar Conta</a>
            </div>
          </div>
          <div class="col-lg-6 text-center">
            <img src="https://cdn.pixabay.com/photo/2017/01/31/13/14/online-2025987_1280.png" alt="Educa\xe7\xe3o Online" class="img-fluid rounded shadow" style="max-height: 340px;">
          </div>
        </div>
        <div class="row mt-5">
          <div class="col-12 text-center">
            <h2 class="h4 fw-bold mb-3">Funcionalidades</h2>
          </div>
          <div class="col-md-4 mb-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center">
                <i class="bi bi-calendar3 display-5 text-primary mb-3"></i>
                <h5 class="card-title">Agendamento Online</h5>
                <p class="card-text">Permita que alunos reservem aulas facilmente com poucos cliques, visualizando hor\xe1rios dispon\xedveis em tempo real.</p>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center">
                <i class="bi bi-person-badge display-5 text-primary mb-3"></i>
                <h5 class="card-title">Gest\xe3o de Professores</h5>
                <p class="card-text">Professores podem personalizar seus perfis, gerenciar aulas, hor\xe1rios e acompanhar reservas de forma intuitiva.</p>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-4">
            <div class="card h-100 border-0 shadow-sm">
              <div class="card-body text-center">
                <i class="bi bi-people display-5 text-primary mb-3"></i>
                <h5 class="card-title">Experi\xeancia do Aluno</h5>
                <p class="card-text">Alunos t\xeam acesso f\xe1cil ao hist\xf3rico de agendamentos, notifica\xe7\xf5es e comunica\xe7\xe3o direta com professores.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"e7nW9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FirebaseAuthProvider", ()=>FirebaseAuthProvider);
var _usuario = require("../../core/entities/Usuario");
var _firebase = require("../../client/firebase"); // IMPORT CORRETO
var _auth = require("firebase/auth");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class FirebaseAuthProvider {
    registrar(data) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const cred = yield (0, _auth.createUserWithEmailAndPassword)((0, _firebase.auth), data.email, data.senha);
                // Atualizar o displayName do usuário
                if (cred.user) // Note: updateProfile pode falhar se o usuário não estiver logado
                // Vamos tentar, mas não vamos falhar se não conseguir
                try {
                    yield (0, _auth.updateProfile)(cred.user, {
                        displayName: data.nome
                    });
                } catch (profileError) {
                    console.warn("N\xe3o foi poss\xedvel atualizar o displayName:", profileError);
                }
                return new (0, _usuario.Usuario)(cred.user);
            } catch (error) {
                console.error('Erro no registro Firebase:', error);
                // Mapear erros do Firebase para mensagens mais amigáveis
                let errorMessage = 'Erro ao criar conta';
                if (error.code === 'auth/email-already-in-use') errorMessage = "Este email j\xe1 est\xe1 sendo usado por outra conta";
                else if (error.code === 'auth/weak-password') errorMessage = 'A senha deve ter pelo menos 6 caracteres';
                else if (error.code === 'auth/invalid-email') errorMessage = "Email inv\xe1lido";
                else if (error.code === 'auth/operation-not-allowed') errorMessage = "Cadastro com email/senha n\xe3o est\xe1 habilitado";
                else if (error.code === 'auth/network-request-failed') errorMessage = "Erro de conex\xe3o. Verifique sua internet";
                throw new Error(errorMessage);
            }
        });
    }
    login(email, senha) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const userCredential = yield (0, _auth.signInWithEmailAndPassword)((0, _firebase.auth), email, senha);
                const user = userCredential.user;
                // Armazena o token localmente (opcional aqui)
                const token = yield user.getIdToken();
                localStorage.setItem('token', token);
                return new (0, _usuario.Usuario)(user);
            } catch (error) {
                console.error('Erro no login Firebase:', error);
                // Mapear erros do Firebase para mensagens mais amigáveis
                let errorMessage = 'Erro ao fazer login';
                if (error.code === 'auth/user-not-found') errorMessage = "Usu\xe1rio n\xe3o encontrado";
                else if (error.code === 'auth/wrong-password') errorMessage = 'Senha incorreta';
                else if (error.code === 'auth/invalid-credential') errorMessage = 'Email ou senha incorretos';
                else if (error.code === 'auth/invalid-email') errorMessage = "Email inv\xe1lido";
                else if (error.code === 'auth/user-disabled') errorMessage = 'Conta desabilitada';
                else if (error.code === 'auth/too-many-requests') errorMessage = 'Muitas tentativas. Tente novamente mais tarde';
                else if (error.code === 'auth/network-request-failed') errorMessage = "Erro de conex\xe3o. Verifique sua internet";
                throw new Error(errorMessage);
            }
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function*() {
            yield (0, _auth.signOut)((0, _firebase.auth));
        });
    }
    verificarSeUsuarioExiste(email) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const methods = yield (0, _auth.fetchSignInMethodsForEmail)((0, _firebase.auth), email);
                console.log(`M\xe9todos de login para ${email}:`, methods);
                return methods.length > 0;
            } catch (error) {
                console.error("Erro ao verificar se usu\xe1rio existe:", error);
                // Se o erro for específico sobre email não encontrado, retorna false
                if (error.code === 'auth/user-not-found') return false;
                // Para outros erros, assume que o usuário pode existir
                return true;
            }
        });
    }
}

},{"../../core/entities/Usuario":"cFsLS","../../client/firebase":"eXCoT","firebase/auth":"4ZBbi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cFsLS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Usuario", ()=>Usuario);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Usuario {
    constructor(firebaseUser){
        this.firebaseUser = firebaseUser;
    }
    get id() {
        return this.firebaseUser.uid;
    }
    get nome() {
        return this.firebaseUser.displayName || "Usu\xe1rio";
    }
    get email() {
        return this.firebaseUser.email;
    }
    getIdToken() {
        return __awaiter(this, void 0, void 0, function*() {
            return yield this.firebaseUser.getIdToken();
        });
    }
    getValor() {
        return this.email;
    }
    autenticar(_senha) {
        // Firebase cuida da autenticação
        return true;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"eEbb5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "renderProfessorPublicoPage", ()=>renderProfessorPublicoPage);
// src/client/pages/ProfessorPublicoPage.ts
var _professorPublicoTemplate = require("../templates/ProfessorPublicoTemplate");
var _professorPublicoService = require("../services/ProfessorPublicoService");
var _toast = require("../components/Toast");
var _api = require("../services/api");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let professorCache = null;
let aulasCache = [];
let linkUnicoCache = '';
let aulasRefreshTimer = null;
let meusAgendamentosTimer = null;
function renderProfessorPublicoPage(root, linkUnico) {
    return __awaiter(this, void 0, void 0, function*() {
        linkUnicoCache = linkUnico;
        try {
            const data = yield (0, _professorPublicoService.ProfessorPublicoService).carregarPerfilEAulas(linkUnico);
            professorCache = data.professor;
            aulasCache = data.aulas || [];
            root.innerHTML = (0, _professorPublicoTemplate.ProfessorPublicoTemplate).render({
                professor: professorCache,
                aulas: aulasCache
            });
            setupReservarHandler();
            setupConsultaAgendamentoButton(linkUnico);
            startAulasAutoRefresh(root);
        } catch (error) {
            console.error('[renderProfessorPublicoPage] erro:', error);
            root.innerHTML = (0, _professorPublicoTemplate.ProfessorPublicoTemplate).render({
                errorMessage: 'Erro ao carregar dados do professor.'
            });
        }
    });
}
function startAulasAutoRefresh(root) {
    if (aulasRefreshTimer) clearInterval(aulasRefreshTimer);
    aulasRefreshTimer = setInterval(()=>__awaiter(this, void 0, void 0, function*() {
            try {
                const data = yield (0, _professorPublicoService.ProfessorPublicoService).carregarPerfilEAulas(linkUnicoCache);
                const novasAulas = data.aulas || [];
                // Re-render apenas se houve mudança relevante
                const before = JSON.stringify(aulasCache.map((a)=>({
                        id: a.id,
                        status: a.status,
                        dataHora: a.dataHora,
                        vagas_restantes: a.vagas_restantes
                    })));
                const after = JSON.stringify(novasAulas.map((a)=>({
                        id: a.id,
                        status: a.status,
                        dataHora: a.dataHora,
                        vagas_restantes: a.vagas_restantes
                    })));
                if (before !== after) {
                    aulasCache = novasAulas;
                    professorCache = data.professor || professorCache;
                    root.innerHTML = (0, _professorPublicoTemplate.ProfessorPublicoTemplate).render({
                        professor: professorCache,
                        aulas: aulasCache
                    });
                    setupReservarHandler();
                    setupConsultaAgendamentoButton(linkUnicoCache);
                }
            } catch (e) {
            // silencioso
            }
        }), 15000);
}
function setupReservarHandler() {
    window.handleReservarAula = handleReservarAula;
}
function showReservaModal(aulaId) {
    // Normalizar tipo: comparar como string
    const aula = aulasCache.find((a)=>String(a.id) === String(aulaId));
    if (!aula) {
        (0, _toast.mostrarToast)("Aula n\xe3o encontrada.", 'danger');
        return;
    }
    // (resto do modal continua igual)
    const modalHtml = `
    <div class="modal fade" id="modalReserva" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Reservar Aula: ${aula.titulo}</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="formReserva">
              <div class="mb-3">
                <label for="nome" class="form-label">Seu Nome</label>
                <input type="text" class="form-control" id="nome" name="nome" required>
              </div>
              <div class="mb-3">
                <label for="telefone" class="form-label">Telefone</label>
                <input type="tel" class="form-control" id="telefone" name="telefone" required>
              </div>
              <div class="mb-3">
                <label for="email" class="form-label">E-mail</label>
                <input type="email" class="form-control" id="email" name="email" required>
              </div>
              <button type="submit" class="btn btn-primary w-100">Confirmar Reserva</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  `;
    let modalDiv = document.getElementById('modalReservaContainer');
    if (!modalDiv) {
        modalDiv = document.createElement('div');
        modalDiv.id = 'modalReservaContainer';
        document.body.appendChild(modalDiv);
    }
    modalDiv.innerHTML = modalHtml;
    const modalEl = document.getElementById('modalReserva');
    const modal = new window.bootstrap.Modal(modalEl);
    modal.show();
    const form = document.getElementById('formReserva');
    if (form) form.onsubmit = (event)=>handleReservaSubmit(event, aulaId, modal);
}
function handleReservarAula(aulaId) {
    showReservaModal(aulaId);
}
function handleReservaSubmit(event, aulaId, modal) {
    return __awaiter(this, void 0, void 0, function*() {
        event.preventDefault();
        const form = event.target;
        const nome = form.nome.value;
        const telefone = form.telefone.value;
        const email = form.email.value;
        const result = yield (0, _professorPublicoService.ProfessorPublicoService).reservarAula(linkUnicoCache, aulaId, nome, telefone, email);
        if (result.success) {
            modal.hide();
            (0, _toast.mostrarToast)('Reserva realizada com sucesso!', 'success');
            // Recarregar perfil e aulas para atualizar visual
            try {
                const data = yield (0, _professorPublicoService.ProfessorPublicoService).carregarPerfilEAulas(linkUnicoCache);
                aulasCache = data.aulas || [];
                professorCache = data.professor || professorCache;
                const root = document.getElementById('root');
                if (root) {
                    root.innerHTML = (0, _professorPublicoTemplate.ProfessorPublicoTemplate).render({
                        professor: professorCache,
                        aulas: aulasCache,
                        successMessage: 'Reserva realizada com sucesso!'
                    });
                    setupReservarHandler();
                    setupConsultaAgendamentoButton(linkUnicoCache);
                    startAulasAutoRefresh(root);
                }
            } catch (e) {
                console.warn("[handleReservaSubmit] n\xe3o foi poss\xedvel recarregar aulas:", e);
            }
        } else (0, _toast.mostrarToast)(result.error || 'Erro ao reservar', 'danger');
    });
}
// resto do arquivo (funções de consulta/agendamentos e renderizações) permanece igual,
// mas sempre compare ids com String(...) para evitar mismatches
// ...
function setupConsultaAgendamentoButton(linkUnico) {
    const btn = document.getElementById('btnAbrirConsultaAgendamento');
    if (btn) btn.onclick = ()=>showConsultaAgendamentoModal(linkUnico);
}
function showConsultaAgendamentoModal(linkUnico) {
    const modalHtml = `
    <div class="modal fade" id="modalConsultaAgendamento" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Consultar Meus Agendamentos</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="formConsultaAgendamento">
              <div class="mb-3">
                <label for="nomeConsulta" class="form-label">Nome</label>
                <input type="text" class="form-control" id="nomeConsulta" name="nome" required>
              </div>
              <div class="mb-3">
                <label for="telefoneConsulta" class="form-label">Telefone</label>
                <input type="tel" class="form-control" id="telefoneConsulta" name="telefone" required>
              </div>
              <div class="mb-3">
                <label for="emailConsulta" class="form-label">E-mail</label>
                <input type="email" class="form-control" id="emailConsulta" name="email" required>
              </div>
              <button type="submit" class="btn btn-primary w-100">Consultar</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  `;
    let modalDiv = document.getElementById('modalConsultaAgendamentoContainer');
    if (!modalDiv) {
        modalDiv = document.createElement('div');
        modalDiv.id = 'modalConsultaAgendamentoContainer';
        document.body.appendChild(modalDiv);
    }
    modalDiv.innerHTML = modalHtml;
    const modalEl = document.getElementById('modalConsultaAgendamento');
    const modal = new window.bootstrap.Modal(modalEl);
    modal.show();
    const form = document.getElementById('formConsultaAgendamento');
    if (form) form.onsubmit = (event)=>handleConsultaAgendamentoSubmit(event, linkUnico, modal);
}
function handleCancelarAgendamentoAluno(agendamento) {
    return __awaiter(this, void 0, void 0, function*() {
        var _a;
        if (!agendamento || !agendamento.reservaId) {
            (0, _toast.mostrarToast)("Reserva inv\xe1lida.", 'danger');
            return;
        }
        try {
            const url = `${(0, _api.API_BASE)}/reservas/${agendamento.reservaId}`;
            // Usar PUT para marcar status 'cancelada' e liberar vaga no backend
            const res = yield fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            if (res.ok) {
                (0, _toast.mostrarToast)('Reserva cancelada com sucesso!', 'success');
                // Atualizar UI e recarregar página automaticamente para refletir mudanças
                try {
                    if (window.lastConsultaAgendamento) {
                        const { linkUnico, nome, telefone, email } = window.lastConsultaAgendamento;
                        yield consultarAgendamentosAluno(linkUnico, nome, telefone, email);
                    } else (_a = document.getElementById('resultadoConsultaAgendamento')) === null || _a === void 0 || _a.remove();
                } finally{
                    setTimeout(()=>window.location.reload(), 800);
                }
            } else (0, _toast.mostrarToast)('Erro ao cancelar reserva.', 'danger');
        } catch (err) {
            (0, _toast.mostrarToast)('Erro ao cancelar reserva.', 'danger');
        }
    });
}
// Expose the cancel handler globally for use in inline onclick
window.handleCancelarAgendamentoAluno = handleCancelarAgendamentoAluno;
function consultarAgendamentosAluno(linkUnico, nome, telefone, email) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const url = `${(0, _api.API_BASE)}/professor-publico/${encodeURIComponent(linkUnico)}/agendamentos?nome=${encodeURIComponent(nome)}&telefone=${encodeURIComponent(telefone)}&email=${encodeURIComponent(email)}`;
            const res = yield fetch(url);
            const agendamentos = yield res.json();
            renderResultadoConsultaAgendamento(agendamentos);
        } catch (err) {
            (0, _toast.mostrarToast)('Erro ao atualizar agendamentos.', 'danger');
        }
    });
}
function handleConsultaAgendamentoSubmit(event, linkUnico, modal) {
    return __awaiter(this, void 0, void 0, function*() {
        event.preventDefault();
        const form = event.target;
        const nome = form.nome.value;
        const telefone = form.telefone.value;
        const email = form.email.value;
        window.lastConsultaAgendamento = {
            linkUnico,
            nome,
            telefone,
            email
        };
        try {
            const url = `${(0, _api.API_BASE)}/professor-publico/${encodeURIComponent(linkUnico)}/agendamentos?nome=${encodeURIComponent(nome)}&telefone=${encodeURIComponent(telefone)}&email=${encodeURIComponent(email)}`;
            const res = yield fetch(url);
            const agendamentos = yield res.json();
            modal.hide();
            renderResultadoConsultaAgendamento(agendamentos);
        } catch (err) {
            (0, _toast.mostrarToast)('Erro ao consultar agendamentos.', 'danger');
        }
    });
}
function renderResultadoConsultaAgendamento(agendamentos) {
    // Remove modal anterior se existir
    const oldModal = document.getElementById('modalMeusAgendamentos');
    const modalHtml = `
    <div class="modal fade" id="modalMeusAgendamentos" tabindex="-1" style="display:none;">
      <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 class="modal-title">Meus Agendamentos</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            ${!agendamentos || agendamentos.length === 0 ? `<div class='alert alert-info'>Nenhum agendamento encontrado para os dados informados.</div>` : agendamentos.map((a)=>{
        // Badge de status da aula (inclui destaque para REAGENDADA)
        let statusAulaBadge = `<span class='badge bg-secondary'>${a.statusAula || '-'}</span>`;
        const statusAulaLc = (a.statusAula || '').toLowerCase();
        if (statusAulaLc === 'disponivel' || statusAulaLc === "dispon\xedvel") statusAulaBadge = `<span class='badge bg-success'>${a.statusAula}</span>`;
        else if (statusAulaLc === 'reagendada') statusAulaBadge = `<span class='badge bg-warning text-dark'>Reagendada</span>`;
        else if (statusAulaLc === 'cancelada') statusAulaBadge = `<span class='badge bg-danger'>Cancelada</span>`;
        // Data/hora formatada (mostrar string crua se não for possível converter)
        let dataHoraRaw = a.dataHora || a.data_hora;
        let dataHoraStr = '-';
        if (dataHoraRaw) try {
            const d = new Date(dataHoraRaw);
            if (!isNaN(d.getTime())) dataHoraStr = d.toLocaleDateString() + ' ' + d.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });
            else dataHoraStr = String(dataHoraRaw);
        } catch (_a) {
            dataHoraStr = String(dataHoraRaw);
        }
        if (dataHoraStr === '-' && dataHoraRaw) dataHoraStr = String(dataHoraRaw);
        // Status da reserva
        let statusReservaBadge = `<span class='badge bg-secondary'>${a.status || '-'}</span>`;
        if ((a.status || '').toLowerCase() === 'ativa') statusReservaBadge = `<span class='badge bg-success'>Dispon\xedvel</span>`;
        // Exibir objeto inteiro para depuração
        let debugInfo = '';
        return `
                  <div class='card border-2 border-primary shadow-sm mb-4'>
                    <div class='card-header bg-primary text-white d-flex justify-content-between align-items-center'>
                      <span><i class="bi bi-calendar-event"></i> ${a.titulo}</span>
                      ${statusAulaBadge}
                    </div>
                    <div class='card-body d-flex flex-column flex-md-row flex-wrap justify-content-between'>
                      <div class='mb-2' style='min-width:220px;'>
                        <p class='mb-1'><b>Professor:</b> ${a.professorNome || '-'}</p>
                        <p class='mb-1'><b>Email:</b> ${a.professorEmail || '-'}</p>
                        <p class='mb-1'><b>Telefone:</b> ${a.professorTelefone || '-'}</p>
                      </div>
                      <div class='mb-2' style='min-width:180px;'>
                        <p class='mb-1'><b>${statusAulaLc === 'reagendada' ? 'Nova Data/Hora' : 'Data/Hora'}:</b> <span class='text-primary'>${dataHoraStr}</span></p>
                        <p class='mb-1'><b>Status da Aula:</b> <span class='text-primary'>${a.statusAula || '-'}</span></p>
                        <p class='mb-1'><b>Status da Reserva:</b> ${statusReservaBadge}</p>
                        ${debugInfo}
                      </div>
                      <div class='d-flex align-items-end justify-content-end flex-grow-1'>
                        <button class='btn btn-outline-danger btn-sm' onclick='if(confirm("Tem certeza que deseja cancelar a aula?")) handleCancelarAgendamentoAluno(${JSON.stringify(a)})'>Cancelar</button>
                      </div>
                    </div>
                  </div>
                  `;
    }).join('')}
          </div>
        </div>
      </div>
    </div>
  `;
    // Adiciona modal ao body
    const modalDiv = document.createElement('div');
    modalDiv.innerHTML = modalHtml;
    document.body.appendChild(modalDiv);
    // Inicializa e exibe o modal (Bootstrap 5)
    const modalElement = document.getElementById('modalMeusAgendamentos');
    if (modalElement) {
        // @ts-ignore
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    }
}

},{"../templates/ProfessorPublicoTemplate":"a133p","../services/ProfessorPublicoService":"baj5M","../components/Toast":"4e6Xy","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT","../services/api":"kfpAV"}],"a133p":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProfessorPublicoTemplate", ()=>ProfessorPublicoTemplate);
class ProfessorPublicoTemplate {
    static render(params = {}) {
        const professor = params.professor || {};
        const aulas = params.aulas || [];
        return `
      <div class="container py-5">
        <div class="row justify-content-center">
          <div class="col-lg-10">
            <div class="card shadow-lg border-0 mb-4">
              <div class="card-body d-flex flex-column flex-md-row align-items-md-center gap-4 p-4">
                <div class="text-center flex-shrink-0">
                  <i class="bi bi-person-circle display-1 text-primary"></i>
                  <h2 class="fw-bold mt-2 mb-1">${professor.nome || 'Professor(a)'}</h2>
                  <div class="text-muted mb-3 fs-5">${professor.especialidade || ''}</div>
                </div>
                <div class="flex-fill">
                  <div class="row g-2">
                    <div class="col-12 col-md-6">
                      <div class="mb-2"><i class="bi bi-mortarboard me-2 text-secondary"></i><b>Forma\xe7\xe3o:</b> <span class="text-dark">${professor.formacao || '-'}</span></div>
                      <div class="mb-2"><i class="bi bi-briefcase me-2 text-secondary"></i><b>Experi\xeancia:</b> <span class="text-dark">${professor.experiencia || '-'}</span></div>
                    </div>
                    <div class="col-12 col-md-6">
                      <div class="mb-2"><i class="bi bi-envelope me-2 text-secondary"></i><b>E-mail:</b> <span class="text-dark">${professor.email || '-'}</span></div>
                      <div class="mb-2"><i class="bi bi-telephone me-2 text-secondary"></i><b>Telefone:</b> <span class="text-dark">${professor.telefone || '-'}</span></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="card shadow-sm">
              <div class="card-header bg-primary text-white">
                <h4 class="mb-0"><i class="bi bi-calendar3"></i> Aulas Dispon\xedveis</h4>
              </div>
              <div class="card-body">
                ${params.errorMessage ? `<div class='alert alert-danger'>${params.errorMessage}</div>` : ''}
                ${params.successMessage ? `<div class='alert alert-success'>${params.successMessage}</div>` : ''}
                <div class="row g-4">
                  ${aulas.length > 0 ? aulas.map((aula)=>{
            var _a;
            return `
                    <div class="col-12 col-md-6 col-lg-4">
                      <div class="card h-100 border-primary">
                        <div class="card-body">
                          <h5 class="card-title d-flex align-items-center justify-content-between">
                            <span>${aula.titulo}</span>
                            ${aula.status === 'REAGENDADA' ? `<span class='badge bg-warning text-dark ms-2'>Reagendada</span>` : ''}
                          </h5>
                          <div><b>Conte\xfado:</b> ${aula.conteudo}</div>
                          <div><b>${aula.status === 'REAGENDADA' ? 'Nova Data/Hora' : 'Data/Hora'}:</b> ${new Date(aula.dataHora).toLocaleString()}</div>
                          <div><b>Dura\xe7\xe3o:</b> ${aula.duracao} min</div>
                          <div><b>Valor:</b> R$ ${((_a = aula.valor) === null || _a === void 0 ? void 0 : _a.toFixed(2)) || '-'}</div>
                          <div><b>Vagas:</b> ${typeof aula.vagas_restantes === 'number' ? aula.vagas_restantes : '-'} / ${typeof aula.vagas_total === 'number' ? aula.vagas_total : '-'}</div>
                          <div class="mt-3">
                            <button class="btn btn-outline-primary w-100" ${aula.vagas_restantes && aula.vagas_restantes > 0 ? '' : 'disabled'} onclick="${params.onReservar || 'handleReservarAula'}('${aula.id}')">
                              <i class="bi bi-calendar-plus"></i> ${aula.status === 'REAGENDADA' ? 'Reservar (Reagendada)' : 'Reservar'}
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  `;
        }).join('') : `<div class='col-12 text-center text-muted'>Nenhuma aula dispon\xedvel no momento.</div>`}
                </div>
              </div>
            </div>
            <!-- Bot\xe3o e container para consultar agendamentos do aluno -->
            <div class="mt-5 text-center">
              <button id="btnAbrirConsultaAgendamento" class="btn btn-outline-secondary">
                <i class="bi bi-search"></i> Consultar meus agendamentos
              </button>
            </div>
            <div id="modalConsultaAgendamentoContainer"></div>
            <div id="resultadoConsultaAgendamento" class="mt-4"></div>
          </div>
        </div>
      </div>
    `;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"baj5M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProfessorPublicoService", ()=>ProfessorPublicoService);
// src/client/services/ProfessorPublicoService.ts
var _api = require("./api");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ProfessorPublicoService {
    static carregarProfessor(linkUnico) {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield (0, _api.getProfessorPublico)(linkUnico);
            if (!res.ok) throw new Error('Erro ao carregar dados do professor');
            return yield res.json();
        });
    }
    static carregarAulas(linkUnico) {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield (0, _api.getAulasPublicas)(linkUnico);
            if (!res.ok) throw new Error('Erro ao carregar aulas');
            return yield res.json();
        });
    }
    static reservarAula(linkUnico, aulaId, nome, telefone, email) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const payload = {
                    aulaId,
                    alunoNome: nome,
                    alunoTelefone: telefone,
                    alunoEmail: email
                };
                const res = yield (0, _api.reservarAulaPublica)(linkUnico, aulaId, payload);
                if (res.ok) return {
                    success: true
                };
                else {
                    const err = yield res.json().catch(()=>({
                            error: 'Erro desconhecido'
                        }));
                    return {
                        success: false,
                        error: err.error || 'Erro desconhecido'
                    };
                }
            } catch (error) {
                return {
                    success: false,
                    error: 'Erro ao conectar com o servidor.'
                };
            }
        });
    }
    static carregarPerfilEAulas(linkUnico) {
        return __awaiter(this, void 0, void 0, function*() {
            const res = yield (0, _api.getPerfilEAulasPublicas)(linkUnico);
            if (!res.ok) throw new Error('Erro ao carregar dados do professor');
            return yield res.json();
        });
    }
}

},{"./api":"kfpAV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}]},["cDij9","hA1Na"], "hA1Na", "parcelRequired50e", {})

//# sourceMappingURL=client.1ddb970e.js.map
